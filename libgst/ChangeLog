2013-08-09  Holger Hans Peter Freyther  <holger@moiji-mobile.com>

	* libgst/cint.c: Bind link, fsync, fdatasync and sync for
	additional C level access.

2013-08-10  Gwenael Casaccio <gwenael.casaccio@gmail.com>

	* comp.c: Add arguments and temporaries name in DebugInformation.
	* comp.h: Add a debugInfo state in the compiler.
	* dict.c: Add _gst_identity_dictionary_new.
	* dict.h: Add _gst_identity_dictionary_new.
	* files.c: Bootstrap information for DebugInformation.

2013-07-09  Gwenael Casaccio <gwenael.casaccio@gmail.com>

	* oop.c: Protect oop1 and oop2 in _gst_swap_objects.

2013-07-16  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/oop.h: Add incubator depth.
	* libgst/oop.inl: Track incubator depth and add inc_current_depth().
	* libgst/comp.c: Assert that add_literal is not called within an
	incubator context (suggested by Gwen).

2013-07-16  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Do not call add_literal within an incubator context.

2013-06-10  Holger Hans Peter Freyther  <holger@moiji-mobile.com>

	* interp-jit.inl: Set the F_XLAT_REACHABLE flag in refresh_native_ips.

2013-06-03  Holger Hans Peter Freyther  <holger@moiji-mobile.com>

	* files.c: Make BlockClosure available before the CharacterArray.

2013-06-03  Holger Hans Peter Freyther  <holger@moiji-mobile.com>

	* xlat.c: Use jit_flush_code for the runtime code.

2013-06-14  Gwenael Casaccio <gwenael.casaccio@gmail.com>

	* libgst/dict.c: Remove useless code: gst_ordered_collection structure.
	* libgst/dict.inl: Remove useless code: ordered_collection_begin and ordered_collection_end.

2013-05-18  Holger Hans Peter Freyther  <holger@freyther.de>

	* libgst/byte.c: Define _gst_omit_line_numbers, emit line
	numbers depending on this variable.
	* libgst/files.h: Declare the _gst_omit_line_numbers variable.
	* libgst/gst.h: Introduce GST_NO_LINE_NUMBERS.
	* libgst/interp.c: Implement get and set of GST_NO_LINE_NUMBERS.

2013-04-28  Holger Hans Peter Freyther  <holger@freyther.de>

	* libgst/gstpriv.h: Allow to disable the DO_PREFETCH.

2013-04-25  Holger Hans Peter Freyther  <holger@freyther.de>

	* libgst/md-config.h: Add cases for the ARM architecture.

2013-02-24  Holger Hans Peter Freyther  <holger@freyther.de>

	* libgst/dict.c: Remove ATTRIBUTE_HIDDEN from static methods.
	* libgst/comp.c: Remove unused variables in get_attributes_array.
	* libgst/save.c: Remove unused variable in make_oop_table_to_be_saved.

2013-01-17  Gwenael Casaccio  <gwenael.casaccio@gmail.com>

	* libgst/sysdep/win32/timer.c: Correct the function signature.

2012-12-29  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/oop.h: MAX_OOP_TABLE_SIZE is expressed in OOPs, not bytes.
	Reported by Holger Freyther.

2012-12-29  Holger Hans Peter Freyther  <holger@freyther.de>

	* libgst/alloc.c: _gst_heap_sbrk returns NULL and not MMAP_FAILED
	on allocation failure.
	* libgst/heap.c: Return NULL on allocation failure.

2012-09-09  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/sysdep/posix/events.c: Register the fd with gst
	before polling.

2012-07-15  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/opt.c: Fix error in compute_jump_length that could lead
	to verification errors after optimization.

2012-06-15  Thomas Girard  <thomas.g.girard@free.fr>

	* libgst/dict.inl: Add IS_C_LONGLONG and IS_C_ULONGLONG macros.
	* libgst/cint.c: Add missing long long and unsigned long long types
	to _gst_c_type_size.  Use new macros.
	* libgst/prims.def: Use IS_C_ULONG in VMpr_CObject_atPut.
	Use new macros.

2012-06-04  Thomas Girard  <thomas.g.girard@free.fr>

	* libgst/dict.inl: Add FROM_C_LONGLONG and FROM_C_ULONGLONG macros.
	* libgst/cint.c: Add missing mappings from (unsigned) long long.

2012-05-19  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.def: Another fix for the new primitive.

2012-05-19  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.def: Fix class test for new primitive.

2012-05-19  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/events.h: Adjust prototype for _gst_async_timed_wait.
	* libgst/prims.def: Switch VMpr_Processor_signalAtMillisecondClockValue
	to nanosecond precision, adjust call to _gst_async_timed_wait.
	* libgst/sysdep.h: Adjust prototype for _gst_sigalrm_at.
	* libgst/sysdep/cygwin/timer.c: Switch _gst_sigalrm_at to nanosecond
	precision.
	* libgst/sysdep/posix/timer.c: Switch _gst_sigalrm_at to nanosecond
	precision.
	* libgst/sysdep/win32/events.c: Switch _gst_async_timed_wait to nanosecond
	precision.

2012-05-19  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/events.h: Adjust prototype for _gst_async_timed_wait.
	* libgst/interp.c: Use _gst_sigvtalrm_every.
	* libgst/prims.def: Pass absolute time to _gst_async_timed_wait.
	* libgst/sysdep.h: Remove _gst_signal_after, add _gst_sigvtalrm_every
	and _gst_sigalrm_at.
	* libgst/sysdep/cygwin/timer.c: Remove _gst_signal_after, add
	_gst_sigvtalrm_every and _gst_sigalrm_at.
	* libgst/sysdep/posix/events.c: Use _gst_sigalrm_at.
	* libgst/sysdep/posix/timer.c: Remove _gst_signal_after, add
	_gst_sigvtalrm_every and _gst_sigalrm_at.
	* libgst/sysdep/win32/events.c: Get absolute time in
	_gst_async_timed_wait.
	* libgst/sysdep/win32/timer.c: Do not abort on _gst_sigvtalrm_every,
	just do nothing.

2012-05-19  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.def: Support the new primitive
	VMpr_Processor_signalAtMillisecondClockValue.

2012-05-19  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.def: Add VMpr_Time_nanosecondClock.
	* libgst/sysdep.h: Add _gst_get_ns_time.
	* libgst/sysdep/common/time.c: Add _gst_get_milli_time.
	* libgst/sysdep/posix/time.c: Change _gst_get_milli_time to
	_gst_get_ns_time.
	* libgst/sysdep/win32/time.c: Likewise.

2012-03-30  Gwenael Casaccio  <mrgwen@gmail.com>

	* libgst/oop.c: Allocate large objects from fixedspace.

2012-03-30  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/oop.h: Remove _gst_compact and _gst_alloc_old_obj.
	* libgst/oop.c: Make them static.

2012-03-30  Gwenael Casaccio  <mrgwen@gmail.com>

	* libgst/alloc.c: Allocate heaps with xcalloc.
	* libgst/oop.c: Let oldspace_before_freeing remove grey pages
	when compacting.

2012-03-29  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gst-parse.c: Do not call _gst_free_tree in the presence
	of lookahead, or add assertions that we can do so.  Reported by
	Gwenael Casaccio.

2012-03-29  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lex.c: Report location of EOF token.

2012-03-23  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/oop.c: Fix weak objects thinko in Gwen's patch.

2012-03-14  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/oop.c: Return fixedspace from oldspace_nomemory when
	appropriate.

2012-02-22  Gwenael Casaccio  <mrgwen@gmail.com>

	* libgst/oop.c: Fix weak objects with pointer and byte parts.

2012-03-01  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/oop.c: Remove premature optimization.

2012-02-22  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gstpriv.h: Include crt_externs.h if present.

2012-02-22  Gwenael Casaccio  <mrgwen@gmail.com>

	* libgst/opt.c: Account for two line number bytecodes.

2011-02-02  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/sysdep/posix/events.c: Fix signal handling race.
	Reported by Derek Zhou.

2012-02-02  Gwenael Casaccio  <mrgwen@gmail.com>
            Paolo Bonzini  <pbonzini@redhat.com>

	* libgst/interp.c: Use remove_process_from_list consistently.

2011-12-27  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Add MessageLookup declaration.
	* libgst/dict.h: Add gst_message_lookup.
	* libgst/files.c: Load MessageLookup.st.
	* libgst/interp.c: Pass a MessageLookup to #doesNotUnderstand:.

2011-12-14  Paolo Bonzini  <pbonzini@redhat.com>

	* libgst/gst-parse.c: Only increase lookahead by one token at
	a time, so that we do not lookahead past EOF.

2011-11-14  Mehul Sanghvi  <mehul.sanghvi@gmail.com>

	* libgst/cint.c: Add get_environ and pass it to Smalltalk.

2011-10-21  Paolo Bonzini  <bonzini@gnu.org>

	Revert commit c51f7d2 (do not automatically tenure large objects)

	2011-05-18  Gwenael Casaccio  <mrgwen@gmail.com>

	* libgst/gstpriv.h: Fix documentation of F_FIXED.
	* libgst/oop.c: Implement fixed young objects.

2011-09-26  Tony Garnock-Jones  <tonygarnockjones@gmail.com>

	* libgst/cint.c: Try .dylib as a last resort on Mac OS X.

2011-09-22  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/save.c: Close file descriptors upon image save.

2011-09-22  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Add the ClockOnImageSave class variable to time.

2011-08-13  Paolo Bonzini  <bonzini@gnu.org>
            Mathieu Suen  <mathieusuen@yahoo.fr>

	* libgst/dict.c: Add eventSemaphore to the ProcessorScheduler
	class.
	* libgst/events.c: Add support for event polling handlers.
	* libgst/events.h: Add declarations.
	* libgst/files.c: Call _gst_init_event_loop.
	* libgst/gstpub.c: Add _gst_set_event_loop_handlers to VMProxy
	and add wrapper for libgst.so.
	* libgst/gstpub.h: Likewise.
	* libgst/interp.c: Add sync_wait_process.
	* libgst/interp.h: Add eventSemaphore to ProcessorScheduler.
	* libgst/prims.def: Add VMpr_Processor_dispatchEvents.

2011-08-13  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.def: Atomically nil the file descriptor field
	when closing a FileDescriptor or socket.

2011-08-13  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.def: Wrap #snapshot in push_jmp_buf/pop_jmp_buf,
	since it will do call-ins via _gst_invoke_hook.  Suggested by
	Gwenael Casaccio.

2011-08-06  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp.inl: Fix previous commit.

2011-08-05  Holger Freyther  <holger@freyther.de>
            Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp.inl: Make smatch happy and add
	parameters to the function.

2011-08-05  Holger Freyther  <holger@freyther.de>

	* libgst/byte.h: Make smatch happy and add
	parameters to the function.

2011-08-05  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gstpriv.h: Fix definition of F_RUNTIME.

2011-08-01  Mathieu Suen  <mathieusuen@yahoo.fr>

	* libgst/cint.c: Add long long support for calls.
	* libgst/cint.h: Add CDATA_LONGLONG and CDATA_ULONGLONG.
	* libgst/dict.c: Pass CLongLongAlignment to Smalltalk.
	* libgst/prims.def: Add long long support for memory access.

2011-07-27  Gwenael Casaccio  <mrgwen@gmail.com>
            Paolo Bonzini  <bonzini@gnu.org>

	* libgst/oop.c: Use mark stack.
	* libgst/oop.h: Define mark stack data structures.

2011-07-27  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/oop.c: Clean up reset_incremental_gc.
	* libgst/oop.h: Remove first_allocated_oop.

2011-07-27  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/oop.c: Do not sweep below _gst_mem.last_swept_oop
	when initializing the incremental GC.

2011-07-27  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/save.c: Remove F_COUNT trick, mostly irrelevant
	since it is only used when the ot_delta is nonzero.
	* libgst/gstpriv.h: Update documentation of flag bits.

2011-07-23  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/sym.c: Remove _gst_symbol_as_string.  Suggested by
	Gwenael Casaccio.
	* libgst/sym.h: Likewise.

2011-07-04  Paolo Bonzini  <bonzini@gnu.org>
            Gwenael Casaccio  <mrgwen@gmail.com>

	* libgst/prims.def: Handle fixed instance variables in
	VMpr_ArrayedCollection_replaceFromToWithStartingAt, keeping
	existing failure conditions when the receiver has no fixed
	instance variables.

2011-07-04  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/events.c: Change _gst_sem_int_vec to async_queue_entry.
	Adjust uses.  Enqueue it with _gst_async_call_internal.
	* libgst/events.h: Change declaration.
	* libgst/gstpriv.h: Remove dummy __sync_synchronize.  Add __sync_swap
	and barrier().  Include events.h later.
	* libgst/interp-bc.inl: Use empty_async_queue.
	* libgst/interp-jit.inl: Likewise.
	* libgst/interp.c: Remove async_queue_entry.  Change async signal
	vectors to lists.  Export do_async_signal and add the new function
	_gst_do_async_signal_and_unregister.  Add gst_async_call_internal.
	Remove async-signal safe stuff from _gst_async_call, and always
	allocate an async_queue_entry; use a lockless stack (which is
	also async-signal-safe, so the same algorithms can be used in both
	cases).  Rewrite _gst_have_pending_async_calls and add
	empty_async_queue.  Adjust copying and marking of the lists.
	* libgst/interp.h: Put async_queue_entry here, adding a next pointer.
	Add declarations for the new functions.
	* libgst/oop.c: Use _gst_async_call_internal.
	* libgst/prims.def: Set exception flag when reenabling interrupts.
	* libgst/sysdep.c: Include pthread header.
	* libgst/cygwin/timer.c: Add void argument list.
	* libgst/posix/events.c: Add no_opt to fix removed volatile qualifier.
	Adjust access to _gst_sem_int_vec.  Enqueue the file polling call with
	_gst_async_call_internal.

2011-06-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/callin.c: Fix type of _gst_uint_to_oop argument.
	* libgst/callin.h: Fix type of _gst_uint_to_oop argument.
	* libgst/gstpub.c: Fix type of gst_uint_to_oop argument.
	* libgst/gstpub.h: Fix type of gst_uint_to_oop argument.

2011-05-26  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.h: Remove _gst_grow_dictionary and
	_gst_grow_identity_dictionary.
	* libgst/dict.c: Make them static, remove _gst_ prefix.

2011-05-26  Gwenael Casaccio  <mrgwen@gmail.com>

	* libgst/dict.c: Add mutex to MethodDictionary.

2011-05-26  Gwenael Casaccio  <mrgwen@gmail.com>

	* libgst/dict.c: Allow arbitrary instance variables in
	IdentityDictionaries.

2011-05-26  Gwenael Casaccio  <mrgwen@gmail.com>

	* libgst/dict.c: Fix superclass of MethodDictionary.

2011-05-23  Gwenael Casaccio  <mrgwen@gmail.com>

	* libgst/comp.c: Use MethodDictionary>>#at:put: to install Smalltalk
	methods after the kernel has been initialized.

2011-05-19  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.inl: Fix conversion to/from 64-bit values on 32-bit
	platforms.  Reported by Holger Hans Peter Freyther.
	* libgst/prims.def: Ensure conversion between epochs is done with
	64-bit math.

2011-05-19  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.def: Fix conversion between Smalltalk and Unix epoch.

2011-05-19  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.def: Implement one-argument VMpr_Time_timezoneBias.

2011-05-18  Mathieu Suen  <mathieusuen@yahoo.fr>

	* libgst/gst-parse.c: Allow creating unary pragmas.

2011-05-18  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gst-parse.c: Move creation of ATTRIBUTE_LIST contents here...
	* libgst/tree.c: ... from here.
	* libgst/tree.h: Adjust documentation.

2011-05-18  Gwenael Casaccio  <mrgwen@gmail.com>

	* libgst/gstpriv.h: Fix documentation of F_FIXED.
	* libgst/oop.c: Implement fixed young objects.

2011-04-29  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/callin.c: Use FROM_C_INT and FROM_C_LONG properly.
	Add _gst_uint_to_oop.
	* libgst/callin.h: Declare _gst_uint_to_oop.
	* libgst/gstpub.c: Add _gst_uint_to_oop to proxy, add gst_uint_to_oop.
	* libgst/gstpub.h: Add matching declarations.

2011-04-29  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/sym.c: Fix argument count of selectors starting with _.
	Reported by Mathieu Suen.

2011-04-14  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.h: Fix extern declaration of _gst_compiler_state.

2011-04-10  Holger Hans Peter Freyther  <holger@freyther.de>

	* libgst/cint.c: Free #string, #byteArray, #symbol, #wstring
	converted arguments.

2011-03-28  Holger Hans Peter Freyther  <holger@freyther.de>

	* libgst/prims.def: Set errno for VMpr_FileDescriptor_socketOp.

2011-03-25  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.def: Fix crashes with unexpected integer arguments.

2011-03-24  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp.inl: Fix brokenness on non-x86 platforms.

2011-03-12  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/callin.c: Remove dead code signaled by clang analyzer.
	* libgst/cint.c: Likewise.
	* libgst/comp.c: Likewise, and add missing INC_RESTORE_POINTER.
	* libgst/dict.c: Likewise.
	* libgst/interp.c: Likewise.
	* libgst/mpz.c: Likewise.
	* libgst/oop.c: Likewise.
	* libgst/opt.c: Likewise.
	* libgst/re.c: Likewise.

2011-03-19  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gst-parse.c: Fix attribute breakage.

2011-03-09  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Add receiver to _gst_execute_statements.
	* libgst/gst-parse.c: Replace current class with receiver
	in execute_doit.

2011-03-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Change undeclared_strategy to boolean,
	accept it as an additional argument in _gst_compile_method,
	move it into compiler state.
	* libgst/comp.h: Add field, adjust prototype.
	* libgst/gst-parse.c: Change undeclared_strategy to boolean,
	pass it to _gst_compile_method.
	* libgst/input.c: Remove calls to _gst_set_undeclared, it is
	always overridden anyway.
	* libgst/sym.c: Access undeclared strategy in compiler state,
	remove _gst_set_undeclared.
	* libgst/sym.h: Remove undeclared_strategy and _gst_set_undeclared.

2011-03-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Accept recursive TREE_METHOD_NODEs, transform
	them to compile-time constants.
	* libgst/gst-parse.c: Parse compile-time constants as recursive
	TREE_METHOD_NODEs.

2011-03-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Wrap attributes into an OOP and pass them to
	_gst_make_new_method, instead of using process_attributes_tree.
	Limit lifetime of method_attrs to _gst_make_new_method.
	* libgst/comp.h: Adjust _gst_make_new_method arguments, remove
	_gst_process_attributes_array.
	* libgst/prims.def: Adjust call.

2011-03-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Rewrite compilation of cascades to remove
	dup_message_receiver.  Instead, compile the receiver
	separately.  Avoid optimizations when the compilation is
	part of a cascade.

2011-03-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Use compiler state for the bad_method jmpbuf.
	* libgst/comp.h: Add field here.

2011-03-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Use compiler state for the literal vector.
	* libgst/comp.h: Add literal vector fields here.  Remove
	_gst_init_compiler.
	* libgst/files.c: Remove calls.
	* libgst/opt.c: Adjust _gst_is_simple_return to return literal by ref.
	* libgst/opt.h: Adjust prototype.

2011-03-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Always pass literals to _gst_make_new_method.

2011-03-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Use compiler state for inside_block.
	* libgst/comp.h: Add field here.

2011-03-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/byte.c: Use compiler state for _gst_line_number.
	* libgst/comp.h: Add fields here.

2011-03-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Pass a whole method node to #executeStatements.
	* libgst/comp.h: Adjust prototype.
	* libgst/gst-parse.c: Add back removed code here.
	* libgst/tree.c: Add default selectorExpr.

2011-03-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gst-parse.c: Move optimization of const_exprs from
	make_attribute to execute_doit.

2011-03-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gst-parse.c: Pass current class when evaluating class
	variable declarations.

2011-03-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Do not call _gst_compute_linearized_pools here.
	* libgst/gst-parse.c: Call it here, before a doit or when setting
	the compilation class.	Add currentClassOOP argument to
	execute_doit so that the compilation class for the doit can be
	set when parsing a class pragma.
	* libgst/sym.c: Accept a parser in _gst_compute_linearized_pools.
	Add _gst_free_linearized_pools.
	* libgst/sym.h: Add _gst_free_linearized_pools.

2011-03-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gst-parse.c: Never use UNDECLARED_NONE.
	* libgst/sym.c: Remove it.
	* libgst/sym.h: Remove it.

2011-03-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Move _gst_make_attribute and list_length
	respectively...
	* libgst/gst-parse.c: here (as make_attribute)...
	* libgst/tree.c: ... and here (as _gst_list_length).
	* libgst/comp.h: Adjust.
	* libgst/tree.h: Adjust.

2011-03-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Add compiler_state.
	* libgst/comp.h: Add compiler_state.
	* libgst/sym.c: Move cur_scope into it.

2011-03-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gst-parse.h: Add linearized_pools.
	* libgst/sym.c: Make linearized_pools per-parser.

2011-03-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gst-parse.h: Move YYLTYPE/YYSTYPE to lex.h.
	* libgst/gstprib.h: Move compiler headers together.
	* libgst/lex.h: Add more lexer data types.
	* libgst/sym.c: Remove scope/pool_list typedefs.
	* libgst/sym.h: Add them here.  Use gst_parser forward reference.
	* libgst/tree.h: Remove struct byte_object.

2011-03-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gst-parse.c: Move creation of ATTRIBUTE_LIST contents here...
	* libgst/tree.c: ... from here.
	* libgst/tree.h: Adjust documentation.

2011-03-08  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/opt.c: Add missing verification rule.

2011-03-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Remove _gst_display_compilation_trace, put
	it directly in _gst_execute_statements.
	* libgst/comp.h: Remove _gst_display_compilation_trace declaration.
	* libgst/prims.def: Remove calls to _gst_display_compilation_trace
	in the legacy #methodsFor: primitives.

2011-02-28  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.inl: Fix creation of FloatQ's on non-x86 platforms.

2011-02-24  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp.c: Fix GC bug reported by Gwenael Casaccio.

2011-02-14  Holger Hans Peter Freyther  <holger@freyther.de>

	* libgst/interp.c: Always inline unwind_context.

2011-02-11  Paolo Bonzini <bonzini@gnu.org>

	* libgst/cint.c: Fix previous patch.  Add printf for coverage
	of variadic functions.

2011-02-04  Holger Hans Peter Freyther  <holger@freyther.de>

	* libgst/cint.c: Propagate type conversion failures.

2011-02-04  Holger Hans Peter Freyther  <holger@freyther.de>

	* libgst/sockets.c: Add size check for the socket addr.

2011-01-27  Paolo Bonzini <bonzini@gnu.org>

	* libgst/gst-parse.c: Improve error recovery, fix compiler.st
	regressions.

2011-01-27  Paolo Bonzini <bonzini@gnu.org>

	* libgst/gstpriv.h: Return boolean values from IS_OOP_*.
	* libgst/oop.inl: Likewise.

2011-01-27  Paolo Bonzini <bonzini@gnu.org>

	* libgst/gst-parse.c: Track current namespace across doits.

2011-01-27  Mathieu Suen  <mathieusuen@yahoo.fr>
	    Paolo Bonzini <bonzini@gnu.org>

	* libgst/interp.inl: Add Mersenne Twister.
	* libgst/prims.def: Implement VMpr_Random_next.

2011-01-24  Paolo Bonzini <bonzini@gnu.org>

	* libgst/gst-parse.c: Incubate lastMethodOOP.

2011-01-24  Paolo Bonzini <bonzini@gnu.org>

	* libgst/comp.c: Fixes to previous commit.
	* libgst/gst-parse.c: Likewise.

2011-01-24  Paolo Bonzini <bonzini@gnu.org>

	* libgst/comp.c: Store current tree object for the method.
	Replace calls to _gst_set_compilation_class and
	_gst_set_compilation_category with new arguments to
	_gst_make_new_method.  Replace accesses to _gst_this_class
	and _gst_this_category with accesses to _gst_curr_method.
	Replace accesses to _gst_untrusted_methods with accesses
	to new fields in the method tree or _gst_untrusted_parse().
	* libgst/comp.h: Remove declarations for deleted variables.
	* libgst/gst-parse.c: Add _gst_get_current_namespace,
	_gst_untrusted_class.  Move _gst_set_compilation_class,
	_gst_set_compilation_category, _gst_reset_compilation_catgory here.
	* libgst/sym.c: Remove arguments to _gst_compute_linearized_pools,
	use _gst_curr_method instead.
	* libgst/sym.h: Adjust.
	* libgst/tree.c: Add new arguments to _gst_make_method.
	* libgst/tree.h: Likewise, and adjust struct method_node.

2011-01-24  Paolo Bonzini <bonzini@gnu.org>

	* libgst/comp.c: Use new attribute of method trees instead of
	temporarily changing the namespace of UndefinedObject.
	* libgst/gst-parse.c: Adjust call.
	* libgst/sym.c: Add namespace override to
	_gst_compute_linearized_pools.
	* libgst/sym.h: Adjust prototype.
	* libgst/tree.c: Add namespace override to method trees.
	* libgst/tree.h: Adjust declarations and prototype.
	* libgst/dict.inl: Remove SET_CLASS_ENVIRONMENT.

2011-01-24  Paolo Bonzini <bonzini@gnu.org>

	* libgst/sym.c: Add _gst_compute_linearized_pool_order.
	* libgst/sym.h: Declare it.
	* libgst/comp.c: Use it.

2011-01-24  Paolo Bonzini <bonzini@gnu.org>

	* libgst/comp.c: Remove _gst_latest_compiled_method.  Return
	it from _gst_compile_method.
	* libgst/comp.h: Remove _gst_latest_compiled_method.
	* libgst/gst-parse.c: Store latest compiled method in the
	parser.  Return it from _gst_parse_method.
	* libgst/lex.c: Return latest compiled method in
	_gst_parse_method_from_stream.
	* libgst/lex.h: Adjust prototype.
	* libgst/interp.c: Push latest compiled method in
	parse_method_from_stream_with_protection.
	* libgst/prims.def: Adjust primitives that call it.

2011-01-24  Paolo Bonzini <bonzini@gnu.org>

	* libgst/comp.c: #methodsFor: is no longer needed for bootstrap.

2011-01-24  Paolo Bonzini <bonzini@gnu.org>

	* libgst/dict.inl: Add CLASS_ENVIRONMENT.
	* libgst/sym.c: Use it.

	* libgst/gst-parse.c: Receive current namespace from outside.
	* libgst/gst-parse.h: Adjust prototypes.
	* libgst/lex.c: Adjust _gst_parse_stream, add
	_gst_parse_method_from_stream.
	* libgst/lex.h: Adjust prototypes.
	* libgst/callin.c: Adjust callers.
	* libgst/comp.c: Likewise.
	* libgst/input.c: Likewise.
	* libgst/interp.c: Adjust parse_stream_with_protection, add
	parse_method_from_stream_with_protection.
	* libgst/prims.def: Adjust callers.

2011-01-24  Paolo Bonzini <bonzini@gnu.org>

	* libgst/callin.c: Incubate return value.
	* libgst/comp.c: Do not rely on _gst_last_returned_value when it
	could be overridden by hooks or other Smalltalk code.
	* libgst/gst-parse.c: Do not use _gst_last_returned_value.

2011-01-24  Paolo Bonzini <bonzini@gnu.org>

	* libgst/gst-parse.c: Add current namespace to gst_parser.
	* libgst/gst-parse.h: Likewise.

2011-01-24  Paolo Bonzini <bonzini@gnu.org>

	* libgst/dict.c: Add Smalltalk as a shared pool.

2011-01-18  Paolo Bonzini <bonzini@gnu.org>

	* libgst/interp.c: Do not verify an invalid invariant.

2011-01-14  Paolo Bonzini <bonzini@gnu.org>

	* libgst/cint.c: Accept UndefinedObject for #cObjectPtr.

2011-01-10  Paolo Bonzini <bonzini@gnu.org>

	* libgst/files.c: Load Autoload.st last.

2011-01-10  Paolo Bonzini  <bonzini@gnu.org>
	    Mathiue Suen  <mathieusuen@yahoo.fr>

	* libgst/dict.inl: Fix 32-bit #int and 64-bit #uint limits.

2010-12-05  Paolo Bonzini  <bonzini@gnu.org>

	* lib-src/sockets.c: Use O_NONBLOCK from socketx.h.

2010-12-04  Paolo Bonzini <bonzini@gnu.org>

	* libgst/dict.inl: Avoid crash on #changeClassTo: and UnicodeString.

2010-11-10  Paolo Bonzini <bonzini@gnu.org>

	* libgst/heap.c: Detect out-of-memory.

2010-11-10  Paolo Bonzini <bonzini@gnu.org>

	* libgst/interp.c: Change the stack top to nil in _gst_sync_wait
	and put the semaphore back in _gst_sync_signal.  This allows
	Smalltalk code to distinguish interruptions from successful waits.

2010-11-08  Paolo Bonzini <bonzini@gnu.org>

	* libgst/memzero.h: Remove.
	* libgst/dict.c: Replace memzero with memset.
	* libgst/dict.inl: Replace memzero with memset.
	* libgst/gstpriv.h: Replace memzero with memset.
	* libgst/heap.c: Replace memzero with memset.
	* libgst/lex.c: Replace memzero with memset.
	* libgst/mpz.c: Replace memzero with memset.
	* libgst/opt.c: Replace memzero with memset.
	* libgst/prims.def: Replace memzero with memset.
	* libgst/save.c: Replace memzero with memset.
	* libgst/xlat.c: Replace memzero with memset.

2010-11-08  Paolo Bonzini <bonzini@gnu.org>

	* libgst/interp.c: Streamline unwind_context even more.  The compiler
	can do enough optimization that we can use the free_lifo_context
	global directly.  Also, _gst_nil_oop is kept in a register so
	icache-wise it pays to always do the store into parentContext.

2010-11-08  Paolo Bonzini <bonzini@gnu.org>

	* libgst/dict.inl: Add instantiate_numbytes, use it for instantiate
	and non-pointer instantiate_with; do not unroll nil initialization
	since N is usually small here.  Rewrite nil_fill.
	* libgst/interp.c: Unroll the first few itertaions of prepare_context.
	Do not use nil_fill.
	* libgst/md-config.h: Remove loop unrolling macros.

2010-11-02  Paolo Bonzini <bonzini@gnu.org>

	* libgst/md-config.h: Tune for x86-64.

2010-11-02  Paolo Bonzini <bonzini@gnu.org>

	* libgst/interp.inl: Add optimized x86 versions of tagged arithmetic
	operations.

2010-11-02  Paolo Bonzini <bonzini@gnu.org>

	* libgst/interp.inl: Add here functions for SmallInteger OOP arithmetic.
	* libgst/prims.def: Use the new functions.
	* libgst/vm.def: Use the new functions.

2010-11-02  Paolo Bonzini <bonzini@gnu.org>

	* libgst/comp.c: Reorder printing of statistics so that the results
	are not influenced by printing the result and by the #afterEval
	hooks.

2010-10-31 Paolo Bonzini <bonzini@gnu.org>

	* libgst/sysdep/posix/events.c: Remove pthread_in_use.

2010-10-30 Paolo Bonzini <bonzini@gnu.org>

	* libgst/sysdep/posix/events.c: Include pthread.h if using pthreads.

2010-10-17 Paolo Bonzini <bonzini@gnu.org>

	* libgst/prims.def: NULL-terminate the output of VMpr_String_asCData.
	Suggested by Holger Hans Peter Freyther.

2010-10-08 Paolo Bonzini <bonzini@gnu.org>

	* libgst/cint.c: Retrieve CCallbackDescriptor on image load.

2010-09-27  Holger Hans Peter Freyther  <zecke@selfish.org>

	* libgst/oop.c: Fix a typo.

2010-09-27  Paolo Bonzini <bonzini@gnu.org>

	* libgst/gst-parse.c: Correctly handle scoped methods within
	a class block.

2010-09-27  Paolo Bonzini <bonzini@gnu.org>

	* libgst/gst-parse.c: Fix NULL pointer dereference.

2010-09-25  Gwenael Casaccio  <mrgwen@gmail.com>

	* libgst/gst-parse.c: Support multi-keyword class attributes.

2010-07-27  Paolo Bonzini <bonzini@gnu.org>

	* libgst/sysdep.h: Correctly use size_t/ssize_t.
	* libgst/sysdep/common/files.c: Likewise.
	* libgst/prims.def: Likewise.  Remove duplicate checks.

2010-07-27  Paolo Bonzini <bonzini@gnu.org>

	* libgst/sysdep.h: Remove _gst_full_write.
	* libgst/sysdep/common/files.c: Move _gst_full_write...
	* libgst/save.c: ... here.  longjmp out to _gst_save_to_file when
	it fails.

2010-07-27  Paolo Bonzini <bonzini@gnu.org>

	* libgst/cint.c: Fix warnings.
	* libgst/real.c: Fix out-of-bounds array access (which is actually
	unreachable, but GCC still warns).
	* libgst/prims.def: Fix two warnings.
	* libgst/sysdep/win32/signals.c: Fix warning.

2010-07-04  Paolo Bonzini <bonzini@gnu.org>

	* libgst/oop.c: Fix GC_DEBUGGING compilation.  Fix GC bug in
	"ObjectMemory current".

2010-06-13  Paolo Bonzini <bonzini@gnu.org>

	* libgst/callin.c: Use _gst_copy_oop_range and _gst_mark_oop_range.
	* libgst/oop.c: Rewrite tail recursion in _gst_mark_an_oop_internal.
	Add _gst_mark_oop_range.
	* libgst/oop.h: Add _gst_mark_oop_range, change prototype of
	_gst_mark_an_oop_internal.
	* libgst/oop.inl: Remove COPY_OOP_RANGE and MARK_OOP_RANGE, adjust
	MAYBE_MARK_OOP.

2010-06-13  Paolo Bonzini <bonzini@gnu.org>

	* libgst/sockets.c: "Touch" all pointer arguments to socket
	system calls to avoid EFAULT.

2010-06-06  Paolo Bonzini <bonzini@gnu.org>

	* libgst/sysdep/posix/time.c: Fix previous change for millisecond
	vs. microsecond confusion.

2010-05-28  Paolo Bonzini <bonzini@gnu.org>

	* libgst/sysdep/posix/time.c: Prefer using nanosleep to usleep.
	usleep is totally broken under Solaris 8 and 9. Reported by Rick
	Flower.

2010-05-21  Paolo Bonzini <bonzini@gnu.org>

	* libgst/files.c: Load DynVariable.st.

2010-05-18  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Flush aggressively around _gst_execute_statements.
	* libgst/gst-parse.c: Likewise.

2010-04-21  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/sockets.c: Fix previous commit.

2010-04-19  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/sockets.c: Make connect return int.

2010-04-17  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/input.c: Remove dead code.

2010-04-11  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/sysdep/win32/events.c: Ahem, this really could not work.

2010-04-11  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/cint.c: Fix warnings on platforms with no lstat.

2010-03-25  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/sockets.c: Fix logic for no SOCK_CLOEXEC or no accept4.

2010-02-20  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/files.c: Adjust for AnsiExcept.st rename.

2010-02-18  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/vm.def: Make EXIT_INTERPRETER safer since we now can fork
	CallinProcesses to Processes.

2010-02-18  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Compile the termination method with an infinite
	loop to avoid falling off the last context.

2010-02-05  Gwenael Casaccio  <mrgwen@gmail.com>

	* libgst/sysdep/posix/events.c: Fix initialization of waiting_thread.

2010-01-11  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/genbc-decl.y: Embarrassing typo.

2010-01-08  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/mpz.c: Hack to build with GMP 5.

2010-01-01  Paolo Bonzini  <bonzini@gnu.org>

	* Update copyright years.

2009-12-11  Gwenael Casaccio  <mrgwen@gmail.com>

	* libgst/prims.def: Fix bug in similarityTo:.

2009-12-09  Alexey Zakhlestin  <indeyets@gmail.com>

	* libgst/gstpriv.h: Include sockets.h.
	* libgst/print.c: Fix printf.
	* libgst/socklen.c: Use socklen_t where appropriate.
	* libgst/sym.c: Remove useless cast.
	* libgst/sysdep/common/files.c: Fix 64-bit cleanliness problems.
	* libgst/sysdep/posix/findexec.c: Likewise.

2009-12-05  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/byte.c: Add LN_ABSOLUTE, emit relative line number bytecodes
	together with _following_ bytecode.
	* libgst/byte.h: Add LN_ABSOLUTE.
	* libgst/comp.c: Emit absolute line number for the line with the
	selector.
	* libgst/opt.c: Remove now useless two-line-numbers optimization.

2009-11-26  Lee Duhem  <lee.duhem@gmail.com>

	* libgst/comp.c: Make formatted source of Behavior>>methodsFor: look
	better.

2009-11-12  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Pass PREFIX and EXEC_PREFIX.

2009-11-02  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.def: Do not fail on pow(0.0, 0.0).

2009-11-01  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Fix computation of jump lengths.

2009-10-28  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gstpub.c: Move init_vmproxy and _gst_get_vmproxy...
	* libgst/callin.c: ... here.  Make_gst_init_vmproxy public, do
	not call it from _gst_get_vmproxy.
	* libgst/callin.h: Declare them here...
	* libgst/files.h: ... not here.
	* libgst/files.c: Call _gst_init_vmproxy.

2009-10-17  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/sysdep/win32/events.c: Implement pause/wakeup.

2009-10-21  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/sockets.c: Fix !HAVE_IPV6 compilation, and other Cygwin
	problems.

2009-10-13  Nigel Williams  <nigelw@elder-gods.net>

	* libgst/cint.c: Always open with lt_dlopen first, then try
	lt_dlopenext.

2009-10-13  Eli Green  <detgk@me.com>

	* libgst/events.h: Fix multiply defined symbols on Mac OS X.

2009-10-06  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.def: Fix #becomeForward: to look at LIFO contexts.

2009-10-04  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.def: Allow reusing #at: primitive for #at:ifAbsent:.

2009-10-04  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.def: Implement memchr primitive.

2009-09-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/sysdep/win32/signals.c: Simplify given known set of valid
	signals.

2009-09-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/events.h: Add _gst_get_fd_error.
	* libgst/sysdep/win32/events.c: Implement it.
	* libgst/sysdep/posix/events.c: Implement it as a stub.
	* libgst/sockets.c: Use it in getSoError.

2009-09-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/sysdep/win32/events.c: Extract select-based polling from
	poll_thread, use it in _gst_sync_file_polling and
	_gst_async_file_polling, save error conditions returned
	by WSAEnumNetworkEvents.

2009-09-03  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gst-parse.c: Fix crash on invalid class variable definitions.

2009-08-26  Paolo Bonzini  <bonzini@gnu.org>

	Complete transition from events.c to sysdep/*/events.c, moving
	the common parts back outside sysdep/ and adding a stab at the
	Win32 version.  This lets us throw Makefile/lib-src hacks away.

	* libgst/gstpriv.h: Include signal.h, do not include poll.h.
	* libgst/events.h: Add _gst_register_socket.
	* libgst/sysdep.h: Add _gst_wait_for_input.  Remove TIMER_REAL,
	TIMER_PROCESS.
	* libgst/input.c: Use _gst_wait_for_input and _gst_sync_file_polling.
	* libgst/sockets.c: Use gstpriv.h.  Do _gst_register_socket.  Do
	not warn under mingw.
	* libgst/interp.c: Cope with nonexistent SIGUSR1.  Avoid useless
	abstraction in _gst_signal_after.
	* libgst/sysdep/common/files.c: Cope with nonexistent SIGPIPE.
	* libgst/sysdep/cygwin/timer.c: Adjust for changes in sysdep.h.
	* libgst/sysdep/posix/timer.c: Adjust for changes in sysdep.h.
	* libgst/sysdep/win32/timer.c: Adjust for changes in sysdep.h.
	* libgst/sysdep/win32/events.c: Rewrite.
	* libgst/sysdep/win32/signals.c: Remove signals not found under mingw.
	* libgst/sysdep/posix/events.c: Add _gst_register_socket and
	_gst_wait_for_input.  Adjust to move OS-independent parts...
	* libgst/events.c: ... here.

2009-08-25  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Just skip primitives that are unknown to the image.

2009-08-25  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/sockets.c: Move from packages/sockets/.
	* libgst/sockets.h: New.
	* libgst/files.c: Initialize sockets.

2009-08-24  Paolo Bonzini  <bonzini@gnu.org>
	    Nicolas Petton  <petton.nicolas@gmail.com>

	* libgst/dict.inl: Add num_valid_oops.
	* libgst/prims.def: Add becomeForward primitive.

2009-08-23  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/oop.inl: Fix ??? comment.

2009-08-23  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/oop.c: Export finished_incremental_gc.
	* libgst/oop.h: Declare _gst_finished_incremental_gc.  Use
	maybe_release_xlat.
	* libgst/oop.inl: Fix bottom-to-top incremental collector.

2009-08-23  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/oop.c: Rename highest_swept_oop to next_oop_to_sweep,
	shift it down by one.

2009-08-23  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/oop.c: Always do _gst_finish_incremental_gc so that
	finished_incremental_gc is called.

2009-08-21  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/events.h: Declare it.
	* libgst/sysdep/posix/events.c: Add _gst_wakeup.
	* libgst/sysdep/win32/events.c: Ditto.
	* libgst/gstpub.c: Add it to VMproxy and add gst_wakeup.
	* libgst/gstpub.h: Add wakeUp to VMproxy, add gst_wakeup.
	* libgst/interp.c: Call _gst_wakeup from _gst_async_call.

2009-08-22  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/sysdep.h: Tweak.
	* libgst/sysdep.c: Split into...
	* libgst/sysdep/common/files.c, libgst/sysdep/common/time.c,
	libgst/sysdep/cygwin/files.c, libgst/sysdep/cygwin/findexec.c,
	libgst/sysdep/cygwin/mem.c, libgst/sysdep/cygwin/signals.c,
	libgst/sysdep/cygwin/time.c, libgst/sysdep/cygwin/timer.c,
	libgst/sysdep/posix/files.c, libgst/sysdep/posix/findexec.c,
	libgst/sysdep/posix/mem.c, libgst/sysdep/posix/signals.c,
	libgst/sysdep/posix/time.c, libgst/sysdep/posix/timer.c,
	libgst/sysdep/win32/files.c, libgst/sysdep/win32/findexec.c,
	libgst/sysdep/win32/mem.c, libgst/sysdep/win32/signals.c,
	libgst/sysdep/win32/time.c, libgst/sysdep/win32/timer.c: ... all
	these.

	* libgst/events.c: Copy to...
	* libgst/sysdep/posix/events.c: ... this...
	* libgst/sysdep/win32/events.c: ... and this.
	* libgst/sysdep/cygwin/events.c: New.

2009-08-21  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/events.c: Add _gst_pause.
	* libgst/events.h: Declare it.
	* libgst/interp.c: Add active_process_yield.
	* libgst/prims.def: Use it.  Remove sleeping from VMpr_Processor_yield.
	Add VMpr_Processor_pause.  Return whether incremental GC has finished
	in the VMpr_ObjectMemory_incrementalGCStep primitive.
	* libgst/sysdep.c: Add _gst_usleep.
	* libgst/sysdep.h: Declare it.

2009-08-21  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/oop.c: Track correctly the bottom-to-top sweeping of OOPs.
	Return from _gst_incremental_gc_step whether incr. GC has finished.
	* libgst/oop.h: Adjust prototype.
	* libgst/oop.inl: Track here the bottom-to-top sweeping of OOPs.

2009-08-18  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/cint.c: Add dlopen functions for modules.
	* libgst/cint.h: Declare them.
	* libgst/gstpub.c: Implement public variants and add to VMProxy.
	* libgst/gstpub.h: Declare public variants.

2009-08-01  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp.c: Do not create gcSemaphore.
	* libgst/oop.c: Abort upon absence of gcSemaphore.

2009-08-01  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Remove Delay, SharedQueue, MappedCollection, Bag.
	* libgst/dict.h: Likewise.
	* libgst/files.c: Move them after initialization.

2009-07-28  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Add git revision number to Version contents.

2009-07-26  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/genbc-parse.y: Fix uninitialized memory use that
	"interestingly" triggered only under Wine.

2009-07-25  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/sysdep.h: Return 64-bit millisecond clock.
	* libgst/sysdep.c: Return 64-bit millisecond clock, use monotonic
	clock_gettime if available.
	* libgst/prims.def: Return 64-bit millisecond clock.

2009-07-23  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gstpriv.h: Add optimization barrier.
	* libgst/vm.def: Use it.

	* libgst/prims.def: Eliminate uninitialized variable.

2009-07-22  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/sysdep.c: Small cleanup.

2009-07-20  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/genpr-parse.y: Fix for newer bison.

2009-07-11  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lex.c: Use new real.c interface.
	* libgst/real.c: New.
	* libgst/real.h: New.

2009-07-02  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/input.c: Include all symbols after popular demand for
	completion.

2009-06-19  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lex.c: Fix my own snafu.

2009-06-18  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Check for infinite recursion of #doesNotUnderstand:
	before printing the result of an evaluation.

2009-06-15  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.inl: Pad long doubles to 16 bytes.

2009-06-15  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lex.c: Fix parsing of 16r2.ABCDEFd.

2009-06-15  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.def: Fix typo.

2009-06-08  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/mpz.c: Return whether large integer->float conversion was
	exact.
	* libgst/mpz.h: Adjust prototypes.
	* libgst/prims.def: Fail on inexact conversions.

2009-03-30  Derek Zhou  <agonyzhou@comcast.net>
	    Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Do not reset counters if profiling is on.

	* libgst/interp-bc.inl: Make state consistent when
	profiling callbacks might be called.
	* libgst/interp.c: Likewise.
 
	* libgst/dict.c: Add profiling callback.
	* libgst/dict.h: Add profiling callback.
	* libgst/interp-bc.inl: Call it.
	* libgst/interp.c: Declare variables.
	* libgst/interp.h: Declare variables.
	* libgst/prims.def: Add profiling primitive.

2009-03-05  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/files.c: Load RecursionLock.st before Transcript.st.

2009-02-19  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Fix off-by-one in _gst_identity_dictionary_at_put.

2009-01-23  Derek Zhou  <agonyzhou@comcast.net>
    
    	* libgst/oop.c: Allow shrinking the heap down to the eden's size.

2009-01-21  Derek Zhou  <agonyzhou@comcast.net>

	* libgst/oop.c: Only compact if there were lots of garbage,
	shrinking the heap limit at the same time.

2009-01-19  Paolo Bonzini  <bonzini@gnu.org>
	    Derek Zhou  <agonyzhou@comcast.net>

	* libgst/oop.c: Always call _gst_finish_incremental_gc before
	a non-growing compaction of the heap.

2009-01-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/cint.c: Add chown.

2008-12-30  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/cint.c: Discard EPIPE too, it is caught by POLLHUP.

2008-12-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/oop.c: Resize the oldspace if tenuring needs more space than
	we would have liked to have, but then do a GC if this happens.

2008-11-18  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/alloc.c: Use fixed values for MMAP_AREA_SIZE and
	MMAP_THRESHOLD.

2008-10-23  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Do not modify already-complete blocks.
	* libgst/interp-bc.inl: Sync _gst_send_method and _gst_send_message_internal.

2008-10-21  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/xlat.c: Fix ISO C99-ism.

2008-10-20  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp-jit.inl: Fix compilation error.

2008-10-18  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.h: Remove ATTRIBUTE_PURE from functions that are CSEable,
	but write to memory (typically by memoizing values or allocating OOPs).
	* libgst/input.h: Likewise.
	* libgst/interp.c: Likewise.
	* libgst/opt.h: Likewise.
	* libgst/sym.h: Likewise.

	* libgst/opt.c: Change compute_jump_length to be const.

2008-09-22  Paolo Bonzini  <bonzini@gnu.org>

	* cint.c: Fix ia64 cobjects.st failure by always using a ffi_arg-sized
	field.

2008-09-22  Paolo Bonzini  <bonzini@gnu.org>

	* genpr-parse.c: Rename strupr.
	* genpr-parse.h: Rename strupr.
	* genpr-parse.y: Rename strupr.

2008-09-22  Paolo Bonzini  <bonzini@gnu.org>

	* input.c: Revert 2008-09-18 change.  Check whether get_cur_file()
	returns nil instead.

2008-09-21  Paolo Bonzini  <bonzini@gnu.org>

	* alloc.h: Change nomemory hook prototype.
	* alloc.c: Use return value of nomemory hook.
	* oop.c: Pass new oldspace heap back from nomemory hook.

2008-09-20  Paolo Bonzini  <bonzini@gnu.org>

	* cint.c: Adjust calls to _gst_show_backtrace.
	* gstpub.c: Add gst_show_backtrace and declare it in VMProxy.
	* gstpub.h: Likewise.
	* interp.c: Adjust calls to _gst_show_backtrace, add FILE *
	argument there.
	* interp.h: Adjust prototype of _gst_show_backtrace.
	* prims.def: Adjust calls to _gst_show_backtrace.

2008-09-18  Paolo Bonzini  <bonzini@gnu.org>

	* input.c: Do not create FileSegments for non-FileStream streams.

2008-09-14  Paolo Bonzini  <bonzini@gnu.org>

	* cint.c: Fix possible GC bugs.

2008-09-02  Paolo Bonzini  <bonzini@gnu.org>

	* prims.def: Do not use closesocket, close is now emulated
	on Windows.

2008-08-18  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Mark the termination method as annotated.

2008-08-17  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.def: Add socket<->fd conversions.
	* libgst/sysdep.c: Likewise.

2008-08-17  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/sysdep.c: Emulate FD_CLOEXEC on MinGW.

2008-08-11  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/cint.c: Do not pass POLLHUP errors to Smalltalk.

2008-08-08  Samuel Tardieu  <sam@rfc1149.net>

	* libgst/sysdep.c (do_interrupts): Remove unused prototype.
	(DISABLED_MASK): Add SIGQUIT.

2008-08-08  Samuel Tardieu  <sam@rfc1149.net>

	* libgst/sysdep.c (_gst_open_pipe): Remove unused variable.

2008-08-08  Samuel Tardieu  <sam@rfc1149.net>

	* libgst/sysdep.c (find_executable): Correctly zero-terminate
	"location" before returning it.

2008-08-07  Paolo Bonzini  <bonzini@gnu.org>

	* gstpriv.h: Define __sync_synchronize.
	* interp.h: Do not export _gst_except_flag if not JIT.
	* interp.c: Use a separate queue for async calls scheduled
	from a signal handler.  Protect other async call queue accesses
	with a lock.  Add memory barriers.
	* interp-bc.inl: Protect async call queue accesses with a lock.
	Add memory barriers.
	* interp-jit.inl: Protect async call queue accesses with a lock.
	Add memory barriers.  Reset _gst_except_flag earlier.
	Use the return value of _gst_run_native_code to check if the
	termination method was invoked.
	* sysdep.h: Define _gst_signal_count.
	* sysdep.c: Use it instead of a static variable.

2008-08-06  Paolo Bonzini  <bonzini@gnu.org>

	* events.c: Reset errno if _gst_sync_file_polling finds
	POLLHUP, POLLERR or POLLNVAL.
	* events.h: Document this.

2008-08-06  Paolo Bonzini  <bonzini@gnu.org>

	* events.c: Use _gst_{dis,en}able_interrupts (true);
	make a worker function for _gst_remove_fd_polling_handlers and
	file_polling_handler.  Call it asynchronously from
	file_polling_handler.  Do not disable interrupts from
	_gst_async_file_polling.
	* gstpub.c: Export _gst_async_call and _gst_sync_signal.
	* gstpub.h: Likewise.
	* interp-bc.inl: Perform asynchronous calls.
	* interp-jit.inl: Perform asynchronous calls.
	* interp.c: Adjust async_queue_entry for asynchronous calls.
	Export sync_signal.  Adjust calls to _gst_{dis,en}able_interrupts.
	* interp.h: Declare _gst_async_call and _gst_sync_signal.
	* sysdep.c: Rewrite _gst_{dis,en}able_interrupts to rely on
	sigaction setting the mask on POSIX systems.  Set up the
	mask in _gst_set_signal_handler.
	* sysdep.h: Adjust prototypes, adjust documentation of
	_gst_set_signal_handler.

2008-08-06  Paolo Bonzini  <bonzini@gnu.org>

	* interp-bc.inl: Change disable_preemption to async_queue_enabled.
	* interp-jit.inl: Likewise.
	* interp.c: Make queued_async_signals a dynamic array.	Make
	sync_signal able to behave like Semaphore>>#notify.  Do not
	disable/enable interrupts on behalf of the Smalltalk program;
	async_queue_enabled already fakes that.  Do not disable/enable
	interrupts in the synchronized wait/signal functions.
	* prims.def: Do not disable/enable interrupts around the
	synchronized wait/signal functions.

2008-08-06  Paolo Bonzini  <bonzini@gnu.org>

	* input.c: Do not use #nextHunk.

2008-08-05  Paolo Bonzini  <bonzini@gnu.org>

	* dict.c: Adjust layout of FileDescriptor and FileStream.  Do not
	fill in FileStream variables in FileDescriptors.
	* dict.h: Likewise.
	* prims.def: Adjust uses of gst_file_stream.

2008-08-05  Paolo Bonzini  <bonzini@gnu.org>

	* dict.c: Remove _gst_byte_stream_class.  Change superclass of
	FileDescriptor.
	* dict.h: Likewise.
	* files.c: Do not load ByteStream.st.

2008-08-05  Paolo Bonzini  <bonzini@gnu.org>

	* dict.c: Add _gst_iterable_class.  Change superclass of
	Collection and Stream.
	* dict.h: Likewise.
	* files.c: Load Iterable.st.

2008-08-04  Paolo Bonzini  <bonzini@gnu.org>

	* interp.c: Move ignored signals...
	* sysdep.c: ... here.  Reset them for exec-ed executables.

2008-08-01  Paolo Bonzini  <bonzini@gnu.org>

	* sysdep.c: Use O_CLOEXEC if available instead of FD_CLOEXEC.

2008-08-01  Paolo Bonzini  <bonzini@gnu.org>

	* sysdep.c: Always set SIGCHLD handler, and invoke the file
	interrupt handler from it.  This makes sure that all children
	are reaped.

2008-08-01  Paolo Bonzini  <bonzini@gnu.org>

	* sysdep.c: Fix off-by-one errors involving readlink(2).

2008-07-28  Paolo Bonzini  <bonzini@gnu.org>

	* gst-parse.c: Parse negative numbers as unary minus + number.
	* lex.c: Add _gst_negate_yylval and simplify _gst_scan_number.
	* lex.h: Declare _gst_negate_yylval.

2008-07-24  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/byte.c: Modify _gst_line_number to store the line offset
	and emit the first line number as absolute.
	* libgst/byte.h: Add LN_RESET and LN_FORCE.
	* libgst/comp.c: Use new _gst_line_number functionality instead
	of line_offset.
	* libgst/opt.c: Rewrite is_simple_return to account for line numbers
	that are >= 256.

2008-07-18  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gstpriv.h: Change HAVE_INET_SOCKETS to HAVE_SOCKETS.
	* libgst/prims.def: Change HAVE_INET_SOCKETS to HAVE_SOCKETS.
	* libgst/sysdep.c: Change HAVE_INET_SOCKETS to HAVE_SOCKETS.

2008-07-14  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/opt.c: Enable jump superoperators.

2008-07-14  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp-bc.inl: Replace FETCH with FETCH_VEC.
	* libgst/vm.def: Use ADVANCE instead of PREFETCH also for jump
	superoperators.  Move "ip += 2" to ADVANCE.  Remove argument
	to FETCH (it was always dispatch_vec), add PREPARE_STACK to
	jump bytecodes.

2008-07-14  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/opt.c: Rewrite _gst_optimize_bytecodes to build a CFG
	and reassemble the method at the end of the optimization.

2008-07-10  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Fix order of instance variables for metaclass.

2008-06-04  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp-bc.inl: Create a jmp_buf for _gst_interpret.
	* libgst/interp-jit.inl: Likewise.
	* libgst/interp.c: Rewrite handling of interp_jmp_buf and signals.  Use
	the jmp_buf from _gst_interpret when SIGINT is sent but the current
	process is terminated.
	* libgst/prims.def: Use push_jmp_buf and pop_jmp_buf.  Propagate
	interruptions until the interpreter is reached.

2008-06-02  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/cint.c: Return the receiver, not nil, if the returned type
	is #void.

2008-05-30  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/callin.c: Fix %w in _gst_msg_sendf.

2008-05-27  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.def: Add VMpr_ArrayedCollection_equal.

2008-05-22  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/oop.c: Don't pin weak objects to a fixed location.
	* libgst/oop.h: Remove now unused fields.

2008-05-22  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/cint.h: Declare _gst_invalidate_croutine_cache.
	* libgst/cint.c: Define it.  Replace cache validity boolean with
	a cache generation number.
	* libgst/oop.c: Call it after GC.

2008-05-22  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.def: Make VMpr_ByteArray_replaceFromToWithStartingAt
	more generic.

2008-05-21  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/cint.c: Extract part of push_smalltalk_obj into c_to_smalltalk.
	Add closure support.
	* libgst/cint.h: Declare functions for closures.
	* libgst/dict.c: Add CCallbackDescriptor.
	* libgst/dict.h: Add CCallbackDescriptor.
	* libgst/files.c: Load CCallback.st.
	* libgst/prims.def: Declare closure primitives.

2008-05-21  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/callin.c: Support '%B' for the receiver in msgSendf.
	* libgst/interp.c: Callins evaluate blocks if the selector is NULL.

2008-05-21  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/cint.c: Replace CFunctionDescriptor references with CCallable.
	Allow OOPs in the argument vector and parse them as #cObject.
	* libgst/cint.h: Likewise.
	* libgst/dict.c: Add _gst_c_callable_class and definition of CCallable.
	* libgst/dict.h: Add _gst_c_callable_class.
	* libgst/files.c: Load CCallable.st.
	* libgst/save.c: Replace CFunctionDescriptor references with CCallable.

2008-05-20  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/cint.c: Remove symbol_type_map, type_map, classify_type_symbol,
	_gst_make_descriptor.  Make lookup_function global.
	* libgst/cint.h: Declare _gst_lookup_function instead of
	_gst_make_descriptor.
	* libgst/prims.def: Replace VMpr_CFuncDescriptor_create with
	VMpr_CFuncDescriptor_addressOf.

2008-05-20  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/cint.c: Make CFunctionDescriptor a subclass of CObject,
	moving in turn the indexed instance variables into an array.
	* libgst/dict.c: Adjust definition.  Change uninitialized creation
	in _gst_cobject_new_base to initialized.
	* libgst/save.c: Adjust saving.

2008-05-20  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/cint.c: Complete 2008-04-01 change by splitting part of
	c_func_info in a cache accessed with a pointer_map.  This way, the
	CFunctionDescriptor can store the function pointer instead of the
	pointer to the c_func_info.

2008-05-18  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/sym.c: Improve comment on TwistedPools wrt namespace
	imports.

2008-05-18  Stephen Compall  <scompall@nocandysw.com>

	* libgst/gst-parse.c: Refactor pragma evaluation into new
	function, and use it to support namespace pragmas.

2008-05-17  Stephen Compall  <scompall@nocandysw.com>

	* libgst/dict.h: Add `sharedPools' instvar to gst_namespace.
	* libgst/dict.c: Likewise.
	* libgst/sym.c: Import shared pools from namespaces as they are
	visited, and expand the comment on TwistedPools to document this.

2008-05-17  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/callin.c: Fix _gst_oop_indexed_base.

2008-05-16  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/callin.c: Allow ints in OOP->float conversions.

2008-05-15  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/cint.c: Allow passing any object with non-pointer indexed
	instance variables as a #cObject.

2008-05-14  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/oop.c: Add ephemerons to buffer before marking their class
	(else, if the class actually has to be marked, we won't add them to the
	buffer at all).

2008-05-13  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/callin.h: Add _gst_oop_indexed_base and _gst_oop_indexed_kind.
	* libgst/callin.c: Implement them.
	* libgst/gstpub.h: Add them to the VMProxy and to the public API.
	* libgst/gstpub.c: Implement the public API wrappers.

2008-05-13  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gstpriv.h: Move ISP_* constants...
	* libgst/dict.h: ... here...
	* libgst/gst.h: ... and here.  Prefix these with GST_.
	* libgst/dict.c: Adjust uses.
	* libgst/dict.inl: Adjust uses.
	* libgst/prims.def: Adjust uses.
	* libgst/xlat.c: Adjust uses.

2008-05-12  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp.c: Adjust send_block_value prototype.
	* libgst/interp-bc.inl: Support block argument culling.
	* libgst/interp-jit.inl: Support block argument culling.
	* libgst/prims.def: Add primitives for block argument culling.
	* libgst/vm.def: Adjust calls to send_block_value.

2008-05-06  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/callin.c: Adjust calls to COBJECT_NEW, COBJECT_VALUE,
	SET_COBJECT_VALUE.
	* libgst/cint.c: Likewise.  Add _gst_c_type_size.
	* libgst/cint.h: Declare _gst_c_type_size.
	* libgst/dict.c: Likewise.  Rename _gst_c_object_new to
	_gst_c_object_new_base, add new instance variable to CObject.
	Make CObject absolute in _gst_free_cobject.
	* libgst/dict.h: Adjust struct gst_cobject and rename
	prototype of _gst_c_object_new to _gst_c_object_new_base.
	* libgst/dict.inl: Add cobject_value, set_cobject_value,
	cobject_index_check.  Adjust COBJECT_NEW.  Rename COBJECT_VALUE_OBJ
	and SET_COBJECT_VALUE_OBJ to COBJECT_OFFSET_OBJ and
	SET_COBJECT_OFFSET_OBJ, respectively.
	* libgst/prims.def: Adjust calls to COBJECT_NEW, COBJECT_VALUE,
	SET_COBJECT_VALUE.  Add calls to cobject_index_check.  Handle
	derefAt:type: from a garbage-collected CObject specially, and
	otherwise preserve the base when casting a CObject.

2008-05-06  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.def: Eliminate VMpr_CObject_derefAtPut,
	restrict VMpr_CObject_derefAt to CObject types.

2008-04-25  Paolo Bonzini  <bonzini@gnu.org>
            Stephen Compall  <scompall@nocandysw.com>

	* libgst/sym.c: Document (prose by Stephen Compall) and
	implement TwistedPools, using a linearized list of pool dictionaries
	for the lookup.

2008-04-10  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Put fundamental instance variables of Behavior
	at the beginning.
	* libgst/dict.h: Likewise.

2008-04-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Rename name variable of FileDescriptor to file.
	Support non-existent relocated paths by setting the variable to nil.
	* libgst/files.c: Load FilePath.st.
	* libgst/input.c: Support separate filename (for printing errors) and
	File object (for FileSegments).
	* libgst/input.h: Adjust prototypes.
	* libgst/prims.def: Add fourth optional argument to filein primitive.
 
2008-04-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Likewise.

2008-04-01  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/cint.c: Don't use numFixedArgs instance variable of
	a CFunctionDescriptor.  Add classOOP parameters to _gst_make_descriptor.
	Return NULL if there is a problem instead of printing an error.
	* libgst/cint.h: Rename numFixedArgs field of gst_cfunc_descriptor
	to tagOOP.  Adjust prototype of _gst_make_descriptor.
	* libgst/dict.c Rename numFixedArgs variable to tag here too.
	* libgst/prims.def: Create subclasses of CFunctionDescriptor
	if VMpr_CFuncDescriptor_create is sent to a subclass.  Fail
	if _gst_make_descriptor returns NULL.

2008-04-01  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Rename unwindPoints variable of Process to environment.
	* libgst/files.c: Load ProcEnv.st.

2008-04-01  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp.c: Correct output for execution environment contexts
	that have a parent.

2008-03-26  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/cint.c: Add stat/lstat versions that return an object.
	* libgst/dict.inl: Move from/to off_t conversion here...
	* libgst/prims.def: ... from here.

2008-03-25  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.def: Make #fileIn primitive fail if the filename is bad.

2008-03-25  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/callin.c: Never register the "nil" object, it is useless.

2008-03-19  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.def: Mark VMpr_Process_suspend as a possible
	source of interrupts.

2008-03-19  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/files.c: Load BlockClosure before the first closures
	are executed (by the JIT).

2008-03-15  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Add SystemKernelPath.
	* libgst/files.c: Call `FileSegment relocate' before loading
	pre-image files.

2008-03-15  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/cint.c: Relocate MODULE_PATH.
	* libgst/dict.c: Relocate paths placed in the Smalltalk dictionary.
	* libgst/files.c: Relocate image and kernel paths.  Apply default
	executable path.
	* libgst/files.h: Remove _gst_executable_path.
	* libgst/gstpub.c: Add gst_relocate_path, gst_set_executable_path.
	* libgst/gstpub.h: Add gst_relocate_path, gst_set_executable_path.
	* libgst/sysdep.c: Add _gst_relocate_path, _gst_set_executable_path.
	* libgst/sysdep.h: Add _gst_relocate_path, _gst_set_executable_path.

2008-03-04  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.def: Avoid mixed declarations and code.

2008-02-26  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/events.c: Add _gst_remove_fd_polling_handlers.
	* libgst/events.h: Declare it.
	* libgst/prims.def: Use it.

2008-02-19  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/cint.c: Don't specify the path to ffi.h.

2008-02-13  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/re.c: Don't convert read-only strings to Regexes,
	convert mutable strings instead.

2008-02-12  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lex.c: Improve the precision of reading 0.1.

2008-02-11  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/oop.c: Move inclusion of sigsegv.h...
	* libgst/gstpriv.h: ... here.

2008-02-11  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/vm.def: Microoptimization of + and - (avoid shifts).
	* libgst/gstpriv.h: Microoptimization of integer overflow detection.

2008-01-25  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/mpz.c: Fix #divExact: for huge numerator and small
	denominator.

2008-01-17  Tony Garnock-Jones  <tonygarnockjones@gmail.com>

	* libgst/prims.def: Differentiate the return value for the
	two processes.

2008-01-15  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.def: Do not pop arguments that end up in an
	object that the primitive creates.

2008-01-14  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.def: Fix #signal:atMilliseconds: for negative
	argument.

2008-01-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/save.c: Disable copy-on-write if libsigsegv is not
	available.

2008-01-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/oop.c: Move definition of NO_SIGSEGV_HANDLING...
	* libgst/oop.h: ... here.

2008-01-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/mpz.c: Don't fail for 0 divExact: x.

2008-01-06  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.def: Use gst_invoke_hook.

2008-01-05  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Remove _gst_had_error.
	* libgst/comp.h: Remove _gst_had_error.
	* libgst/lex.c: Add _gst_had_error and _gst_error_recovery, use the
	latter in scan_newline.
	* libgst/lex.h: Add _gst_had_error and _gst_error_recovery.
	* libgst/gst-parse.c: Nest error recovery jmp_bufs when
	_gst_push_temporaries_dictionary is used.  Don't call _gst_free_tree
	when an error is recovered.  Set _gst_error_recovery in recover_error
	and look for ERROR_RECOVERY tokens too.  Don't define TOKEN_SEP.
	* libgst/gst-parse.h: Remove need for TOKEN_SEP definition.  Add
	ERROR_RECOVERY token.

2008-01-03  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lex.c: Do not imply '.' after assignment operator.

2007-12-18  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.def: Fix right #bitShift: with high RHS and LHS<0.
	* libgst/vm.def: Fix right #bitShift: with high RHS and LHS<0.

2007-12-17  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/oop.c (check_weak_refs): Undo part, only fix the thinko.
	(sweep_oop): Undo previous change.

2007-12-17  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/oop.c (check_weak_refs): Make dead weak objects non-weak,
	fix thinko.
	(sweep_oop): Don't make dead weak objects non-weak.

2007-12-17  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/genpr-parse.y: Declare _gst_primitives_md5 as unsigned char.
	* libgst/interp.h: Ditto.

2007-12-10  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gstpub.h: Declare functions only accessible via the VMProxy.
	* libgst/gstpub.c: Define them.

2007-12-10  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/alloc.c: Never override malloc.
	* libgst/heap.c: Never defer to sbrk.

2007-12-10  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp.c: Don't yield in resume_process.

2007-12-10  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/md-config.h: Disable third register variable for i386.

2007-12-09  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/xlat.c: Fix code generation for DeferredVariableBinding store.

2007-12-09  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/xlat.c: Fix IR generation for DeferredVariableBinding store.

2007-12-06  Paolo Bonzini  <bonzini@gnu.org>

        * libgst/interp.c: Extract part of suspend_process into
        remove_process_from_list.  Use it in resume_process if the process
        is active.  Yield the active process.
        * libgst/prims.def: Add VMpr_Process_suspend.

2007-11-29  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.inl: Loosen tests of usage of instantiate and
	instantiate_with.

2007-11-22  Paolo Bonzini  <bonzini@gnu.org>

	* gst-tool.c: Test both EXEEXT and ARGV_EXEEXT.
	* libgst/cint.c: Fix my_mkdir for Cygwin.
	Reported by Freddie Akeroyd.

2007-11-19  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/sysdep.c: Provide a default MAXSYMLINKS, for Cygwin.
	Reported by Freddie Akeroyd.

2007-11-18  Paolo Bonzini  <bonzini@gnu.org>
            Freddie Akeroyd  <F.A.Akeroyd@rl.ac.uk>

	* gst-tool.c: Use EXEEXT.  Look for backslashes as directory
	separators.
	* libgst/cint.c: Add my_mkdir and my_mkdtemp.
	* libgst/sysdep.c: Fix syntax error under Win32.

2007-11-18  Paolo Bonzini  <bonzini@gnu.org>

	* main.c: Don't use asprintf.

2007-11-13  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.def: Use pow/powl.

2007-11-11  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/files.c: Use _gst_file_is_newer.
	* libgst/sysdep.c: Remove _gst__gst_get_file_modify_time, add
	_gst_file_is_newer.
	* libgst/sysdep.h: Likewise.

2007-11-09  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/input.c: Return false if file cannot be opened by
	gst_process_file, and set errno appropriately.
	* libgst/files.c: Use errno on return from gst_process_file.
	* main.c: Use errno on return from gst_process_file.
	* gst-tool.c: Use errno on return from gst_process_file.

2007-10-25  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/re.c: Call init_re from exported functions.

2007-10-21  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Add brackets to source code of #methodsFor:.  
	Set isOldSyntax bit of the CompiledMethod header.
	* libgst/comp.h: Add isOldSyntax bit.
	* libgst/gst-parse.c: Parse isolated methods with new syntax.
	* libgst/tree.c: Add isOldSyntax argument to _gst_make_method.
	* libgst/tree.h: Likewise, and add it to AST.

2007-10-12  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gst-parse.c: Don't replace instance variables except
	in the first declaration inside a subclass declaration.

2007-10-12  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.inl: Use another scramble function suggested by
	Andres Valloud.

2007-10-09  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/save.c: Break hard links when saving.

2007-10-09  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.inl: Do rotations correctly in scramble.

2007-10-08  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Add necessary class variables for rewrite.

2007-10-01  Stephen Compall  <scompall@nocandysw.com>

	* libgst/re.c: Add init_re, registering ASCII case table.

2007-09-27  Freddie Akeroyd  <F.A.Akeroyd@rl.ac.uk>
	    Paolo Bonzini  <bonzini@gnu.org>

	* libgst/cint.c: Wrap symlink to avoid errors in case the prototype
	is absent.
	* libgst/prims.def: Disable ENOTSOCK checking if constant not defined.

2007-09-27  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gst-parse.c: Strengthen error checking for wrong
	"Class >> method [ ... ]" stanzas.

2007-09-25  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/re.c: Cache any read-only string literal.

2007-09-24  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gst-parse.c: Fix NULL dereference on Smalltalk subclass:
	Foo [ ].

2007-09-24  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/md-config.h: Disable register allocation tricks if not
	optimizing, as well as third register on Apple compilers.

2007-09-19  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/re.c: Yet another GC problem.

2007-09-17  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Fix GC problem with attributes.

2007-09-15  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/oop.h: Move NO_SIGSEGV_HANDLING...
	* libgst/oop.c: ... here.
	* libgst/save.c: Make writable mmap if defined.

2007-09-13  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp.inl: Fix 64-bit cleanliness error.

2007-09-12  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/save.c: Open image file with r+ and truncate it afterwards.
	* libgst/sysdep.c: Use O_CREAT for r+.

2007-09-03  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/input.c: Adjust by fileOffset when generating source string
	with _gst_counted_string_new.

2007-08-24  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Create deferred variable bindings with a path.
	Adjust calls to _gst_find_variable_binding.
	* libgst/dict.c: Add path variable to DeferredVariableBinding.
	* libgst/dict.h: Add path variable to struct
	gst_deferred_variable_binding.
	* libgst/sym.h: Remove last parameter from
	_gst_find_variable_binding.
	* libgst/sym.c: Assume last parameter of _gst_find_variable_binding
	to be true.  Adjust call to _gst_make_deferred_binding_constant.
	* libgst/tree.h: Adjust last parameter of
	_gst_make_deferred_binding_constant.
	* libgst/tree.c: Turn last parameter of _gst_find_variable_binding
	into a tree.  Support new constant types in _gst_print_tree.

2007-08-20  Paolo Bonzini  <bonzini@gnu.org>

        * libgst/superop1.inl: Regenerate.
        * libgst/superop2.inl: Regenerate.
        * libgst/byte.def: Regenerate.
	* libgst/vm.def: Reenable superoperators.
	* libgst/opt.c: Reenable superoperators.

2007-08-20  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Make make_constant_oop global, adjust for new
	return value of _gst_find_variable_binding, create
	DeferredVariableBinding objects.  Compile store-into-
	variable to store+pop+push.  Adjust equal_constant to
	support CONST_DEFERRED_BINDING and adjusting for the new return value
	of _gst_find_variable_binding.
	* libgst/comp.h: Declare _gst_find_variable_binding.
	* libgst/dict.c: Add DeferredVariableBinding.
	* libgst/dict.h: Add DeferredVariableBinding and
	struct gst_deferred_variable_binding.
	* libgst/files.c: Add DeferBinding.st, load LookupKey hierarchy early.
	* libgst/opt.c: Temporarily disable superoperators.  Pass LookupKeys
	in the verifier.
	* libgst/sym.c: Return a tree_node from _gst_find_variable_binding,
	adjust _gst_find_variable, add _gst_get_undeclared_dictionary.
	* libgst/sym.h: Adjust declarations.
	* libgst/tree.c: Add _gst_make_deferred_binding_constant.
	* libgst/tree.h: Add _gst_make_deferred_binding_constant.

2007-08-19  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/vm.def: Support non-Associations storing global variables.
	* libgst/xlat.c: Support non-Associations storing global variables.
	* libgst/print.c: Support LookupKeys storing global variables.
	* libgst/dict.c: Reload _gst_lookup_key_class on startup.

2007-08-13  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Dereference the VariableBinding stored in a CType.

2007-08-13  Paolo Bonzini  <bonzinI@gnu.org>

	* libgst/cint.c: Remove enum cdata_type, moved to cint.h.  Reorder
	c_type_name and type_map accordingly.  Add CDATA_UCHAR, CDATA_SHORT,
	and CDATA_USHORT.  Convert from/to them appropriately in
	push_smalltalk_obj, get_ffi_type.
	* libgst/cint.h: Add enum cdata_type.
	* libgst/prims.def: Use enum cdata_type values.
	* libgst/sym.c: Add symbols for #short, #uShort, #uChar.
	* libgst/sym.h: Add symbols for #short, #uShort, #uChar.

2007-08-13  Paolo Bonzini  <bonzinI@gnu.org>

	* libgst/interp.c: Fix GC bug in _gst_prepare_execution_environment.

2007-08-13  Paolo Bonzini  <bonzinI@gnu.org>

	* libgst/callin.c: Use _gst_c_object_new instead of
	_gst_c_object_new_typed.
	* libgst/cint.c: Likewise.
	* libgst/dict.inl: Likewise.
	* libgst/dict.c: Remove _gst_c_object_type_ctype and _gst_c_type_new.
	Add a new parameter to _gst_c_object_new_typed and call it
	_gst_c_object_new; dereference the binding of the TYPEOOP.
	Remove _gst_alloc_cobject.
	* libgst/prims.def: Remove VMpr_CObject_alloc.  Check receiver
	type for VMpr_CObject_allocType.  Use _gst_c_object_new instead of
	_gst_c_object_new_typed.

2007-08-12  Paolo Bonzini  <bonzinI@gnu.org>

        * libgst/comp.c: Make literals read-only in make_oop_constant.
        * libgst/dict.inl: Make Float* and Character literals read-only.

2007-07-20  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/files.c: Load VFSZip.st.

2007-07-20  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/input.h: Fix prototype declaration when readline is not
	available.

2007-07-19  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/input.h: Turn second parameter of _gst_set_stream_info to OOP.
	* libgst/input.c: Likewise.
	* libgst/prims.def: Remove fileIn primitive.  Remove check on
	file validity from fileInLine primitive.  Adjust call to
	_gst_set_stream_info.

2007-07-17  Stephen Compall  <scompall@nocandysw.com>

	* libgst/prims.def: Rename compileString primitives to
	primCompile.
	* libgst/xlat.c: Mention #primCompile:.

2007-07-12  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/oop.c: When compacting, do not discard grey pages from
	the loaded space.  Add _gst_print_grey_list.
	* libgst/oop.h: Add fields to delimit loaded space to
	struct memory_space.
	* libgst/save.c: Fill them in.

2007-07-12  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Fix pasto in _gst_grow_dictionary.

2007-07-11  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp-bc.inl: Reset _gst_except_flag to false at beginning
	of monitor_byte_codes.

2007-07-10  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp.c: Add break.

2007-07-10  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lib.c: Rename...
	* libgst/files.c: ... to this.

	* libgst/files.c: Change "gst_" functions to "_gst_".
	* libgst/callin.c: Move gst_interpreter_proxy and _gst_init_vmproxy...
	* libgst/gstpub.c: ... here (new file).  Add "gst_*" functions.
	* libgst/callin.h: Rename *cobject functions to *c_object.

	* libgst/interp.c: Change bool_addr_index to _gst_{get,set}_var.
	* libgst/prims.def: Switch to new interface.
	
	* libgst/files.c: Rename find_kernel_file to _gst_find_file, drop
	second parameter.
	* libgst/input.c: Add _gst_process_stdin, _gst_process_file.
	* libgst/gstpub.c: Add public and VMProxy counterparts.

	* libgst/comp.c: Turn _gst_invoke_hook parameter into an enum.
	* libgst/files.c: Turn _gst_invoke_hook parameter into an enum.
	* libgst/save.c: Turn _gst_invoke_hook parameter into an enum.
	* libgst/gstpub.c: Add public and VMProxy counterparts.
	
	* libgst/input.c: Add _gst_no_tty and turn "prompt" field into char *.
	* libgst/files.c: Remove --emacs-process and -S handling.
	
	* libgst/files.c: Create _gst_initialize out of init_paths and
	_gst_init_smalltalk, remove SMALLTALK_KERNEL and SMALLTALK_IMAGE
	handling out of init_paths, remove option handling, always derive
	image path from image file.
	* libgst/callin.c: Change _gst_init_smalltalk calls to _gst_initialize.
	
	* libgst/gst.h: Add enums for above changes.
	
2007-07-05  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.def: Fix "==" vs. "=" typo.
	* libgst/sysdep.c: Fix previous change for Linux.

2007-07-05  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lib.c: Add _gst_executable_path.
	* libgst/lib.h: Set it in gst_smalltalk_args.
	* libgst/dict.c: Set CSymbols.ExecutableFileName.
	* libgst/sysdep.c: Add _gst_find_executable.
	* libgst/sysdep.h: Declare _gst_find_executable.

2007-07-04  Paolo Bonzini  <bonzini@gnu.org>

        * libgst/cint.c: Add binding for mkdtemp and chmod.

2007-07-03  Freddie Akeroyd  <F.A.Akeroyd@rl.ac.uk>
	    Paolo Bonzini  <bonzini@gnu.org>

	* libgst/alloc.c: Remove #undef small.
	* libgst/alloc.h: Move it here.
	* libgst/prims.def: Flush stdio files before quitting.
	* libgst/sysdep.c: Implement _gst_recv with recvfrom.

2007-07-03  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Export LibexecPath.

2007-07-01  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.def: Remove bogus check on file in of FileDescriptor
	objects.

2007-06-28  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lib.c: Ensure null termination of _gst_image_file_path.

2007-06-25  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lex.c: Don't lose on integer literals followed by identifiers.

2007-06-24  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lib.c: Put full path names into kernel/image paths and into
	the image file name.
	* libgst/lib.h: Adjust constness.

2007-06-19  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/sysdep.c: Use GetFullPathName under Windows.

2007-06-18  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/sysdep.c: Use utime if utimes missing.
	* tests/fileext.st: Run tests using Unix file separator.

2007-06-15  Freddie Akeroyd  <F.A.Akeroyd@rl.ac.uk>
	    Paolo Bonzini  <bonzini@gnu.org>

	* libgst/cint.c: Remove my_utime.
	* libgst/sysdep.c: Move it here as _gst_set_file_access_times.
	* libgst/sysdep.h: Declare it.
	* libgst/dict.c: Add CSymbols.PathSeparator.

2007-06-14  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/sysdep.c: Try VirtualAlloc with NULL address if a fixed
	address fails.

2007-06-11  Paolo Bonzini  <bonzini@gnu.org>

        * libgst/cint.c: Add symlink function.

2007-06-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Initialize an attribute's arguments array before
	filling it, a GC may trigger while it is being created.

2007-06-06  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Add Continuation class.
	* libgst/dict.h: Add Continuation class.
	* libgst/interp.c: Add resume_suspended_context, extracted from
	change_process_context.
	* libgst/interp.h: Add Continuation class definition.
	* libgst/prims.def: Add a primitive for continuations.
	* libgst/lib.c: Add Continuation.st and Generator.st.

2007-06-06  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/input.c: Be quiet, but still automatically add periods, when
	in Emacs mode.
	* libgst/comp.c: Likewise.

2007-06-05  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp.h: Add PRIM_SHUTDOWN_WRITE.
	* libgst/interp.c: Implement it.  Fix bug in PRIM_MK_TEMP.
	* libgst/sysdep.c: Use pipes/sockets instead of pty's.

2007-06-01  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lib.c: Load StreamOps.st.

2007-05-31  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gst-parse.c: Support [:arg1 :arg2] syntax for blocks.

2007-05-29  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gst-parse.c: Revert meaning of the last parameter
	to parse_doit.	Skip over the final '!' in parse_chunks,
	don't do so in parse_doit and parse_method_list.  Exit
	parse_namespace_definition upon finding a '!'.

2007-05-26  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lex.c: Pass radix when converting ScaledDecimals like 2r1.1s.
	* libgst/sym.c: Change #asScaledDecimal:scale: to
	#asScaledDecimal:radix:scale:.
	* libgst/sym.h: Likewise.

2007-05-25  Daniele Sciascia  <daniele.sciascia@lu.unisi.ch>

	* libgst/dict.c: Turn _gst_find_shared_pool_variable into
	_gst_namespace_association_at, add _gst_namespace_at.
	* libgst/dict.h: Declare it.
	* libgst/gst-parse.c: Support attributes both before and after
	temporaries.  Improve error recovery.  Set the correct namespace
	when extending a class.  Fix error locations.  Support class
	definition in a namespace definition.  Replace "Class protocol" with
	"Foo class".  Support subclassing nil.  Lookup classes in the
	superspaces too.
	* libgst/sym.c: Use _gst_namespace_association_at.

2007-05-24  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Don't trust {FLT,DBL,LDBL}_DIG.

2007-05-23  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lib.c: Remove TokenStream.st.  Fix pasto.
	* libgst/dict.c: Remove TokenStream and _gst_token_stream_class.
	* libgst/dict.h: Remove _gst_token_stream_class.

2007-05-07  Stephen Compall  <s11@member.fsf.org>

	* libgst/sysdep.c: Fix return value of anon_mmap_commit.

2007-04-18  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/md-config.h: Fix spelling of __PIC__.

2007-04-17  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Move all FileSegment stuff to input.c
	* libgst/input.c: Rename _gst_get_cur_string to _gst_get_source_string
	and return FileSegments or substrings here.  Concatenate pieces of
	readline input like in a STREAM_OOP.
	* libgst/input.h: Adjust _gst_get_cur_string prototype.

2007-04-17  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/input.c: More Smalltalk Stream fixes.

2007-04-17  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lex.c: Load SysDict.st early in the bootstrap process.
	* libgst/prims.def: Remove VMpr_Dictionary_atPut.

2007-04-17  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/input.c: Fix latent bug with Smalltalk Stream parsing.

2007-04-17  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lex.c: Fix bug if first line entered at REPL is empty.

2007-04-16  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp-bc.inl: Fix building on s390.
  
2007-04-11  Daniele Sciascia  <daniele.sciascia@lu.unisi.ch>

	* libgst/gst-parse.c: Fix locations in error messages.
	* libgst/lex.c: Reset parentheses only when showing prompts.

2007-04-11  Daniele Sciascia  <daniele.sciascia@lu.unisi.ch>

	* libgst/gst-parse.c: Fix parsing of "Eval [ foo := ]".

2007-04-11  Paolo Bonzini  <bonzini@gnu.org>
            Daniele Sciascia  <daniele.sciascia@lu.unisi.ch>

	* libgst/gst-parse.c: Improved error recovery.

2007-04-11  Paolo Bonzini  <bonzini@gnu.org>
            Daniele Sciascia  <daniele.sciascia@lu.unisi.ch>

	* libgst/gst-parse.c: Fix parsing when expressions were required
	but not found.

2007-04-11  Paolo Bonzini  <bonzini@gnu.org>
            Daniele Sciascia  <daniele.sciascia@lu.unisi.ch>

	* libgst/dict.c: Load _gst_binding_dictionary_class on runtime.
	* libgst/gst-parse.c: Fix setting up class variables.

2007-04-11  Daniele Sciascia  <daniele.sciascia@lu.unisi.ch>

	* libgst/comp.c: Make compute_keyword_selector public.
	* libgst/comp.h: Likewise.
	* libgst/gst-parse.c: Lots of cool new stuff.
	* libgst/gst-parse.h: Provide prototype for _gst_print_tokens.

2007-04-11  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Add undeclared parameter to
	_gst_exeecute_statements.  Make a statement list if necessary.
	Adjust callers.  Add CONST_BINDING case to equal_constant and
	make_constant_oop.
	* libgst/comp.h: Adjust prototypes.
	* libgst/gst-parse.c: Rewrite parse_doit.  Set undeclared parsing
	around method compilation.  Don't check errors from
	_gst_make_binding_constant
	* libgst/gstpriv.h: Load sym.h early.
	* libgst/input.c: Don't return true in _gst_get_cur_stream_prompt
	for emacs mode.
	* libgst/interp.c: Remove bogus comment.
	* libgst/interp.h: Reword bogus comment.
	* libgst/lex.c: Guess if a period should be added at end of line.
	* libgst/lib.c: Set undeclared parsing around file loading.
	* libgst/prims.def: Fix warning.  Set undeclared parsing around filein.
	* libgst/sym.c: Add possibility to store undeclared variablers into
	a custom dictionary.
	* libgst/sym.h: Add related definitions.
	* libgst/tree.c: Create a CONST_BINDING in _gst_make_binding_constant.
	* libgst/tree.h: Add CONST_BINDING to const_type enum.

2007-03-30  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Change _gst_declare_tracing to int, use value of 2
	for tracing variables intead _gst_trace_kernel_*.
	* libgst/comp.h: Likewise.
	* libgst/interp.c: Likewise.  Adapt bool_addr_index to return int *.
	* libgst/interp.h: Likewise.
	* libgst/prims.def: Support passing/returning an int in trace flag
	get/set primitives.
	* libgst/lib.c: Remove -d, -e options, and map old -[de] to new
	-[DE], allowing the user to specify them multiple times.  Keep only
	long version of -p, make option -Q synonym of -q (it was in the
	documentation).  Kill _gst_trace_kernel_*.  Only valid verbosity
	values are now 1/2/3.
	* libgst/oop.h: Change _gst_gc_message to int.
	* libgst/oop.c: Likewise, adapting to changes to the verbosity values.
	
2007-03-28  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gstpriv.h: Support MacOS X/PPC macros to use lwbrx.
	* libgst/save.c: Fix primitive table checksum for 64-biy systems.

2007-03-28  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lex.c: Fix parsing of #-123.

2007-03-20  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Look for <category: ...> attribute, write result
	in this_method_category, pick it in _gst_make_new_method.  Add a
	default category argument to _gst_make_new_method.  Always create
	a MethodInfo object in _gst_make_new_method.
	* libgst/comp.h: Adjust _gst_make_new_method prototype.
	* libgst/prims.def: Adjust _gst_make_new_method prototype.
	* libgst/sym.c: Add _gst_category_symbol.
	* libgst/sym.h: Add _gst_category_symbol.

2007-03-19  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lib.c: Load Random.st after system is initialized.
	* libgst/dict.c: Remove Random class and _gst_random_class.
	* libgst/dict.h: Remove _gst_random_class.

2007-03-12  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Fix off-by-one error.  
	* libgst/input.c: Fix line/column assignment.  Don't provide
	method source for readline stream.

2007-03-08  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Create FileSegment and MethodInfo object in
	_gst_make_new_method, pass the MethodInfo down to method_new.

2007-02-22  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/oop.c: Remove two unused variables.

	* libgst/comp.c: Add start/end position parameters to method_new,
	method_info_new, file_segment_new, _gst_make_new_method.  Adjust
	callers.  Get ending location of the method in _gst_execute_statements.
	* libgst/comp.h: Adjust prototype of _gst_make_new_method.
	* libgst/gst-parse.c: Don't call _gst_clear_method_start_pos.
	Get ending location of the method in parse_method.
	* libgst/gst-parse.h: Add file_offset field to YYLTYPE.
	* libgst/input.c: Initialize fileOffset to -1 for a new stream,
	and with lseek for a new file stream.  Update it when reading
	from a file into the buffer.  Use it to avoid lseeking during the
	parsing, so that _gst_get_location can quickly compute the file offset
	and store it into the YYLTYPE.  Make _gst_get_location return the
        YYLTYPE.  Remove _gst_get_cur_file_pos, _gst_get_method_start_pos and
        _gst_clear_method_start_pos, and the field they used in struct stream.
        * libgst/input.h: Remove _gst_get_cur_file_pos,
	_gst_get_method_start_pos and _gst_clear_method_start_pos, update the
	prototype of _gst_get_location and make it pure.
	* libgst/lex.c: Adjust calls to _gst_get_location.
	* libgst/prims.def: Adjust call to _gst_make_new_method.
	* libgst/tree.c: Accept ending location in _gst_make_method.
	* libgst/tree.h: Add new field to struct method_node and prototype of
	_gst_make_method.

2007-02-10  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Remove KernelFileLocalPath.  Don't touch
	KernelFilePath on reload.  Export KernelFileUserPath.
	* libgst/lib.c: Add --image-directory and --kernel-directory.
	Add a struct loaded_file used to store files given on
	the command line.  Find path of user init/user pre/site
	pre files in init_paths, delete load_user_init_file and
	load_user_pre_image_file.  Call init_paths after parse_args.
	Rewrite find_kernel_file, place kernel override files
	in ~/.st too (if one needs per-image overrides they can
	use --kernel-directory).  Remove some variables that are
	now unused.  Simplify ok_to_load_binary as the new semantics
	remove the need for some checks.  Export the path to ~/.st in
	_gst_user_file_base_path.
	* libgst/lib.h: Export _gst_user_file_base_path.
	* libgst/sysdep.c: Canonicalize path in _gst_get_full_file_name.

2007-02-05  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Add variables and declarations for weak objects.
	* libgst/dict.h: Add variables for weak objects.
	* libgst/lib.c: Load WeakObjects.st as part of the kernel classes.

2007-01-29  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lex.c: Rename ipowl to mul_powl, support gradual underflow.

2007-01-28  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.def: Use truncl and lrint to implement
	conversion from float to integer.

2007-01-28  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/mpz.c: Fix right shift bug.

2007-01-27  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lex.c: Clear obstack after parsing radix.

2007-01-15  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.def: Fix error checking in previous check in.

2007-01-11  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.def: When changing an object's class, allow the
	new class to not be a kind of Behavior, as long as the superclass
	flagged in it is.

2007-01-03  Paolo Bonzini  <bonzini@gnu.org>

        * libgst/events.c: Avoid infinite loop.

2006-12-28  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Change _gst_init_dictionary_on_image_load to be
	whether the primitive table's checksum is ok.  If it is, just copy
	the default primitive table just like in _gst_init_dictionary.
	* libgst/dict.h: Adjust for above change.
	* libgst/genpr-parse.y: Compute MD5 of DEF_FIL as checksum and
	print it.
	* libgst/interp.h: Declare _gst_primitives_md5.
	* libgst/save.c: Save its contents, and compare it to pass the new flag
	to _gst_init_dictionary_on_image_load.  Move checks from load_snapshot
	to load_file_version.

2006-12-28  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gstpriv.h: Remove F_FREE.
	* libgst/oop.c: Remove loops setting flags to F_FREE.  Set flags to 0
	instead of F_FREE elsewhere.
	* libgst/oop.h: Fix wrong comment.
	* libgst/oop.inl: Adjust IS_OOP_FREE.
	* libgst/print.c: Use IS_OOP_FREE.
	* libgst/save.c: Set flags to 0 instead of F_FREE.  Use IS_OOP_FREE.
	Remove wrong comment.

2006-12-28  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/builtins.gperf: Remove _COLON from the enum for special
	bytecodes.
	* libgst/byte.def: Likewise.
	* libgst/vm.def: Likewise.
	* libgst/xlat.c: Likewise.

	* libgst/comp.c: Remove the possibility to inline #perform:.

	* libgst/byte.c: Turn _gst_builtin_selectors into an array of
	structs (instead of pointers).
	* libgst/opt.c: Likewise.
	* libgst/sym.c: Likewise.
	* libgst/vm.def: Use _gst_builtin_selectors instead of symbols
	defined in sym.c (not slower with the change above).
	* libgst/xlat.c: Only store the opcode in special_send_bytecodes and
	use _gst_builtin_selectors for the other pieces of information.

	* libgst/dict.c: Don't reload the _gst_*_class variables unless
	necessary.  Pass the class to identity_dictionary_new and adjust the
	sole caller, _gst_valid_class_method_dictionary.  Split the
	creation of symbols in two parts (creating symbols, and populating
	the symbol table with SymLink objects); call _gst_restore_symbols
	when loading the image.  Remove _gst_directed_message_new_args.
	* libgst/interp.c: Remove commented out code to start call-ins through
	Process>>#startExecution:.
	* libgst/sym.c: Remove symbols for the special selectors.  New
	functions alloc_symbol_oop and alloc_symlink to support two-phase
	creation of symbols in the image.  Add _gst_smalltalk_namespace_symbol.
	New functions intern_string_fast and _gst_restore_symbols to support
	fast reloading of symbols when loading the image.
	* libgst/sym.h: Adjust for changes to sym.c.

	* libgst/genvm-parse.y: Add const qualifier to yyprint.

2006-12-28  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/mpz.c: Fix warnings in _gst_mpz_divexact.

2006-12-28  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gstpriv.h: Reserve three less bits to runtime flags, add
	F_LOADED.
	* libgst/oop.c: The address of loaded objects never changes, and
	they're always old.  Never compact loaded objects.  Never free them too.
	* libgst/print.c: Print loaded OOPs correctly.
	* libgst/save.c: Define and use buffer_advance.  Try reusing the
	mmap-ed area in load_normal_oops; free buffer in load_normal_oops
	only if copy-on-write is not used.  Mmap all the file in a
	single step, and using MAP_PRIVATE, and only do the "read" method
	in buffer_fill.  Rename use_mmap to buf_used_mmap.  Save objects with
	the old bit set and without the F_RUNTIME flags.

2006-12-22  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/mpz.c: Fix a bug in _gst_mpz_divexact, causing memory
	corruption sometimes.

2006-12-22  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lex.c: Previous change not 64-bit clean,
	obstack_chunk_size returns unsigned rather than int or size_t.

2006-12-21  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lex.c: Build strings on obstack instead of the
	str.c buffer.  Otherwise the buffer could be cleared out
	by oop.c when it uses it to store the live ephemeron OOPs.
	* libgst/str.c: Remove dead functions.
	* libgst/str.h: Likewise.

2006-12-19  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/heap.c: Remove arithmetic on void *.

	* libgst/sym.c: Remove unused symbols.
	* libgst/sym.h: Remove unused symbols.
	* libgst/vm.def: Use _gst_must_be_boolean_symbol.
	* libgst/vm.inl: Regenerate.

2006-12-18  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/save.c: Don't uselessly mark unused OOPs as free.

2006-12-18  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/save.c: Miscellaneous speed-ups, including caching the
	number of free OOPs in the saved file.

2006-12-18  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/alloc.c: Adjust calls to _gst_heap_create.
	* libgst/lib.c: Likewise.
	* libgst/oop.c: Likewise.
	* libgst/save.c: Likewise.

	* libgst/heap.c: Add address parameter to _gst_heap_create.
	* libgst/heap.h: Likewise for declaration.
	* libgst/oop.h: Likewise for _gst_init_oop_table declaration.
	* libgst/sysdep.c: Add address parameter to _gst_osmem_reserve and
	to the implementations of the function.  Support MAP_AUTORESRV
	as a synonym of MAP_NORESERVE.
	* libgst/sysdep.h: Likewise for declaration.

2006-12-15  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/alloc.c: Remove assertions if !OPTIMIZE.  Increase default
	allocation granularity.

2006-12-15  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/save.c: Store object table base in the image, adjust based
	on the delta upon loading.  Inline functions that are not used
	anymore upon saving due to the previous change.  Reset nativeIP
	upon saving rather than upon loading.

2006-12-14  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/cint.c: Move gst_cfunc_descriptor to cint.h.  Accept a nil
	cFunction inside a descriptor (now happens upon image load),
	remove _gst_restore_cfunc_descriptor.
	* libgst/cint.h: Adjust for cint.c changes.
	* libgst/comp.c: Remove _gst_restore_primitive_number.
	* libgst/comp.h: Remove _gst_restore_primitive_number.
	* libgst/dict.c: Initialize primitive table from default in
	_gst_init_dictionary, and from the image in prepare_primitives_table	
	(which replaces prepare_primitive_numbers_map).  Don't reset
	the VMPrimitives dictionary upon image load, and don't walk the
	OOP table.
	* libgst/genpr-parse.y: Initialize _gst_default_primitive_table
	instead of _gst_primitive_table.
	* libgst/interp.c: Use _gst_default_primitive_table in
	_gst_get_primitive_attributes, add _gst_set_primitive_attributes.
	Make the primitive tables public.
	* libgst/interp.h: Adjust for the above.
	* libgst/save.c: Allocate temporary storage for the object that
	are about to be saved.  Massage the CallinProcess, Process,
	Semaphore and CFunctionDescriptor instances in that temporary
	storage rather than at load time.

2006-12-14  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/input.c: Initialize completions only when a readline stream
	is pushed.

2006-12-12  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/oop.c: Proceed recursively if marking the ephemerons'
	slots finds more ephemerons.  Add more debugging functions.
	Rename GC_DEBUGGING and MMAN_DEBUGGING to GC_DEBUG_OUTPUT and
	MMAN_DEBUG_OUTPUT.  Preprocessor symbol GC_DEBUGGING now enables
	sanity checks.

2006-12-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/mpz.c: Use mpn_cmp, mpn_scan1, mpn_bdivmod.
	* libgst/mpz.h: Export _gst_mpz_divexact.
	* libgst/prims.def: Add primitive for _gst_mpz_divexact.

2006-12-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/cint.c: Don't push self for anything but CDATA_SELF and
	CDATA_SELF_OOP.

2006-12-05  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 2.3 released.

2006-12-05  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lex.c: Reject character literals above 128.

2006-12-02  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/mpz.c: Make 64-bit clean.

2006-12-01  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/re.c: Remove ISO C99-ism.

2006-11-30  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp.c: Remove misleading comment.
	* libgst/xlat.c: Export SP in gen_dirty_block around the function call,
	as it may cause a GC. 

2006-11-27  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/xlat.c: Use _p variants appropriately.

2006-11-21  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/re.c: Add make_re_results.  Remove _gst_re_free_registers.
	* libgst/re.h: Remove _gst_re_free_registers.
	* libgst/cint.c: Remove _gst_re_free_registers.
	* libgst/callin.c (_gst_class_name_to_oop): Support namespaces.
	(_gst_oop_at_put): Fix off-by-one bug.

2006-11-21  Paolo Bonzini  <bonzini@gnu.org>

        * libgst/alloc.c: Add GPL exception.
        * libgst/alloc.h: Add GPL exception.
        * libgst/byte.c: Add GPL exception.
        * libgst/byte.def: Add GPL exception.
        * libgst/byte.h: Add GPL exception.
        * libgst/callin.c: Add GPL exception.
        * libgst/callin.h: Add GPL exception.
        * libgst/cint.c: Add GPL exception.
        * libgst/cint.h: Add GPL exception.
        * libgst/comp.c: Add GPL exception.
        * libgst/comp.h: Add GPL exception.
        * libgst/comp.inl: Add GPL exception.
        * libgst/dict.c: Add GPL exception.
        * libgst/dict.h: Add GPL exception.
        * libgst/dict.inl: Add GPL exception.
        * libgst/events.c: Add GPL exception.
        * libgst/events.h: Add GPL exception.
        * libgst/genbc-decl.y: Add GPL exception.
        * libgst/genbc-impl.y: Add GPL exception.
        * libgst/genbc-scan.c: Add GPL exception.
        * libgst/genbc-scan.l: Add GPL exception.
        * libgst/genbc.c: Add GPL exception.
        * libgst/genbc.h: Add GPL exception.
        * libgst/genpr-parse.y: Add GPL exception.
        * libgst/genpr-scan.c: Add GPL exception.
        * libgst/genpr-scan.l: Add GPL exception.
        * libgst/genprims.h: Add GPL exception.
        * libgst/genvm-parse.y: Add GPL exception.
        * libgst/genvm-scan.c: Add GPL exception.
        * libgst/genvm-scan.l: Add GPL exception.
        * libgst/genvm.h: Add GPL exception.
        * libgst/gst-parse.c: Add GPL exception.
        * libgst/gst-parse.h: Add GPL exception.
        * libgst/gst.h: Add GPL exception.
        * libgst/gstpriv.h: Add GPL exception.
        * libgst/gstpub.h: Add GPL exception.
        * libgst/heap.c: Add GPL exception.
        * libgst/heap.h: Add GPL exception.
        * libgst/input.c: Add GPL exception.
        * libgst/input.h: Add GPL exception.
        * libgst/interp-bc.inl: Add GPL exception.
        * libgst/interp-jit.inl: Add GPL exception.
        * libgst/interp.c: Add GPL exception.
        * libgst/interp.h: Add GPL exception.
        * libgst/interp.inl: Add GPL exception.
        * libgst/jitpriv.h: Add GPL exception.
        * libgst/lex.c: Add GPL exception.
        * libgst/lex.h: Add GPL exception.
        * libgst/lib.c: Add GPL exception.
        * libgst/lib.h: Add GPL exception.
        * libgst/md-config.h: Add GPL exception.
        * libgst/memzero.h: Add GPL exception.
        * libgst/oop.c: Add GPL exception.
        * libgst/oop.h: Add GPL exception.
        * libgst/oop.inl: Add GPL exception.
        * libgst/opt.c: Add GPL exception.
        * libgst/opt.h: Add GPL exception.
        * libgst/prims.def: Add GPL exception.
        * libgst/print.c: Add GPL exception.
        * libgst/print.h: Add GPL exception.
        * libgst/re.c: Add GPL exception.
        * libgst/re.h: Add GPL exception.
        * libgst/save.c: Add GPL exception.
        * libgst/save.h: Add GPL exception.
        * libgst/security.c: Add GPL exception.
        * libgst/security.h: Add GPL exception.
        * libgst/str.c: Add GPL exception.
        * libgst/str.h: Add GPL exception.
        * libgst/sym.c: Add GPL exception.
        * libgst/sym.h: Add GPL exception.
        * libgst/sysdep.c: Add GPL exception.
        * libgst/sysdep.h: Add GPL exception.
        * libgst/tree.c: Add GPL exception.
        * libgst/tree.h: Add GPL exception.
        * libgst/vm.def: Add GPL exception.
        * libgst/xlat.c: Add GPL exception.
        * libgst/xlat.h: Add GPL exception.
        * main.c: Add GPL exception.

2006-11-19  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.def: Fetch receiver from _gst_self when passing
	_gst_this_context_oop to the C call-out primitives.  Suspend current
	process before quitting.

2006-11-15  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/builtins.gperf: Rename #callFrom:into: into #callInto:.
	* libgst/builtins.inl: Regenerate.
	* libgst/prims.def: Support not passing the context to C call-out
	primitives, and a "nil" paramter to #callInto:.
	
2006-11-03  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gst.h: Compile on C++.  Rename mst_Object to gst_object.
	* libgst/gstpub.h: Likewise.

	* libgst/comp.c: Rename mst_Object to gst_object.
	* libgst/interp.c: Likewise.
	* libgst/lex.c: Likewise.
	* libgst/oop.c: Likewise.
	* libgst/oop.h: Likewise.
	* libgst/print.c: Likewise.
	* libgst/print.h: Likewise.
	* libgst/dict.c: Likewise.
	* libgst/save.c: Likewise.
	* libgst/security.c: Likewise.
	* libgst/sym.c: Likewise.
	* libgst/dict.h: Likewise.
	* libgst/tree.c: Likewise.
	* libgst/xlat.c: Likewise.
	* libgst/comp.inl: Likewise.
	* libgst/dict.inl: Likewise.
	* libgst/oop.inl: Likewise.
	* libgst/prims.def: Likewise.

2006-11-03  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp.c: Check if we hit the bottom of the stack in
	disable_non_unwind_contexts, and percolate a return value of true
	through unwind_to up to unwind_method.  Otherwise return false from
	both disable_non_unwind_contexts and unwind_to.

2006-11-02  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/opt.c: Fix verification of {{}}.

2006-10-31  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/events.c: Look for events (especially POLLHUP) even
	if poll returns 0.

2006-10-31  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.def: Make CObject primitives more resilient to
	bad contents of the CType.

2006-10-25  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gst-parse.c: Extract parse_variable_primary_1
	out of parse_variable_primary.

2006-10-16  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/xlat.c: Update gen_send for new super-send implementation.
	Disallow deferred super sends.  Fix bug in String>>#at: inlining
	and in compiling a gen_push_self+gen_alt_self sequence.  Remove
	C99-ism in emit_method_prolog.
	* libgst/xlat.h: Fix IS_VALID_IP for methodStart == 0.

2006-10-16  Roman Zippel  <zippel@linux-m68k.org>

	* libgst/alloc.h: Add padding to the bitfields.

2006-10-11  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/cint.c: Avoid buffer overflow on empty variadic argument.

2006-10-05  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lib.c: Improve help message to document -f.

2006-10-05  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp.c: Make less verbose on backtraces.
	* libgst/oop.c: Make less verbose on scavenging.

2006-09-29  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Use _gst_get_method_start_pos to find if we can
	use _gst_get_cur_file_pos.
	* libgst/input.c: Track file offset of FileStream objects.  Extend
	buffers when a new hunk is needed, shrink it on _gst_get_cur_string.
	Use buffer and file offset tracking it to support _gst_get_cur_file_pos
	and _gst_get_cur_string for STREAM_OOP streams.  Delete
	_gst_get_cur_readline as it is the same as _gst_get_cur_string
	* libgst/input.h: Delete _gst_get_cur_readline.

2006-09-24  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.inl: Fix checking builds.

2006-09-22  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp-bc.inl: Shut up compiler warnings.

	* libgst/cint.c: Declare regex functions.
	* libgst/re.c, libgst/re.h: Move from examples.  Adapt since it
`	is not anymore a module.
	* libgst/lib.c: Add Regex.st.

2006-09-15  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/byte.c: Include match.h.
	* libgst/opt.c: Include match.h.
	* libgst/xlat.c: Include match.h.
	* libgst/gstpriv.h: Don't.

	* libgst/cint.c: Avoid stupid warning.

	* libgst/dict.inl: Make IS_A_CLASS/IS_A_METACLASS more robust.
	* libgst/opt.c: Detect invalid sends to super.

	* libgst/comp.c: Push class, not superclass for send to super.
	* libgst/vm.def: Adapt.

2006-09-13  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c (compile_send): Compile receiver superclass for
	sends to super.
	* libgst/opt.c: Add receiver class to balance for send to super.
	Replace "+= -x" with "-= x" throughout.
	* libgst/tree.h: Adjust _gst_make_oop_constant comment.
	* libgst/vm.def (SEND_SUPER, SEND_SUPER_IMMEDIATE): Pop class OOP.
	(SEND_TO_SUPER): Get methodClass argument.

2006-09-08  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/cint.c: Wrap utime.

2006-09-05  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c, libgst/dict.inl, libgst/gstpriv.h,
	libgst/gst-parse.c: Adjust macro names for upgrade to Autoconf 2.60.

2006-07-20  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lib.c: Load Getopt.st.

2006-07-20  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/input.c: Merge my_close into _gst_pop_stream.  Always
	free memory.  Initialize fileNameOOP for FileDescriptors in
	_gst_push_stream_oop.  Clear the fileName field in push_new_stream.
	Fix STREAM_OOP case in my_getc.  Use fileNameOOP to print error
	messages.
	* libgst/prims.def: New primitives VMpr_Stream_fileIn and
	VMpr_Stream_fileInLine, extracted from the fileOp primitive.

2006-07-20  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Add 'peek' variable to FileDescriptor.
	* libgst/dict.h: Add 'peek' variable to struct gst_file_stream.
	* libgst/input.c: Leave poll_and_read upon POLLHUP.
	* libgst/interp.h: Add PRIM_GET_CHARS_AT and PRIM_PUT_CHARS_AT.
	* libgst/prims.def: Remove useless fstat call, accept any byte
	or character class in read/write primitives, implement pread
	and pwrite primitives.

2006-07-18  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/callin.c: Support wchars and wstrings.
	* libgst/callin.h: Likewise.
	* libgst/cint.c: Likewise.
	* libgst/gstpub.h: Likewise.
	* libgst/sym.c: Add new symbols.
	* libgst/sym.h: Likewise.

	* libgst/comp.c: Support CONST_CHAR in equal_constant and
	make_constant_oop.
	* libgst/dict.c: Add UnicodeCharacter and UnicodeString.  Change
	instance and class variable names for Character.  Add #utf32 shape
	element size in _gst_log2_sizes.  Add helper functions for callin.c
	and cint.c changes above.
	* libgst/dict.h: Add gst_char and gst_unicode_string, and declare
	the helper functions.
	* libgst/dict.inl: Move here CHAR_OOP_AT from oop.inl; provide
	CHAR_OOP_VALUE here with a new definition.  Add char_new.  Support
	#utf32 shape.
	* libgst/gst-parse.c: Drop BYTE_LITERAL tokens.  Check range of
	integers instead.  Support $< INTEGER_LITERAL > tokens.
	* libgst/gst-parse.h: Remove cval from YYSTYPE.
	* libgst/gstpriv.h: Add ISP_UTF32; include wchar.h.
	* libgst/lex.c: Match the gst-parse.c changes.  Use ival instead of
	cval.  Support printing non-ASCII CHAR_LITERALs with their code points.
	* libgst/lib.c: Load UniChar.st and UniString.st.
	* libgst/oop.c: Fix a comment's spacing.
	* libgst/oop.inl: Remove CHAR_OOP_AT and CHAR_OOP_VALUE.
	* libgst/prims.def: Define VMpr_CharacterArray_valueAt,
	VMpr_CharacterArray_valueAtPut, VMpr_UnicodeCharacter_create,
	VMpr_Character_equal.  Accept some UnicodeCharacters in
	VMpr_Memory_atPut and VMpr_CObject_atPut.
	* libgst/print.c: Print non-ASCII Characters and UnicodeCharacters
	with their code points.
	* libgst/tree.c: Make a CONST_CHAR in _gst_make_char_constant, not
	a CONST_OOP (partly undoing 2000-09-09 change), and accept an int.
	* libgst/tree.h: Add back CONST_CHAR.

2006-07-13  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/events.c (_gst_sync_file_polling): Prepare pfd.revents by
	zeroing it.

2006-04-26  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gst-parse.c (parse_doit): Do not read other tokens
	after an EOF.

2006-04-18  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gst-parse.c (parse_array_constructor): Do not crash on {}
	or on an invalid attribute like in 'a <3 4>'.

2006-02-12  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c (equal_constant): Compare floating point constants
	with memcmp.

2005-11-30  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/vm.def: Refine previous change using OOP_CLASS instead of
	IS_CLASS.

2005-11-30  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/vm.def: Shortcut FloatD/Integer mixed math, and
	FloatD division.

2005-11-30  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/xlat.c: Fix ISP_CHARACTER typo.

2005-11-29  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/vm.def: Make the #at: and #at:put: cache store the spec,
	and only work on primitives 60/61.
	* libgst/interp.c: Adjust.  New functions cached_index_oop_primitive
	and cached_index_oop_put_primitive.

2005-11-29  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c (class_info): Use ISP_CHARACTER shape for
	String and Symbol.
	(_gst_log2_sizes): Adjust for ISP_CHARACTER.
	* libgst/dict.inl (index_oop_put_spec, index_oop_spec): New,
	from index_oop_put and index_oop.  Fix typos in handling of
	ISP_FLOAT and ISP_DOUBLE.  Handle ISP_CHARACTER.
	(index_oop_put, index_oop): Use them.
	(index_string_oop_put, index_string_oop): Delete.
	* libgst/gstpriv.h: Define ISP_CHARACTER.
	* libgst/prims.def (VMpr_String_basicAt,
	VMpr_String_basicAtPut): Delete.
	(VMpr_String_similarityTo): Accept ISP_CHARACTER shaped classes.
	(VMpr_ByteArray_replaceFromToWithStartingAt): Accept ISP_SCHAR and
	ISP_CHARACTER shaped classes as well.
	* libgst/xlat.c (emit_basic_size_in_r0): Accept ISP_SCHAR and
	ISP_CHARACTER shaped classes as well.
	(emit_inlined_primitive): Accept ISP_SCHAR and ISP_CHARACTER
	shaped classes as well.

2005-11-29  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp.h (execute_primitive_operation): Do not declare.
	* libgst/interp.c (execute_primitive_operation): New name
	of _gst_execute_primitive_operation.  Make static and inline.
	* libgst/interp-bc.inl: Adjust.
	* libgst/interp-jit.inl: Adjust.
	* libgst/vm.def: Adjust.

2005-11-21  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c (_gst_string_new, _gst_counted_string_new): Handle
	zero-length strings.
	* libgst/interp.c (_gst_init_signals): Handle SIGTERM.
	(interrupt_handler): Exit on SIGINT or SIGTERM.

2005-09-18  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/callin.h: New methods for the interpreter proxy.
	* libgst/callin.c: New methods for the interpreter proxy.
	* libgst/gstpub.h: New methods for the interpreter proxy.
	* libgst/interp.h: New function _gst_find_method, moved from
	interp.c.  Declare method_cache_entry.
	* libgst/interp.c: Rename find_method to _gst_find_method,
	remove declarations of find_method and method_cache_entry.

2005-09-12  Mike Anderson  <msasjf@yahoo.co.uk>

	* libgst/events.c: Fix bug with pollfds being lost if a previous
	one has an error.

2005-09-05  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gst-parse.c: Do not crash on #[].

2005-09-02  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/save.c: Use a better #! sequence.

2005-08-30  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/oop.c: Fix pasto (SIZEOF_LONG instead of SIZEOF_OOP).
	* libgst/comp.c: Do not emit PUSH_INTEGER for integers equal or
	bigger than 2^31.
	* libgst/byte.h: Change final argument of compile_byte to int.
	* libgst/byte.c: Likewise.

2005-08-30  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/mpz.c: Fix 64-bit cleanliness problem.

2005-08-28  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gst-parse.c: Remove last parameter to parse_cascaded_messages.

2005-08-28  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gstpriv.h: Define ENABLE_SECURITY.
	* libgst/gst-parse.c: Fix warnings.
	* libgst/opt.c: Reenable verifier.

2005-08-28  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/input.c: Add to input_stream a method_start_pos
	member.  Clear it in push_new_stream and _gst_set_stream_info.
	Set it in _gst_get_location.  Move _gst_get_method_start_pos
	and _gst_clear_method_start_pos here from lex.c.
	* libgst/lex.c: Remove the aforementioned two functions and
	the code mentioning the local variable method_start_pos.
	* libgst/lex.h: Move the functions from here...
	* libgst/input.h: ... to here and make _gst_get_method_start_pos
	and _gst_get_cur_file_pos return off_t.
	* libgst/comp.c: Make usage of these two functions 64-bit safe.

2005-08-14  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/cint.c: Add lstat.

2005-08-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/cint.c: Do my math correctly.

2005-06-17  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/cint.c: Do not use ffi_type_slong, it is a 64-bit type!
	* libgst/gst-parse.c: Fix more bugs in creation of FileSegments.

2005-06-16  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lex.c: Fix bugs in creation of FileSegments.
	* libgst/gst-parse.c: Fix bugs in creation of FileSegments.
	* libgst/gstpriv.h: Fixes for GCC 4.0.0.

2005-04-09  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gst-parse.c (expected): Fix spacing.
	(parse_block): Fix "expected" error message.
	(parse_block_variables): Remove useless check for EOF.

2005-04-04  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/callin.c (_gst_eval_code, _gst_eval_expr): Do not use
	_gst_compile_code for communication to _gst_parse_stream, use a
	parameter to it instead.
	* libgst/comp.c (_gst_set_compilation_class): Extract out of
	_gst_set_compilation_category.
	(_gst_install_initial_methods, _gst_execute_statements): Adjust.
	(_gst_make_attribute): Execute statements for the arguments here.
	* comp.h (_gst_set_compilation_class): New prototype.
	(_gst_set_compilation_category): Adjust prototype.
	* libgst/gst-parse.c: Rewritten.
	* libgst/gst-parse.h: Rewritten based on Bison output.
	* libgst/gstpriv.h: Include gst-parse.h.
	* libgst/interp.c (parse_stream_with_protection): Add new parameter
	of _gst_parse_stream and forward it.
	* libgst/lex.c (parse_*): Rename to scan_*.
	(_gst_compile_code): Remove.
	(_gst_parse_stream): Add parameter to pick top production.
	(_gst_yylex): Remove INTERNAL_TOKEN hacks.  Do not compute last_line
	and last_column.
	(print_token): Remove INTERNAL_TOKEN.
	* libgst/lex.h (_gst_compile_code, _gst_yydebug): Remove.
	(_gst_parse_stream): Adjust prototype.
	* libgst/lib.c (help_text, parse_args, long_options): Remove -y.
	(process_stdin, process_file): Adjust call to _gst_parse_stream.
	* libgst/prims.def: Adjust for changes to _gst_set_compilation_category
	and parse_stream_with_protection.  Do not use _gst_compile_code,
	refer to _gst_current_parser->state instead and fail if methodsFor
	is used while not parsing.
	* libgst/tree.c (_gst_add_node): Support case where N1 is NULL.
	* libgst/tree.h (_gst_add_node): Return a tree_node.
	
	* libgst/gst-parse.y: Remove.
	* libgst/Makefile.am: Replace it with gst-parse.c.

2005-03-25  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c (_gst_make_attribute): Use make_constant_oop.
	* libgst/gst-parse.y (attribute_body): Do not include keyword.
	(attribute_argument): Add it here.  Do not go through
	_gst_execute_statements for TREE_CONST_EXPRs (greatly speeds up
	C call-outs).

2005-03-25  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c (install_method): Evaluate pragma handlers.
	Make CompiledMethod read-only.
	(method_new): Do not make CompiledMethod read-only here.
	* libgst/dict.c (class_info): Include pragmaHandlers instance
	variable for Class.
	(init_class): Initialize it here.
	* libgst/dict.h (gst_class): Include pragmaHandlers instance variable.
	* libgst/sym.c (_gst_find_pragma_handler): New.
	* libgst/sym.h (_gst_find_pragma_handler): Declare it.

2005-03-24  Paolo Bonzini  <bonzini@gnu.org>

	Fix bug when an ephemeron was tenured directly from eden to
	oldspace.

	* libgst/oop.c (add_to_grey_list): Remove last parameter.
	(add_grey_object): New function, for when the OOP parameter
	of add_to_grey_list was non-nil.  Call scanned_fields_in from
	here.
	(_gst_copy_an_oop, tenure_one_object): Use add_grey_object.

2005-03-24  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/callin.c: Remove out-of-date comment.

2005-03-24  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lib.c: Load Transcript.st earlier.

2005-02-02  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/alloc.c (NO_MALLOC_OVERRIDE): New define.
	(malloc, realloc, free, calloc): Define only if NO_MALLOC_OVERRIDE
	is not defined.
	(morecore): Do not use the system heap (sbrk) if NO_MALLOC_OVERRIDE
	is defined.

2004-12-20  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/sysdep.h (O_NONBLOCK): Unused, remove.

2004-11-25  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/xlat.c (gen_dirty_block): Return value is not in JIT_R0
	except on x86.

2004-11-25  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/oop.c: Catch more errors out of mprotect.

2004-11-25  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/alloc.h: Use char for the type of large.data
	in struct heap_block.

2004-11-13  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lib.c: Always print "file not found" error.
	* libgst/gstpriv.h: Use autoconf test to look for
	availability of __attribute__ ((visibility ("hidden"))).

2004-09-24  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/save.c: Remove code left by mistake.

2004-09-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lex.c: Scan initial shebang as comment.
	* libgst/gst-parse.y: Parse initial shebang as comment.
	* libgst/lib.c: Add -f option.

2004-08-29  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.h: SIZEOF_INTPTR_T => SIZEOF_OOP.
	* libgst/dict.inl: SIZEOF_INTPTR_T => SIZEOF_OOP.
	* libgst/gstpriv.h: SIZEOF_INTPTR_T => SIZEOF_OOP.
	* libgst/save.c: SIZEOF_INTPTR_T => SIZEOF_OOP.
	* libgst/xlat.c: SIZEOF_INTPTR_T => SIZEOF_OOP.

2004-08-21  Paolo Bonzini  <bonzini@gnu.org>

        * libgst/gstpriv.h: Enforce long double alignment for obstacks.
        * libgst/alloc.c: Support 16k pages and long double alignment of
        malloc-ed blocks.
        * libgst/alloc.h: Likewise.

2004-03-25  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.def: Fix C99-ism.
	* libgst/lib.c: Simplify handling of -a.

2004-01-19  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/xlat.c: Do not compile body of method if
	primitive cannot fail.  Reserve space for emitting
	#valueWithReceiver:withArguments:.

2004-01-18  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/oop.c: Discard the translations of objects that
	#become: swaps.
	* libgst/opt.c: Rewritten compute_stack_positions, factor
	code that is common with the verifier.
	* libgst/xlat.c: Reset sp before translating user-defined
	method callers (subclasses of CompiledMethod with flags=6).
	Emit extras in emit_code_tree, not in gen_nothing.  Add
	objectReg parameter to emit_basic_size_in_r0, use it to
	speed up #javaAsInt and #javaAsLong.

2004-01-15  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.def: Set class of created CompiledMethod
	and CompiledBlock objects.
	* libgst/comp.c: Incubate attributes properly.
	* libgst/dict.c: Return nil if searching a pool variable
	in a non-Dictionary class.
	* libgst/xlat.c: Translate #javaAsInt and #javaAsLong.

2004-01-08  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Do not scavenge before the interpreter
	is activated.
	* libgst/interp.c: Check for IS_NIL (_gst_this_context_oop),
	not for ip != NULL, to see if a process is active.
	* libgst/interp-jit.inl: Refresh native IP of processes if the
	method they are executing is not translated anymore.
	* libgst/xlat.c: Fix bit-rot.  Basically removed all places in
	which the code generators were decoding the bytecodes, and
	fixed some places that did not account for superoperators.

2003-12-11  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Add experimental code to inline #perform:
	and friends.

	* libgst/genbc-decl.y: Initialize all generated variables.
	* libgst/genbc-scan.l: Update for flex 2.5.31.
	* libgst/genpr-scan.l: Update for flex 2.5.31.
	* libgst/genvm-scan.l: Update for flex 2.5.31.

	* libgst/comp.c: Remove _colon_ from variable names where
	not ambiguous.
	* libgst/interp.c: Likewise.
	* libgst/lex.c: Likewise.
	* libgst/security.c: Likewise.
	* libgst/sym.c: Likewise.
	* libgst/sym.h: Likewise.
	* libgst/vm.def: Likewise.
	* libgst/xlat.c: Likewise.

2003-12-10  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Check _gst_verbosity
	* libgst/dict.c: Publish _gst_verbosity as OutputVerbosity
	* libgst/lib.c: Replace no_errors with _gst_verbosity == 0,
	_gst_quiet_execution with _gst_verbosity == 1, _gst_verbose
	with _gst_verbosity == 3, don't set _gst_gc_message on -Q.
	* libgst/oop.c: Don't print gc messages if _gst_quiet_execution == 0.

2003-11-27  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/byte.def: New bytecodes 25 and 26
	(#javaAsInt, #javaAsLong).
	* libgst/byte.h: New bytecodes 25 and 26
	* libgst/vm.def: Likewise
	* libgst/builtins.gperf: Likewise
	* libgst/sym.c: Declare _gst_java_as_int_symbol
	and _gst_java_as_long_symbol.
	* libgst/sym.h: Declare _gst_java_as_int_symbol
	and _gst_java_as_long_symbol.

2003-11-25  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/input.c: New function poll_and_read.

2003-11-21  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/byte.def: Suppress uninitialized variable
	warning on arg_lsb.

	* libgst/dict.c: Support multiple class shapes
	* libgst/dict.inl: Likewise
	* libgst/gstpriv.h: Likewise
	* libgst/prims.def: Likewise
	* libgst/xlat.c: Put an abort on blatantly broken code.

2003-11-20  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/opt.c: Be more precise in detecting jumps over
	a push that land on a pop.

2003-11-18  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Add break statements to
	_gst_set_file_stream_file (ouch!).
	* libgst/prims.def: Allow ByteArrays in get/put primitives,
	and integers as opening modes.

2003-11-13  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Raise errors on duplicate arguments or temporaries.
	* libgst/sym.c: Add third parameter to _gst_declare_name,
	use it in _gst_declare_arguments or _gst_declare_temporaries
	* libgst/sym.h: Adjust declaration of _gst_declare_name.

2003-11-12  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/alloc.h: Hide all internal symbols.
	* libgst/byte.h: Hide all internal symbols.
	* libgst/callin.h: Hide all internal symbols.
	* libgst/cint.h: Hide all internal symbols.
	* libgst/comp.h: Hide all internal symbols.
	* libgst/dict.h: Hide all internal symbols.
	* libgst/events.h: Hide all internal symbols.
	* libgst/gstpriv.h: Hide all internal symbols.
	* libgst/heap.h: Hide all internal symbols.
	* libgst/input.h: Hide all internal symbols.
	* libgst/interp.h: Hide all internal symbols.
	* libgst/jitpriv.h: Hide all internal symbols.
	* libgst/lex.h: Hide all internal symbols.
	* libgst/lib.h: Hide all internal symbols.
	* libgst/match.h: Hide all internal symbols.
	* libgst/md-config.h: Hide all internal symbols.
	* libgst/memzero.h: Hide all internal symbols.
	* libgst/mpz.h: Hide all internal symbols.
	* libgst/oop.h: Hide all internal symbols.
	* libgst/opt.h: Hide all internal symbols.
	* libgst/print.h: Hide all internal symbols.
	* libgst/save.h: Hide all internal symbols.
	* libgst/security.h: Hide all internal symbols.
	* libgst/str.h: Hide all internal symbols.
	* libgst/sym.h: Hide all internal symbols.
	* libgst/sysdep.h: Hide all internal symbols.
	* libgst/tree.h: Hide all internal symbols.
	* libgst/xlat.h: Hide all internal symbols.

	* libgst/interp.h: Declare _gst_abort_execution here.
	* libgst/xlat.c: Don't declare it as extern here.
	* libgst/oop.c: Make grow_memory_no_capact and oop_heap static.
	* libgst/sym.c: Make check_symbol_chain static.

	* libgst/sym.c: Initialize global variables so as to make them uncommon.
	* libgst/comp.c: Likewise.
	* libgst/lib.c: Likewise.
	* libgst/save.c: Likewise.
	* libgst/oop.c: Likewise.
	* libgst/dict.c: Likewise.
	* libgst/interp.c: Likewise.
	* libgst/cint.c: Likewise.
	* libgst/lex.c: Likewise.

2003-11-11  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/input.c: Avoid SIGSEGV if character in range
	128..255 is pushed back by the lexer.
	* libgst/lex.c: Tweak output of invalid characters.

	* libgst/alloc.c: Tweak pool sizes to obtain cacheline alignment.
	* libgst/lib.c: Tweak for more shared library friendliness.
	* libgst/tree.c: Tweak for more shared library friendliness.
	* libgst/builtins.inl: Rebuild for shared library friendliness.
	* libgst/sym.c: Adapt.

2003-11-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lex.c: Allow dollars (!) in the middle of
	identifiers.
	* libgst/dict.inl: Require that the second argument
	of is_a_kind_of is not nil, avoid a test if we
	are testing for the exact class.
	* libgst/prims.def: Allow #perform: of a subclass
	of CompiledMethod.

2003-11-04  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gstpriv.h: Define prefetching macros.
	* libgst/oop.c: Use prefetches.
	* libgst/oop.inl: Use prefetches.
	* libgst/prims.def: Use nanosleep instead of usleep.
	Use prefetches.
	* libgst/save.c: Use prefetches.

2003-11-03  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lex.c: Handle 1+-2 as "1 + -2"
	rather than as "1 +- 2".

2003-10-24  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Publish HOST_SYSTEM into
	CSymbols.hostSystem.

2003-10-17  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lex.c: New function parse_sharp; extract
	SYMBOL_KEYWORDs (now called SYMBOL_LITERAL) into
	it instead of lexing them in parse_ident.  Simplify
	parse_ident.
	* libgst/gst-parse.y: Use new lexer symbol SYMBOL_LITERAL
	which sums up every symbol constant.

2003-10-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Rename untrusted_methods to
	_gst_untrusted_methods, don't declare it here...
	* libgst/comp.h: ...and do it here instead
	* libgst/sym.c: Use it.

	* libgst/dict.c: Define _gst_identity_dictionary_at
	* libgst/dict.h: Declare it
	* libgst/comp.c: Don't accept to override an
	trusted method with an untrusted one.

2003-09-29  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp.c: New function find_method.  Use it
	within check_send_correctness.  When #perform: is used
	with an absent method, send #doesNotUnderstand: even
	if the number of arguments is wrong -- this is needed
	so that non-standard selector names can be used.

2003-09-24  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Define _gst_process_attributes_array,
	split process_attribute out of process_attributes,
	rename this one to process_attributes_tree.
	* libgst/comp.h: Declare process_attributes
	* libgst/prims.def: Use _gst_process_attributes_array,
	accepting an array of Messages instead of a primitive
	number in VMpr_CompiledMethod_create.

2003-09-20  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lib.c: Exit with status 1 if a wrong option is
	specified.

2003-09-18  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp-bc.inl: Only set last_primitive for succeeded
	primitives.

2003-09-15  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp-bc.inl: Search #doesNotUnderstand: in
	superclass if searching for a message fails during a send
	to super.
	* libgst/comp.c: Sending to super from a root class is
	now an error.

	* libgst/byte.h: Retouch the encoding of PUSH_SPECIAL in order
	to simplify the implementation
	* libgst/vm.def: Fix it
	* libgst/byte.c: Fix the MATCH_BYTECODES occurrences
	* libgst/opt.c: Fix the MATCH_BYTECODES occurrences
	* libgst/xlat.c: Fix the MATCH_BYTECODES occurrences

	* libgst/interp-bc.inl: Simplify most of the macro cruft.
	* libgst/vm.def: Move the rest here.

2003-09-14  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/vm.def: Reimplement jump lookahead
	* libgst/interp-bc.inl: With some code here too.

2003-09-12  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/byte.def: Add superoperators
	* libgst/vm.def: Add superoperators
	* libgst/opt.c: Fix latent bugs exposed by superoperators

	* libgst/interp.c: Get rid of the useless third
	parameter to SEND_MESSAGE
	* libgst/interp-bc.inl: Likewise
	* libgst/interp-jit.inl: Likewise
	* libgst/prims.def: Likewise
	* libgst/vm.def: Likewise

2003-09-11  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Compile #and:/#or: to a shorter
	sequence

	* libgst/genvm-parse.y: One more little language, ...
	* libgst/genvm-scan.l: ... with its scanner, ...
	* libgst/genvm.h: ... its header file, ...
	* libgst/vm.def: ... its source code, ...
	* libgst/vm.inl: ... and its output, ...
	* libgst/interp-bc.inl: ... which is included here.

2003-09-09  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/opt.c: Support superoperator synthesis.
	* libgst/superop1.inl: New automatically generated file.
	* libgst/superop2.inl: New automatically generated file.

2003-09-08  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/genbc-decl.y: Support multiple dispatch statements.

2003-09-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Create CSymbols as an instance of Namespace.

2003-09-05  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/opt.c: Fix peephole optimizer's jump fixup
	pass for new bytecode set.  Verify jumping in range
	and jumping past an extension bytecode.

2003-09-04  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/byte.def: Modify for new syntax and bytecode set
	* libgst/genbc-scan.l: Modify for new syntax
	* libgst/genbc-decl.y: Modify for new syntax
	* libgst/byte.c: Accept two parameters in _gst_compile_byte
	* libgst/byte.h: Modify for new bytecode set
	* libgst/comp.c: Modify for new bytecode set, death to many
	functions
	* libgst/interp-bc.inl: Modify for new bytecode set
	* libgst/opt.c: Modify for new bytecode set, momentary death
	to peephole optimizer (will come back new and improved...)

	* libgst/builtins.gperf: New file.
	* libgst/builtins.inl: New automatically generated file.
	* libgst/sym.c: Include builtins.gperf's hash function
	* libgst/sym.h: Declare it

2003-09-02  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Don't rely on _gst_is_kernel_file
	* libgst/input.c: Death to _gst_store_no_source and _gst_is_kernel_file
	* libgst/input.h: Death to _gst_store_no_source and _gst_is_kernel_file
	* libgst/lib.c: Death to _gst_store_no_source and -s.

	* libgst/interp.c: Don't let the current process die on image
	reload.

2003-08-25  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/cint.c: Fix variadic functions.
	* libgst/opt.c: Fix verification of nested array constructors.

2003-08-09  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/security.c: New file
	* libgst/security.h: New file
	* libgst/lib.c: Load Security.st
	* libgst/dict.inl: Provide OrderedCollection accessors
	
2003-07-21  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/cint.c: Allow to pass integers as float or doubles
	(but not vice versa).

2003-07-13  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Make Character not indexed.
	* libgst/oop.c: Make Character's asciiValue an OOP.
	* libgst/oop.h: Make Character's asciiValue an OOP.
	* libgst/prims.def: Remove Character>>#asciiValue primitive.

2003-07-10  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Recalculate number of temporaries used
	by a block after it is compiled.

2003-07-09  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/oop.c: Don't scavenge before allocating big
	objects.
	* libgst/prims.def: Use _gst_init_mem to set GC
	parameters.

2003-07-08  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp.c: Initialize Processor's gcSemaphore
	* libgst/interp.h: Define gcSemaphore and gcArray
	* libgst/dict.c: Likewise
	* libgst/oop.c: Use it to mourn objects
	* libgst/sym.h: No mourn symbol anymore
	* libgst/sym.c: No mourn symbol anymore

	* libgst/dict.c: Use IS_OOP_VALID_GC during image load
	* libgst/oop.c: Use IS_OOP_VALID_GC during the GC
	* libgst/oop.inl: Complicate validity test to take
	into account incremental GC-ing of old objects.
	* libgst/save.c: Use IS_OOP_VALID_GC since we finish
	the incremental GC before saving.

2003-07-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/mpz.c: *_si routines accept a signed integer,
	not an unsigned.
	* libgst/xlat.c: Inline the class primitive, don't inline
	#class
	* libgst/interp-bc.inl: Don't inline #class but cache it.
	* libgst/interp.c: Cache primitives for #class.

2003-07-04  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/genbc-impl.y: Output a small comment with the
	file and line where each MATCH_BYTECODES block was defined.
	* libgst/xlat.c: Use genbc here too... -500 lines, gotta
	like this :-)

2003-07-03  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.h: Define MTH_USER_DEFINED
	* libgst/comp.inl: Define GET_METHOD_NUM_ARGS
	* libgst/interp-bc.inl: Support user-defined methods
	* libgst/opt.c: Fix fall-out in the JIT from the
	introduction of genbc, support subclasses of CompiledMethod
	* libgst/str.c: Fix fall-out from the size_t-ification
	of max_buf_len
	* libgst/sym.c: Define a new symbol for
	#valueWithReceiver:withArguments:
	* libgst/sym.h: Likewise
	* libgst/xlat.c: Fix fall-out in the JIT from the new
	meaning of bytecode 200, and support user-defined methods

2003-06-27  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/opt.c: Verify sends to super

2003-06-25  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Remove values instance variable,
	store key/value pairs in adjacent slots.
	* libgst/dict.h: Ditto
	* libgst/dict.inl: Ditto

	* libgst/opt.c: Check for Array bounds in verifier
	* libgst/lib.c: Initialize compiler after interpreter

	* libgst/comp.c: Store attributes in MethodInfo objects
	* libgst/comp.h: Add attributes field to gst_method_info
	* libgst/dict.c: Make MethodInfo indexable

2003-06-23  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Death to _gst_get_method_descriptor and
	_gst_set_method_descriptor.

	* libgst/alloc.h: Remove last occurrences of the register keyword
	* libgst/byte.h: Remove last occurrences of the register keyword
	* libgst/oop.h: Remove last occurrences of the register keyword

	* libgst/comp.c: Apply untrusted attribute to CompiledMethods
	and CompiledBlocks as well.
	* libgst/opt.c: Check untrusted attribute for CompiledMethods.
	* libgst/prims.def: New primitive VMpr_CompiledCode_verificationResult

2003-06-22  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Constify _gst_display_compilation_trace and
	_gst_invoke_hook
	* libgst/comp.h: Constify _gst_display_compilation_trace and
	_gst_invoke_hook
	* libgst/dict.c: Constify class_definition and several functions
	* libgst/interp.h: Constify prim_table_entry
	* libgst/interp.c: Constify stop_executing
	* libgst/lib.c: Constify several variables
	* libgst/lib.h: Constify several variables
	* libgst/gst-parse.y: Constify several variables
	* libgst/sym.c: Constify several variables and functions
	* libgst/sym.h: Constify several variables and functions
	* libgst/tree.c: Constify several variables and functions
	* libgst/tree.h: Constify several variables and functions

	* libgst/sysdep.c: Use #elif

	* libgst/sym.c: Trusted instance variables of an untrusted
	class are read-only.  Same goes for class variables.  The
	instance variables array is scanned backwards (faster and
	more correct).

2003-06-20  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/opt.c: Death to stack_balance_table and
	jump_offsets

2003-06-19  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/genbc-decl.y, libgst/genbc-impl.y, libgst/genbc-scan.l
	libgst/genbc.c, libgst/genbc.h, libgst/byte.def: new files
	* libgst/byte.c: Use genbc's facilities
	* libgst/opt.c: Use genbc's facilities
	* libgst/gstpriv.h: Include match.h

2003-06-17  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.inl: Define NUM_METHOD_LITERALS
	* libgst/gstpriv.h: Define F_VERIFIED and IS_OOP_VERIFIED
	* libgst/interp-bc.inl: Invoke bytecode verifier
	* libgst/xlat.c: Ditto
	* libgst/opt.c: Include bytecode verifier.  Set stack
	balance for return opcodes to -1.  Be less forgiving in
	_gst_compute_stack_position (abort instead of giving errors)
	since the bytecode verifier should have tested the assertions.
	
2003-06-15  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/xlat.c: New function _gst_reset_inline_caches;
	prefix _gst_ to global functions
	* libgst/xlat.h: Ditto
	* libgst/interp.c: Invoke _gst_reset_inline_caches
	* libgst/comp.c: Callers adjusted.
	* libgst/oop.c: Callers adjusted.
	* libgst/oop.inl: Callers adjusted.
	* libgst/prims.def: Callers adjusted.

2003-06-11  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gstpriv.h: Check for SmallIntegers in
	read-only accessors.
	* libgst/prims.def: Use the above to simplify
	some checks.

	* libgst/interp.c: Implement trustedness of contexts.
	* libgst/prims.def: Implement trustedness primitives.
	* libgst/gstpriv.h: Implement trustedness accessors.
	* libgst/comp.c: Don't allow primitives in untrusted
	classes.

2003-06-10  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Allow creating multiple subclasses of nil
	at bootstrap.  Store bits of the instance specification
	directly in the class_definition structures.
	* libgst/oop.c: Death to _gst_fixup_metaclass_objects.
	* libgst/oop.h: Ditto.

2003-06-09  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp-bc.inl: REGISTER with structs is not good.
	* libgst/interp-jit.inl: REGISTER with structs is not good.
	* libgst/xlat.c: Now that thisContext is no more, represent
	storing into thisContext as TREE_STORE | TREE_POP_INTO_ARRAY,
	not TREE_SEND | TREE_POP_INTO_ARRAY.

2003-06-08  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Push thisContext as "ContextPart thisContext"
	* libgst/byte.h: Death to the push thisContext bytecode
	* libgst/interp-bc.inl: Ditto
	* libgst/opt.c: Ditto
	* libgst/xlat.c: Ditto

	* libgst/byte.h: BLOCK_COPY_SPECIAL --> MAKE_DIRTY_BLOCK
	* libgst/comp.c: Adjust.  Don't push nil or thisContext
	before making a dirty block.  Don't treat #blockCopy:
	as a special selector.
	* libgst/opt.c: Blocks accessing thisContext are
	dirty
	* libgst/interp.c: New function _gst_make_dirty_block.
	* libgst/interp.h: Declare it
	* libgst/interp-bc.inl: Call it from bytecode 200
	* libgst/xlat.c: Don't treat bytecode 200 as a special
	send, but as an all-of-its-own operation, call this
	function from the code generated in gen_dirty_block.
	* libgst/prims.def: Remove VMpr_CompiledBlock_blockCopy
	* libgst/jitpriv.h: Remove it from the internal functions
	* libgst/interp-jit.inl: Ditto
	* libgst/sym.c: Remove _gst_block_copy_symbol
	* libgst/sym.h: Ditto

2003-06-05  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: For non-clean blocks, store CompiledBlocks
	directly in the method.
	* libgst/prims.def: Implement #blockCopy: for CompiledBlocks.
	* libgst/interp-bc.inl: Open code #blockCopy: for CompiledBlocks.
	* libgst/xlat.c: Inline #blockCopy: for CompiledBlocks.

	* libgst/oop.c: Check for out of range _gst_mem.scan.queue_at
	while scanning, not in QUEUE_NEXT.

	* libgst/comp.h: Define constants for the possible value of
	CompiledMethod flags.
	* libgst/comp.c: Use them
	* libgst/opt.c: Use them
	* libgst/interp-bc.inl: Ditto
	* libgst/xlat.c: Ditto; rewrite the handling of shortcut
	CompiledMethods to use a switch statement.

2003-06-04  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Flag duplicate primitives or bad primitive
	numbers as errors.
	* libgst/genpr-parse.y: Start primitive numbers
	from 1.

2003-05-30  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lib.c: Remove logging mechanism
	* libgst/input.c: Ditto
	* libgst/input.h: Ditto

2003-05-30  Paolo Bonzini  <bonzini@gnu.org>

	Replace primitives with generic attributes.

	* libgst/comp.c: Walk through the attribute list in compile_method.
	Added _gst_make_attribute.  Return NULL from _gst_execute_statements
	if there was a compilation error.  Define the termination method
	before #methodsFor:.
	* libgst/comp.h: Declare this function
	* libgst/tree.c: Added _gst_make_attribute_list, and pretty printing
	of attributes
	* libgst/tree.h: Declare this function
	* libgst/dict.c: Moved _gst_resolve_primitive_name to inside
	prepare_primitive_numbers_map.  Added VMPrimitives as a 
	pool dictionary of Object, so make it a Dictionary and initialize
	it in init_smalltalk_dictionary.
	* libgst/dict.h: Removed _gst_resolve_primitive_name
	* libgst/gst-parse.y: Modified the grammar.  Adjust for the change
	to _gst_execute_statements, above.
	* libgst/lex.c: Removed PRIMITIVE_START, added '<' and '>' as
	separate tokens.
	* libgst/sym.c: Added _gst_primitive_symbol and its initializer
	* libgst/sym.h: Added _gst_primitive_symbol

2003-05-27  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.def: Add VMpr_Object_allOwners
	* libgst/dict.inl: Implement is_owner
	* libgst/dict.c: Terminate CallinProcesses when resuming
	from a snapshot.
	* libgst/interp.c: Made terminate_process extern, renamed
	to _gst_terminate_process.

2003-05-16  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.def: Add more C->String primitives

	* libgst/cint.c: Support long doubles and #cObjectPtr.
	* libgst/sym.h: Add _gst_long_double_symbol
	* libgst/sym.c: Add _gst_long_double_symbol
	* libgst/prims.def: Add long double access
	* libgst/callin.c: Add long double accessors
	* libgst/callin.h: Add long double accessors
	* libgst/gstpriv.h: Add long double accessors

2003-05-14  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/cint.c: Switch to libffi.  General reorganization.
	* libgst/cint.h: Remove _gst_lookup_function.
	* libgst/interp.c: Fix some printf formats
	* libgst/print.c: Fix some printf formats

2003-05-12  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Remove _gst_compiled_method_at
	and _gst_compiled_method_at_put (unused).
	* libgst/comp.h: Ditto.
	* libgst/dict.inl: Merge find_key and
	dictionary_association_at.

2003-05-10  Paolo Bonzini  <bonzini@gnu.org>

	* libgst all files: Use intptr_t, size_t, ptrdiff_t,
	time_t, int32_t, uint32_t more widely
	* libgst/gstpriv.h: Include stdintx.h

2003-05-09  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 2.1.2 released.

	* libgst/alloc.c: Rationalize inclusions
	* libgst/byte.c: Rationalize inclusions
	* libgst/callin.c: Rationalize inclusions
	* libgst/cint.c: Rationalize inclusions
	* libgst/comp.c: Rationalize inclusions
	* libgst/dict.c: Rationalize inclusions
	* libgst/dict.inl: Rationalize inclusions
	* libgst/events.c: Rationalize inclusions
	* libgst/gstpriv.h: Add more inclusions
	* libgst/heap.c: Rationalize inclusions
	* libgst/input.c: Rationalize inclusions
	* libgst/interp-bc.inl: Rationalize inclusions
	* libgst/interp.c: Rationalize inclusions
	* libgst/interp.inl: Rationalize inclusions
	* libgst/lex.c: Rationalize inclusions
	* libgst/lib.c: Rationalize inclusions
	* libgst/mpz.c: Rationalize inclusions
	* libgst/oop.c: Rationalize inclusions
	* libgst/opt.c: Rationalize inclusions
	* libgst/print.c: Rationalize inclusions
	* libgst/save.c: Rationalize inclusions
	* libgst/str.c: Rationalize inclusions
	* libgst/sym.c: Rationalize inclusions
	* libgst/sysdep.c: Rationalize inclusions
	* libgst/tree.c: Rationalize inclusions
	* libgst/xlat.c: Rationalize inclusions
	* libgst/comp.h: Rationalize inclusions
	* libgst/opt.h: Rationalize inclusions
	* libgst/interp.h: Rationalize inclusions

2003-05-06  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp.c: Define PROTECT_CURRENT_PROCESS_WITH
	and PROTECT_FROM_INTERRUPT_WITH.  Use them in
	parse_stream_with_protection
	* libgst/prims.def: Use them.

	* libgst/cint.h: Declare _gst_errno and _gst_set_errno
	* libgst/cint.c: Saved_errno -> _gst_errno, implement
	_gst_set_errno
	* libgst/prims.def: The VMpr_ObjectMemory_snapshot
	primitive can fail; use _gst_set_errno

	* libgst/save.c: Invoke hook after opening the file.

2003-04-28  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/input.c: Don't advance the pointer in a
	STREAM_STRING after EOF; don't unread an EOF as
	_gst_next_char will return an EOF again.
	* libgst/lex.c: Change the lexing functions to
	accept an int so that EOF and 255 are not confused.

2003-04-27  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/sysdep.c: Return ENOMEM properly under Win32.
	Separate detection of availability of a particular technique
	and reservation of memory.  find_heap_base renamed to
	anon_mmap_check.

2003-04-17  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 2.1.1 (stable) released.

	* libgst/sysdep.c: Allow MAP_NORESERVE even if MAP_ANON
	is not available.  Encapsulate opening /dev/zero into
	a macro which is used the same way when MAP_ANON is used
	and when it is not.

2003-04-16  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/genpr-parse.y: Add ATTRIBUTE_UNUSED attributes to
	the primitives' arguments.
	* libgst/input.c: Use newer function rl_completion_matches
	instead of completion_matches.
	* libgst/alloc.c: Fix for Cygwin, always #undef small
	* libgst/sysdep.c: Fix for Cygwin, include process.h
	and don't do setsid if HAVE_SPAWNL
	* libgst/lib.c: Don't load .stinit in regression
	testing mode, disable regression testing mode when
	loading .stpre.

2003-04-12  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 2.1 (stable) released.

2003-04-09  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp-bc.inl: EndExecution must FLUSH,
	not END (this broke the IA64).

2003-04-08  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp.inl: Add definitions to support
	broken inttypes.h like FreeBSD's.
	* libgst/sysdep.c: Move the declaration of the FD
	static variable before _gst_osmem_alloc.

2003-04-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Fix mismatch between sizeof argument
	and actual type.

2003-03-30  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lex.c: Strdup -> xstrdup
	* libgst/alloc.c: Define xstrdup
	* libgst/alloc.h: Define xstrdup
	* libgst/input.c: Strdup -> xstrdup
	* libgst/lex.c: Strdup -> xstrdup
	* libgst/lib.c: Strdup -> xstrdup
	* libgst/sysdep.c: Strdup -> xstrdup

2003-03-26  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/byte.c: Remove checks on availability of bytecode array.
	Make explicit calls to allocate bytecode array.
	* libgst/comp.c: Make explicit calls to allocate bytecode array.
	* libgst/opt.c: Likewise.

	* libgst/comp.c: Associate stack depth to each bytecode array.
	Fix bugs along the way.
	* libgst/byte.c: Add support for saving and restoring stack
	depth.
	* libgst/byte.h: Fix declarations.  Move stack depth modification
	macros here from comp.c.

	* libgst/comp.c: Count depth from 0, not from argCount+tempCount,
	and sum the number of arguments only at the end (because
	the tempCount might change if there are #to:do: loops!)
	* libgst/save.c: Check for file version <= VERSION_REQUIRED,
	not ==.

2003-03-23  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.def: Extract a loop invariant from
	VMpr_Behavior_someInstance

2003-03-21  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/sysdep.c: Added _gst_full_write
	* libgst/input.c: Use it instead of _gst_write
	* libgst/save.c: Use it instead of _gst_write

2003-03-19  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/sysdep.c: Always provide _gst_recv & _gst_send
	* libgst/sysdep.h: Always declare them
	* libgst/save.c: Include socketx.h

2003-03-15  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.inl: Fix initialization of word
	subclasses.

2003-03-14  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/sysdep.c: Make _gst_read and _gst_write
	abort on EFAULT
	* libgst/prims.def: Use them
	* libgst/input.c: Use them

2003-03-04  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lib.c: Load exception handling before VFS.
	* libgst/sysdep.c: Redisorganize _gst_open_pipe into
	separate functions.  Use spawnl and Win32 pipes if
	available.

2003-03-02  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/oop.c: Don't reset the heap_limit if the
	heap was grown.

2003-03-01  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/heap.c: Move system dependent stuff...
	* libgst/sysdep.c: ...here
	* libgst/sysdep.h: Make it public.

	* libgst/prims.def: Move enum with file operations...
	* libgst/interp.h: ...here.

	* libgst/prims.def: Define primitive for sockets.
	* libgst/sysdep.c: Define _gst_full_send.
	* libgst/sysdep.h: Declare _gst_full_send.

	* libgst/heap.c: Define routines for mmap/munmap.
	* libgst/heap.h: Declare them.
	* libgst/alloc.c: Use them.

2003-02-28  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/events.c: Include signalx.h.
	* libgst/heap.c: Include signalx.h.
	* libgst/interp.c: Include signalx.h.
	* libgst/sysdep.c: Include signalx.h.

2003-02-28  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/sysdep.c: Cook up a simple mechanism to disable
	and enable signals where the OS does not provide that (again,
	MinGW32).  Fix semicolons in DISABLE and ENABLE.  Don't block
	fatal errors.

2003-02-27  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/cint.c: Turn malloc to xmalloc
	* libgst/save.c: Turn malloc to xmalloc
	* libgst/sym.c: Turn free to xfree

	* libgst/alloc.c: Disable usage as system malloc under MinGW32.
	* libgst/sysdep.c: Include process.h if we have it (MinGW32)
	* libgst/events.c: Likewise
	* libgst/sysdep.c: Implement _gst_mem_protect
	* libgst/sysdep.h: Declare it and PROT_*
	* libgst/oop.c: Use it

2003-02-25  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/oop.c: Avoid out-of-memory while compacting
	* libgst/print.c: Tweak the precision for FloatE's,
	FloatD's and FloatQ's depending on float.h, except
	in regression testing mode.

2003-02-15  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/heap.c: Support !HAVE_SBRK
	* libgst/prims.def: Support !HAVE_USLEEP
	* libgst/sysdep.c: Use _beginthread under MinGW32 instead of
	CreateThread
	* libgst/interp.c: Use raise instead of kill
	* libgst/sysdep.c: Ditto
	* libgst/events.c: Ditto

2003-02-13  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gst.h: Tweak a little the definition of alloca
	* libgst/heap.c: Fix typos, add WIN32_LEAN_AND_MEAN
	* libgst/oop.c: Add cast to fix gcc 2.95 warning
	* libgst/prims.def: Use POP_N_OOPS to fix gcc 2.95 warning
	* libgst/save.c: Disable mmap-ing under WIN32
	* libgst/sysdep.c: Add WIN32_LEAN_AND_MEAN

2003-03-09  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp.c: Don't print C backtrace during
	compilation if SIGINT is received.

2003-02-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/heap.c: Fix brokenness of Win32 implementation.
	* libgst/alloc.c: Add a very basic logging mechanism.
	* libgst/interp.c: Add a very basic backtracing mechanism
	to the signal handlers.  Trap SIGILL when JIT-compiling.
	Fix mismatch between process operation of JIT compiler
	and bytecode interpreter.
	* libgst/print.c: Print FloatD and FloatQ objects with
	the correct letter for the exponent

2003-02-06  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/alloc.c: Abort on an evident double free (two
	frees of the same object without any free on the same
	page in the middle).
	* libgst/oop.c: Add notice about bad interaction between
	SIGSEGV trapping and valgrind.
	* libgst/events.c: Use pointer to tail's next pointer
	instead of pointer to tail.  Suggested by Carlos Moran.

2003-02-03  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/alloc.c: Allow one to free the NULL pointer
	liberally.
	* libgst/opt.c: Drop broken code.
	* libgst/opt.h: Adjust prototypes
	* libgst/xlat.c: Adjust users

2003-01-20  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Keep the returned value of a doit in
	the incubator until after the #afterEvaluation hook is
	completed.

2003-01-17  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp-jit.inl: Check for code not having been
	compiled yet moved before check for native_ip == 0

2003-01-16  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lib.c: While loading standard files disable
	_gst_regression_testing.

	* libgst/input.c: Define _gst_warningf and _gst_warningf_at
	* libgst/input.h: Declare them
	* libgst/gst-parse.y: Use them; don't trigger a warning
	when *defining* a method named #true, #false and the like

	* libgst/save.c: Never read past the end of the file

2003-01-12  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/sysdep.c: Make child process a session group
	leader

2003-01-09  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Fix bug in _gst_execute_statements

	* libgst/sym.c: Define _gst_pop_all_scopes
	* libgst/sym.h: Declare it
	* libgst/comp.c: Use it

2003-01-02  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gst-parse.y: Get rid of right recursion and
	shift/reduce conflicts.
	* libgst/tree.c: TREE_STATEMENT_LIST now a list node
	* libgst/tree.h: Adjust documentation
	* libgst/comp.c: Adjust functions that compile
	statement lists.

	* libgst/lib.c: Bump copyright year
	* libgst/interp-jit.inl: Cleanup #if 0 sections
	* libgst/prims.def: ValueAndResumeOnUnwind loses the
	cache_new_ip attribute.

2002-12-31  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.def: Always use PUSH_OOP to push the
	result in VMpr_CObject_at.  Thanks to David Forster.

2002-12-29  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/cint.c: Strdup the name of the function in
	_gst_define_cunc (it is freed when the call happens
	from Smalltalk).  Thanks to David Forster.

2002-12-27  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 2.0g released

	* libgst/prims.def: Fix ISO C99-ism
	* libgst/input.c: Fix compilation error when readline
	is not there

2002-12-19  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/oop.c: Don't print negative percentages
	* libgst/prims.def: Add ObjectMemory>>#abort primitive
	* libgst/interp-bc.inl: Fix single step mode
	* libgst/interp-jit.inl: Fix single step mode

2002-12-15  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/callin.c: Incubate everything sent through
	_gst_msg_sendf.

2002-12-12  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 2.0.10 released

	* libgst/input.c: Register the file name object in
	_gst_get_cur_file_name, unregister it in my_close
	* libgst/oop.c: Add more assertions
	* libgst/save.c: Add more assertions

2002-12-11  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gst-parse.y: New name of gst.y
	* libgst/tree.h: Adjust

	* libgst/genpr-scan.l: New file
	* libgst/genpr-parse.y: New file
	* libgst/genprims.h: New file
	* libgst/prims.def: Merge with prims.inl again, but with
	genprims' syntax
	* libgst/interp.c: Remove cruft for multiple inclusions
	of prims.def, we only include the generated prims.inl

2002-12-05  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 2.0.9 (stable) and 2.0f (development) released

	* libgst/interp.c: Add _gst_check_process_state
	* libgst/interp.h: Add _gst_check_process_state

	* libgst/interp.c: Do suspend_process correctly when
	the process is in the middle of the process list.

2002-12-04  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/alloc.c: Abort instead of asserting
	* libgst/save.c: Likewise

	* libgst/dict.c: Abort instead of calling _gst_debug
	* libgst/dict.inl: Likewise
	* libgst/gstpriv.h: Likewise
	* libgst/oop.c: Likewise
	* libgst/sym.c: Likewise
	* libgst/interp.c: Likewise
	* libgst/xlat.c: Likewise

	* libgst/prims.inl: Abort on a bootstrapping error
	* libgst/interp.c: Catch SIGABRT instead of SIGSEGV

2002-12-01  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/heap.c: Provide a fallback whenever
	MAP_NORESERVE is used.

2002-11-29  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gst.y: Fix a couple of shift/reduce conflicts

	* libgst/gstpriv.h: Min->MIN, max->MAX, abs->ABS
	* libgst/mpz.c: Adjusted
	* libgst/opt.c: Adjusted
	* libgst/oop.c: Adjusted
	* libgst/save.c: Adjusted

	* libgst/oop.c: Remove warning
	* libgst/prims.inl: Implement asynchronous call-out.
	* libgst/prims.def: Implement asynchronous call-out.

2002-11-19  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 2.0e released

	* libgst/oop.c: Add _gst_grey_oop_range
	* libgst/oop.h: Declare it
	* libgst/prims.inl: Check for EFAULT and abort if so.

2002-11-16  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/sysdep.c: Always do the F_SETOWN fcntl after F_SETFL
	for the benefit of FreeBSD (thanks to Danilo Fiorenzano).
	And always do the F_SETFL fcntl before FIOASYNC for the
	benefit of Cygwin.

2002-11-15  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 2.0.8 (stable) released

	* libgst/comp.c: Optionally make the method return the last value
	in _gst_compile_method, use that in _gst_execute_statements,
	don't free the trees in _gst_compile_method
	* libgst/gst.y: Adjust callers of _gst_compile_method and
	_gst_execute_statements, support ##(...) for compile-time-constants,
	free the trees here
	* libgst/tree.c: Remove parameter from _gst_free_tree
	* libgst/tree.h: Adjust _gst_free_tree

	* libgst/dict.c: Get rid of CFunctionDescs

2002-11-14  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.inl: New C callout primitive, removed
	methodOOP parameter from primitives
	* libgst/interp.c: Adjusted
	* libgst/interp.h: Adjusted
	* libgst/interp-bc.inl: Adjusted
	* libgst/interp-jit.inl: Adjusted
	* libgst/cint.c: Adjusted
	* libgst/cint.h: Adjusted

	* libgst/lib.c: Load additional core classes *before* the C interface
	since it now uses ValueHolder.

2002-11-13  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.inl: Define identity_dictionary_find_key
	* libgst/dict.c: Use it

	* libgst/prims.inl: Moved parts to interp.c and prims.def
	* libgst/prims.def: Created from prims.inl
	* libgst/interp.c: Added parts of prims.inl

2002-11-12  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.inl: Add VMpr_Semaphore_lock

2002-11-09  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp.c: Start a new process in
	_gst_prepare_execution_environment,
	implement _gst_nvmsg_send here, added suspend_process
	and terminate_process, refine detection of "No runnable
	process" condition
	* libgst/prims.inl: Handle the call-in chain
	* libgst/interp-bc.inl: New argument and return value for _gst_interpret
	* libgst/interp-jit.inl: New argument and return value for _gst_interpret
	* libgst/interp.h: Added _gst_nvmsg_send
	* libgst/comp.c: Use _gst_nvmsg_send to call #executeStatements
	* libgst/callin.c: Base everything on _gst_nvmsg_send
	* libgst/dict.c: Add DirectedMessage-related stuff and
	_gst_callin_process_class
	* libgst/dict.h: Likewise
	* libgst/lib.c: Load DirMessage.st early, and CallinProcess.st

	* libgst/alloc.c: Don't move reallocated objects that
	get smaller (code produced by the JIT is not position
	independent!)
	* libgst/xlat.c: Fix some bit-rot
	* libgst/opt.c: Fix off-by-one error in _gst_compute_stack_positions

2002-11-08  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/heap.c: Use MAP_NORESERVE if available.
	* libgst/alloc.c: Resort to mmap-ed areas once we cannot
	use sbrk anymore.

2002-11-06  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/oop.c: Unprotect freed pages, fix bug in removing
	pages from remembered table upon freeing.  Blox up and running
	with generational and incremental GC.
	* libgst/save.c: Use buffered I/O.

2002-11-05  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/input.c: Strdup in _gst_push_string_stream
	* libgst/callin.c: So we have to close the streams
	* libgst/comp.c: Here as well

	* libgst/alloc.c: Ensure a block has already been touched
	(written to) before doing free-list operations.  Otherwise,
	the SIGSEGV handler might allocate memory while the free-lists
	are not consistent.
	* libgst/oop.c: For #become:, ensure the two swapped objects are
	in the same generation.  Otherwise, references to the new-space
	object that used to point to the old-space object are not recorded
	in the remembered set.

2002-11-04  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 2.0e (development) released

2002-10-26  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/alloc.c: More hooks
	* libgst/oop.c: Use them

2002-10-25  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp-bc.inl: Fix an obscure re-entrancy bug
	in _gst_send_message_internal, which was commonly
	triggered by the new garbage collector in the ANSI test
	suite.

2002-10-23  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/oop.c: Put back support for growing the OOP table.

2002-10-22  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/sym.c: Add more consts
	* libgst/sym.h: Likewise
	* libgst/cint.c: Likewise
	* libgst/cint.h: Likewise
	* libgst/callin.c: Likewise
	* libgst/callin.h: Likewise
	* libgst/gstpub.h: Likewise

2002-10-22  Mike Castle  <dalgoda@ix.netcom.com>

	* libgst/callin.c: Fixes for Tcl 8.4.0 (add some consts)
	* libgst/callin.h: Fixes for Tcl 8.4.0 (add some consts)
	* libgst/dict.c: Fixes for Tcl 8.4.0 (add some consts)
	* libgst/dict.h: Fixes for Tcl 8.4.0 (add some consts)
	* libgst/gstpub.h: Fixes for Tcl 8.4.0 (add some consts)

2002-10-21  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/alloc.c: Collect statistics
	* libgst/dict.c: Add instance variables to ObjectMemory
	* libgst/oop.c: Collect statistics
	* libgst/oop.h: Declare functions to export statistics
	* libgst/prims.inl: Adjust for statistic collection

2002-10-17  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 2.0.7 (stable) released

	* libgst/alloc.c: Add some hooking abilities

	* libgst/oop.c: Big rewrite for switch to generational GC
	* libgst/oop.h: Likewise
	* libgst/oop.inl: Likewise
	* libgst/save.c: Likewise
	* libgst/print.c: Likewise (debugging functions)

	* libgst/gstpriv.h: Moved parts to oop.inl or oop.h, changed
	many flags for the new generational collector.

	* libgst/dict.c: Adjust for changes in variable names
	* libgst/prims.inl: Adjust for changes in variable names

       * libgst/gstpriv.h: define checks for !OPTIMIZE.
       * libgst/input.c: define readline_getc only if readline
       is used.
       * libgst/interp-bc.inl: fix syntax error for !OPTIMIZE.
       * libgst/lib.c: load FileDescr.st before ObjectMemory.

2002-10-15  Paolo Bonzini  <bonzini@gnu.org>

       * libgst/lib.c: Print "GNU Smalltalk ready" only before
       reading from stdin.  `verbose' --> _gst_verbose.
       * libgst/lib.h: Declare _gst_verbose.
       * libgst/comp.c: Conditionalize printing of stats and
       explanations on _gst_verbose and _gst_regression_testing.
       * libgst/comp.h: Remove `quiet' parameter to
       _gst_execute_statements.
       * libgst/gst.y: Caller adjusted.

2002-10-13  Paolo Bonzini  <bonzini@gnu.org>

       * libgst/interp.c: Include strspell.h.
       * libgst/prims.inl: Define VMpr_String_similarityTo.

2002-10-08  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/print.c: Don't segfault when printing a Metaclass
	that has no class yet.

2002-10-06  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/input.c: Add the period to the word-termination
	characters.

	* libgst/dict.c: Declare AbstractNamespace and
	BindingDictionary; support arbitrary number of instance
	variables in dictionaries
	* libgst/dict.h: Likewise
	* libgst/dict.inl: Likewise
	* libgst/lib.c: Load AbstNamespace.st and BindingDict.st

	* libgst/byte.h: Add LINE_NUMBER_BYTECODE; declared
	_gst_line_number
	* libgst/byte.c: Print it; added _gst_line_number
	* libgst/comp.c: Use _gst_line_number
	* libgst/gst.y: Track locations
	* libgst/lex.c: Track locations
	* libgst/input.h: Added _gst_get_location
	* libgst/input.c: Implemented it
	* libgst/tree.h: Added location field to trees
	* libgst/tree.c: Store locations in trees
	* libgst/interp-bc.c: Treat LINE_NUMBER_BYTECODE as nop
	* libgst/xlat.c: Treat LINE_NUMBER_BYTECODE as nop

2002-10-05  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/xlat.c: Set F_XLAT_REACHABLE in the method
	and block prolog.
	* libgst/oop.c: GC unused JITted code.

2002-10-02  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/heap.c: Use EFAULT as an addition to SIGSEGV instead
	of an alternative method to detect unmapped memory areas.
	* libgst/interp-bc.inl: Don't use [ a ... b ] initializers
	because Apple's gcc is actually an Objective C compiler.

2002-09-29  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/alloc.c: New file, from lib-src.
	* libgst/alloc.h: New file, from lib-src.

2002-09-28  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Added HomedAssociation and associated
	declarations
	* libgst/dict.h: Added _gst_homed_association_class
	* libgst/lib.c: Load it

	* libgst/gstpriv.h: Remove finalization and add ephemerons
	* libgst/oop.c: Likewise
	* libgst/prims.inl: Likewise
	* libgst/sym.c: Remove #finalize symbol and add #mourn
	* libgst/sym.h: Likewise

	* libgst/lib.c: Set line-based buffering for stdout in
	regression testing mode.

2002-09-26  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.inl: Simplify inst_var_at and inst_var_at_put
	* libgst/prims.inl: Inst_var_at_put now void, adjust caller.

2002-09-25  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gst.y: Better error recovery

2002-09-23  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.inl: Do memcpy to char * instead of to
	double * (because that does not solve double unalignment
	problems).
	* libgst/input.c: My_getc reads unsigned chars.

2002-09-19  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Added interruptLock variable to Process
	* libgst/interp.h: Added interruptLock field to gst_process
	* libgst/interp.c: Semaphore_new() accepts a parameter
	for the initial number of signals.  Create the interruptLock
	when a new Process is created.

2002-09-18  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp.c: The highest priority process was being
	put in the process list for priority 4 even if it did
	not belong there.

2002-09-13  Paolo Bonzini  <bonzini@gnu.org>

	*** Versions 2.0c (development) and 2.0.6 (stable) released

	* libgst/prims.inl: Allow specifying a class as the
	current namespace

2002-09-11  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lex.c: support :: As well as . to separate
	namespaces
	* libgst/gst.y: Do corresponding changes in the grammar
	as well as changes to support compile-time namespace
	resolution
	* libgst/dict.c: Allow specifying a class as a pool
	dictionary and create namespaces at bootstrap
	* libgst/sym.c: Extend VARIABLE_NODE treatment in
	_gst_find_variable to support compile-time namespace
	resolution
	* libgst/sym.h: _gst_find_variable accepts a tree_node
	* libgst/comp.c: Callers adjusted
	* libgst/tree.h: Split tree node type TREE_VARIABLE_LIST
	into TREE_VAR_DECL_LIST and TREE_VAR_ASSIGN_LIST
	* libgst/tree.c: Likewise

	* libgst/dict.c: Give interrupt state to Processes
	* libgst/interp.h: Likewise
	* libgst/interp.c: Use it
	* libgst/prims.inl: Implement interrupt-handling
	primitives

	* libgst/lib.c: Load RecursionLock.st, drop short names
	* libgst/dict.c: Give a name to Semaphores
	* libgst/interp.h: Likewise

	* libgst/sysdep.h: _gst_disable_interrupts and
	_gst_enable_interrupts hold their state internally
	* libgst/sysdep.c: Implement this
	* libgst/events.c: Callers adjusted
	* libgst/interp-bc.inl: Callers adjusted
	* libgst/interp-jit.inl: Callers adjusted
	* libgst/prims.inl: Callers adjusted
	* libgst/interp.c: Callers adjusted

2002-09-10  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Compute stack depth correctly in the
	presence of cascades.
	* libgst/oop.c: Add valgrind hooks after OOPs are swept,
	fix _gst_alloc_words (was not always converting size
	from words to bytes)

2002-09-09  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Pass flags to alloc_oop
	* libgst/interp.c: Pass flags to alloc_oop
	* libgst/oop.c: Pass flags to alloc_oop, check
	for opportunities to grow the OOP table in sweep_oop
	* libgst/oop.inl: Receive flags in alloc_oop, force a
	GC as soon as possible (instead of triggering it)
	in low-water conditions

	* libgst/print.c: Print subclasses of Association as
	Associations.
	* libgst/dict.h: Declared _gst_variable_binding_class
	* libgst/dict.c: Declared _gst_variable_binding_class,
	use NAMESPACE_AT_PUT
	* libgst/dict.inl: New function variable_binding_new
	and macro NAMESPACE_AT_PUT
	* libgst/sym.c: Use NAMESPACE_AT_PUT
	* libgst/lib.c: Load VarBinding.st

2002-09-05  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/xlat.c: Support push 8-bit value bytecodes
	* libgst/opt.c: Support push 8-bit value bytecodes
	* libgst/interp-bc.inl: Support push 8-bit value bytecodes
	* libgst/byte.c: Support push 8-bit value bytecodes
	* libgst/byte.h: Support push 8-bit value bytecodes
	* libgst/comp.c: Support push 8-bit value bytecodes

	* libgst/interp.c: Add the alwaysPreempt parameter
	to resume_process.  Callers and documentation adjusted.
	* libgst/interp-bc.inl: Support single step mode.
	* libgst/interp-jit.inl: Support single step mode.
	* libgst/prims.inl: Add single stepping primitive.

2002-08-21  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/oop.c: Walk the OOP table forwards in
	sweep_pooled_contexts.  Correct off-by-one error
	in _gst_oop_index_valid.
	* libgst/prims.inl: Added branch hits.  Fix bug
	where a too short replacement collection caused
	the String>>#replaceFrom:to:with:startingAt: primitive
	to succeed without making changes to the receiver.

2002-08-20  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/sysdep.c: Pass SIGCHLD to the signal handler
	for asynchronous file polling, as it might reveal a
	POLLHUP event.

2002-08-19  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Accept -1 for isPipe in
	_gst_set_file_stream_file
	* libgst/prims.inl: Try to lseek to the end of the
	file descriptor to check if it behaves like a pipe,
	and consider EINVAL the same as ESPIPE.  This hack
	makes FileDescriptor and FileStream consider /proc
	entries as pipes.

2002-08-18  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gst.y: Give an error message if a binding
	to an undeclared class is used.

2002-08-14  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 2.0.5 (stable) released

	* libgst/lib.c: Return `int' from _gst_init_smalltalk
	instead of exiting; give an error message if a
	non-existent file is given for -I.
	* libgst/gstpub.h: Adjust documentation and prototype
	* main.c: Adjust caller

2002-08-12  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 2.0b (development) released

2002-08-07  Paolo Bonzini  <bonzini@gnu.org>

	*** Versions 2.0a (development) and 2.0.4 (stable) released

2002-07-24  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.inl: Added missing `break' statement

2002-07-22  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lib.c: Don't load Browser.st

2002-07-17  Paolo Bonzini  <bonzini@gnu.org>
  
  	*** Version 2.0.3 released

2002-07-15  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/xlat.c: Don't do class checks on global variables
	(they refer to the associations!)

2002-07-11  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 2.0.2 released
	
2002-07-05  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Define _gst_object_copy instead of
	_gst_dictionary_copy
	* libgst/prims.inl: Define a fast VMpr_Object_shallowCopy

2002-07-04  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp.h: Define MCF_ flags
	* libgst/prims.inl: Define VMpr_BlockClosure_valueAndResumeOnUnwind
	and VMpr_ContextPart_continue
	* libgst/interp.c: Complicate unwind_context, unwind_method,
	and define unwind_to to implement #ensure: correctly in the
	presence of non-local returns.
	* libgst/interp-bc.inl: Use MCF_ flags
	* libgst/xlat.c: Use MCF_ flags
	
2002-07-02  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lex.c: Parse negative scaled decimal constants
	as negative; in general, parse them exactly without
	floating point errors.
	* libgst/prims.inl: Large-integer primitives pass when
	they receive LargeIntegerZero
	* libgst/mpz.c: Ensure the most significant limb of the
	gst_mpz objects is not zero
	* libgst/dict.c: Fix GC bug in _gst_grow_identity_dictionary

2002-06-25  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lib.c: Load FloatD.st/FloatE.st/FloatQ.st

	* libgst/lex.c: Parse floats as long doubles, distinguish
	FloatD/FloatE/FloatQ literals.
	* libgst/comp.c: Distinguish FloatD/FloatE/FloatQ trees
	* libgst/tree.c: Add TYPE parameter to _gst_make_float_constant
	* libgst/tree.h: Adjust prototype, define CONST_FLOATD/CONST_FLOATE
	CONST_FLOATQ
	* libgst/gst.y: Pass TYPE parameter to _gst_make_float_constant

	* libgst/cint.c: Use FloatD/FloatE/FloatQ
	* libgst/callin.c: Use FloatD/FloatE/FloatQ
	* libgst/dict.c: Declared FloatD/FloatE/FloatQ
	* libgst/dict.h: Declared FloatD/FloatE/FloatQ 
	* libgst/dict.inl: Declared functions to box and unbox FloatE's
	and FloatQ's

	* libgst/mpz.c: Defined _gst_mpz_get_ld
	* libgst/mpz.h: Declared _gst_mpz_get_ld 
	* libgst/prims.inl: Define primitives on FloatE/FloatQ
	* libgst/interp-bc.inl: Change open-coded math operations to use
	FloatD

2002-06-28  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 2.0.1 released
	
2002-06-27  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lib.c: Don't require the image directory to be world-writable.
	* libgst/xlat.c: Fixed embarrassing syntax error.
	
	* libgst/tree.c: Use %O.
	* libgst/sym.c: Likewise.
	* libgst/prims.inl: Likewise.
	* libgst/byte.c: Likewise.
	* libgst/comp.c: Likewise.
	* libgst/dict.c: Likewise.
	* libgst/dict.h: Likewise.
	* libgst/interp-bc.inl: Likewise.
	* libgst/interp.c: Likewise.
	* libgst/xlat.c: Likewise.

2002-06-26  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/oop.c: Remove printing functions.
	* libgst/oop.h: Likewise.
	* libgst/dict.c: Likewise.
	* libgst/dict.h: Likewise.
	* libgst/sym.c: Likewise.
	* libgst/sym.h: Likewise.
	* libgst/print.c: Move them here...
	* libgst/print.h: ... and here.
	* libgst/lib.c: Call _gst_init_snprintfv.

2002-06-25  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 2.0 released
	
2002-06-19  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Removed exceptionHandlers variable from
	the Process class.
	* libgst/lib.c: Search in the class namespace before
	looking in the class pools

2002-06-13  Paolo Bonzini  <bonzini@gnu.org>
  
  	* libgst/lib.c: reformat help message

2002-06-06  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.inl: Always define 32-bit and 64-bit
	int<->OOP conversion functions
	* libgst/cint.c: Caller fixed
	* libgst/prims.inl: Support 64-bit file offsets
	
	* libgst/interp-bc.inl: Added more branch prediction hints

2002-06-02  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/callin.c: Define _gst_set_c_object
	* libgst/callin.h: Declare _gst_set_c_object
	* libgst/gstpub.h: Define setCObject in the VMProxy struct
	
2002-05-30  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/save.c: Made some functions inline; remove amount
	of checks on wrong_endianness; store number of pointer
	instance variables in advance in the OOP if < 127.  A small
	improvement in image loading time, and an example of using
	F_COUNT (which will be used by GC in 2.1 to drop the
	recursive calls in the mark phase).

2002-05-30  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/save.c: Loop in the used part of the OOP table only
	(+15% average speedup on image loading time).
	* libgst/dict.c: Likewise
	* libgst/dict.h: Adapted prototype of 
	_gst_init_dictionary_on_image_load

	* libgst/lex.c: Use character literals for 1-char tokens
	* libgst/gst.y: Likewise

	* libgst/jitpriv.h: New name of internal.h
	* libgst/xlat.c: Include jitpriv.h
	* libgst/interp-jit.inl: Include jitpriv.h instead of internal.h
	* libgst/gstpriv.h: Don't include internal.h

2002-05-28  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Don't cache the VMPrimitives dictionary, it
	causes bugs.

2002-05-23  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.h: Changed _gst_invoke_init_block to
	_gst_invoke_hook.
	* libgst/comp.c: Trace exection of the hooks only if -E is
	specified; changed _gst_invoke_init_block to _gst_invoke_hook.
	* libgst/lib.c: Use _gst_invoke_hook
	* libgst/oop.c: Ditto
	* libgst/prims.inl: Ditto
	* libgst/save.c: Ditto
	
	* libgst/dict.c: Keep dictionary sizes a power of two
	and scramble the bits
	* libgst/dict.inl: Keep dictionary sizes a power of two
	and scramble the bits
	* libgst/prims.inl: Declare a primitive to scramble the bits
	of a SmallInteger
	* libgst/sym.h: Keep symbol table size a power of two
	* libgst/sym.c: Use a simpler hash and scramble its bits
	
2002-05-14  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/mpz.c: Fix multiple evaluation of arguments
	of BYTE_INVERT; work around misinterpretation of
	mpn_?shift documentation
	* libgst/oop.c: Hardcode printing of infinite and nan
	values in _gst_print_object, to avoid false regressions
	due to libc differences

2002-05-12  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Fire ObjectMemory events before
	and after evaluation in _gst_execute_statements
	* libgst/lib.h: Declared _gst_kernel_initialized
	* libgst/lib.c: Set _gst_kernel_initialized before
	invoking the #returnFromSnapshot event.

2002-05-11  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 1.96.6 released
	
2002-05-10  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/input.c: Fix spurious error from my_close
	when stdin is passed on the command line (via -)

2002-05-08  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/internal.h: _gst_internal_funcs now const
	* libgst/interp.c: Always mark thisContext (at worst,
	it is nil)
	* libgst/xlat.c: Include lightning.h, removed by
	mistake when switching to gstpriv.h; add const in
	dcd_send_special

2002-05-05  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gst.h: ObjSize now an OOP
	* libgst/dict.inl: Likewise
	* libgst/xlat.c: Likewise
	* libgst/save.c: Likewise
	* libgst/oop.c: Likewise
	* libgst/mpz.c: Likewise
	* libgst/interp.c: Likewise
	* libgst/dict.c: Likewise
	* libgst/comp.c: Likewise

2002-05-02  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gstpriv.h: Declare macros for branch prediction hints
	* libgst/interp-bc.inl: Use them
	* libgst/interp-jit.inl: Use them
	* libgst/interp.c: Use them
	* libgst/interp.inl: Use them
	* libgst/md-config.h: Use them
	* libgst/oop.c: Use them
	* libgst/oop.inl: Use them
	
	* libgst/oop.c: Allocate objects outside the main heap
	in _gst_alloc_obj
	* libgst/oop.h: Declare _gst_big_objects_threshold
	* libgst/prims.inl: Added primitives to tune threshold
	for in-heap allocation
	
	* libgst/oop.c: Modify calling convention for _gst_alloc_obj,
	in preparation for allocating outside the main heap
	* libgst/oop.h: Declaration adjusted.
	* libgst/dict.c: Callers adjusted.
	* libgst/oop.c: Callers adjusted.

	* libgst/dict.inl: Modify calling convention for
	instantiation functions, to account for the change to
	_gst_alloc_obj and in preparation for allocating outside
	the main heap.
	* libgst/interp.c: Callers adjusted.
	* libgst/comp.c: Callers adjusted.
	* libgst/callin.c: Callers adjusted.
	* libgst/sym.c: Callers adjusted.
	* libgst/dict.c: Callers adjusted.
	* libgst/prims.inl: Callers adjusted.

2002-05-01  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Move C...Size et al. into CSymbols,
	refer to CSymbols as to a pool dictionary of ByteArray,
	CObject, Float, Integer.  Drop class comments, they are
	not needed here.  Create a RegressionTesting global
	variable that suppresses more sources of variance.

2002-04-18  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Don't set writePtr and writeEnd
	for FileDescriptors in _gst_set_stream_file

2002-04-16  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.inl: Return NaN when transcendental
	functions fail.  Removed VMpr_LargeInteger_divide.
	
2002-04-14  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 1.96.5 released
	
2002-04-13  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp.c: Print a backtrace on SIGUSR1
	* libgst/oop.c: Gc_running -> _gst_gc_running
	* libgst/oop.h: Declare _gst_gc_running
	
2002-04-06  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp-bc.inl: Properly check for overflows on
	bitshifts (used to return 0 instead of 16r-80000000)
	* libgst/prims.inl: Likewise

2002-03-27  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/mpz.c: New file
	* libgst/mpz.h: New file
	* libgst/prims.inl: Implemented primitives for large integers
	
2002-03-25  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/md-config.h: Added cacheline definitions
	* libgst/interp.c: Added cacheline definitions
	* libgst/oop.c: Added cacheline definitions
	* libgst/xlat.c: Added cacheline definitions

	* libgst/interp.inl: Use inttypes.h rather than stdint.h

2002-03-21  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/events.c: Don't include sys/select.h, we don't need it
	* libgst/gstpub.h: Don't include sys/select.h, we don't need it
	* libgst/sysdep.c: Support HP/UX's FIOSSAIOSTAT and
	FIOSSAIOOWN ioctls to setup asynchronous I/O
	* libgst/input.c: Check for EINTR when reading from a file
	* libgst/prims.inl: Check for EINTR when reading from a file

	* libgst/lex.c: Skip _ inside numeric literals

2002-03-17  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lib.c: Updated list of files for virtual filesystem layer
	* libgst/prims.inl: Implement the PRIM_MK_TEMP file operation.

2002-03-16  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/input.h: Added _gst_push_stream_oop
	* libgst/input.c: Implement stream operations for
	arbitrary OOP's.
	* libgst/prims.inl: Remove checks for String-ness
	in compilation primitives.

2002-03-12  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 1.96.4 released
	
2002-03-10  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/oop.h: _gst_gc_flip -> _gst_scavenge,
	_gst_minor_gcflip -> _gst_minor_scavenge
	* libgst/oop.c: Likewise
	* libgst/oop.inl: Likewise
	* libgst/save.c: Likewise
	* libgst/prims.inl: Likewise
	* libgst/interp.c: Likewise

	* libgst/oop.c: GC flip -> scavenging
	
2002-02-28  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gst.h: Removed private stuff
	* libgst/gstpriv.h: Private stuff from gst.h + inclusion
	of all the other headers
	* byte.c: Include gstpriv.h
	* callin.c: Include gstpriv.h
	* cint.c: Include gstpriv.h
	* comp.c: Include gstpriv.h
	* dict.c: Include gstpriv.h
	* events.c: Include gstpriv.h
	* gst.tab.c: Include gstpriv.h
	* heap.c: Include gstpriv.h
	* input.c: Include gstpriv.h
	* interp.c: Include gstpriv.h
	* lex.c: Include gstpriv.h
	* lib.c: Include gstpriv.h
	* oop.c: Include gstpriv.h
	* opt.c: Include gstpriv.h
	* save.c: Include gstpriv.h
	* str.c: Include gstpriv.h
	* sym.c: Include gstpriv.h
	* sysdep.c: Include gstpriv.h
	* tree.c: Include gstpriv.h
	* xlat.c: Include gstpriv.h

2002-02-26  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/xlat.c: Fixed a code generation bug for {} array
	constructors (two consecutive updates of the stack pointer).
	
2002-02-26  Paolo Bonzini  <bonzini@gnu.org>

	Named primitives: interpreter changes
	-------------------------------------
	* libgst/prims.inl: Implement named primitives (vs. numbered)
	* libgst/interp.h: Reflect changes in the interface for named
	primitives
	* libgst/interp-bc.inl: Call the appropriate named primitive
	in MAYBE_PRIMITIVE
	* libgst/interp.c: Include prims.inl before interp-bc.inl or
	interp-jit.inl
	* libgst/internal.h: Include VMpr_BlockClosure_blockCopy
	in the internal functions
	* libgst/interp-jit.inl: Include VMpr_BlockClosure_blockCopy
	in the internal functions
	* libgst/xlat.c: Adapt to changes in the interface for named
	primitives

	Named primitives: compiler changes
	----------------------------------
	* libgst/gst.y: Declare primitive as type <sval>
	* libgst/tree.h: PrimitiveIndex -> primitiveName
	* libgst/tree.c: Likewise
	* libgst/dict.h: Declared _gst_resolve_primitive_name
	* libgst/dict.c: Added _gst_resolve_primitive_name and
	init_primitives_dictionary
	* libgst/comp.c: Use _gst_resolve_primitive_name

	Named primitives: image loading
	-------------------------------
	* libgst/dict.c: Added prepare_primitive_number_map, removed
	bit of init_runtime_objects to initialize the symbols and
	calling _gst_init_symbols instead.
	* libgst/sym.c: Added _gst_init_symbols, symbol_list not
	extern anymore
	* libgst/sym.h: Added _gst_init_symbols, symbol_list not
	extern anymore
	* libgst/comp.c: Added _gst_restore_primitive_number
	* libgst/comp.h: Declared _gst_restore_primitive_number
	
2002-02-26  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/callin.c: Implemented _gst_register_oop_array & co
	* libgst/callin.h: Declared _gst_register_oop_array & co
	* libgst/gstpub.h: Added registerOOPArray to the VMProxy
	* libgst/comp.c: Use pointers rather than indices to implement
	the literal vector, to be compatible with _gst_register_oop_array's
	conventions.  Use _gst_register_oop_array to register the
	literal vector, in init_compiler.
	* libgst/oop.c: Replaced mark_incubator_oops with a call to
	_gst_register_oop_array.

	* libgst/dict.c: Removed CFunctionDescs from the list of pool
	dictionaries for Object.

	* libgst/interp-bc.inl: Fixed a rare bug by invalidating
	last_primitive before exiting the interpreter.
	
2002-02-25  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/cint.c: Use AVL trees for the C function registry;
	get rid of _gst_init_cfunc_vec.
	* libgst/callin.c: Use red-black trees for the OOP registry;
	get rid of _gst_init_oopregistry.
	* libgst/lib.c: Get rid of _gst_init_oopregistry
	* libgst/callin.h: Get rid of _gst_init_oopregistry

	* libgst/dict.c: Register the Smalltalk dictionary in
	init_runtime_objects
	* libgst/comp.c: Keep _gst_this_class & co. into the registry.
	Got rid of _gst_mark_compile_context.
	* libgst/comp.h: Removed _gst_mark_compile_context.
	* libgst/events.c: Removed _gst_mark_events_semaphores, use
	the registry instead.
	* libgst/events.h: Removed _gst_mark_events_semaphores
	* libgst/interp.c: Don't call _gst_mark_events_semaphores
	* libgst/oop.c: Remove the hooks in mark_oops that have been
	replaced by the registry (now that it is a tree it is also
	faster)

	* libgst/interp.h: Declared _gst_async_signal_and_unregister
	* libgst/gstpub.h: Declared asyncSignalAndUnregister in
	the VMProxy
	* libgst/interp.c: Implemented _gst_async_signal_and_unregister
	* libgst/interp-bc.inl: Added glue for _gst_async_signal_and_unregister
	* libgst/interp-jit.inl: Added glue for _gst_async_signal_and_unregister
	
2002-02-23  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lex.c: Document the functions and variables
	* libgst/lex.h: Likewise
	* libgst/input.c: Likewise
	* libgst/input.h: Likewise
	* libgst/sym.c: Likewise
	* libgst/sym.h: Likewise
	* libgst/sysdep.c: Likewise
	* libgst/sysdep.h: Likewise

	* libgst/sym.c: Allow _ for variable names in the bootstrapping
	declarations.
	
2002-02-22  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/oop.c: Remove the routines to disable the GC
	* libgst/oop.h: Remove the routines to disable the GC
	* libgst/save.c: Remove the calls to disable the GC since
	the variable was never checked

	* libgst/oop.c: Document the functions and variables
	* libgst/oop.h: Likewise
	* libgst/oop.inl: Likewise

2002-02-21  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Document the functions and variables
	* libgst/comp.inl: Likewise
	* libgst/byte.c: Likewise
	* libgst/byte.h: Likewise
	* libgst/dict.inl: Likewise
	* libgst/dict.c: Likewise
	* libgst/dict.h: Likewise

2002-02-20  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Document the functions and variables
	* libgst/comp.h: Likewise
	* libgst/input.c: Flush stdout after printing the prompt,
	if readline is not used.

2002-02-19  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/callin.c: Remove conditional on PICKY_VA_ARG,
	ANSI says it should really be picky (i.e. not accept
	a char type)
	
	* libgst/interp.inl: Try to use long long or intmax_t
	to check overflow on multiplication

	* libgst/interp-jit.inl: When refreshing the native IPs,
	special case the termination method so that its native
	instruction pointer is the special code to yield control
	back to _gst_interpret.

	* libgst/interp.h: Document the functions and variables
	* libgst/interp-bc.inl: Likewise
	* libgst/interp-jit.inl: Likewise
	* libgst/prims.inl: Likewise
	* libgst/opt.c: Likewise
	* libgst/opt.h: Likewise
	* libgst/callin.c: Likewise
	* libgst/callin.h: Likewise
	* libgst/cint.c: Likewise
	* libgst/cint.h: Likewise

2002-02-16  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp.c: Document the functions and variables

2002-02-15  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/save.c: Document the functions and variables
	* libgst/save.h: Likewise
	* libgst/str.c: Likewise
	* libgst/str.h: Likewise
	* libgst/events.c: Likewise
	* libgst/events.h: Likewise
	* libgst/tree.c: Likewise
	* libgst/tree.h: Likewise
	* libgst/heap.c: Likewise
	* libgst/heap.h: Likewise
	* libgst/lib.c: Likewise
	* libgst/lib.h: Likewise
	* libgst/gst.h: Likewise
	* libgst/gstpub.h: Likewise
	
	* libgst/byte.h: Remove leading double underscores from the guard
	* libgst/callin.h: Likewise
	* libgst/cint.h: Likewise
	* libgst/comp.h: Likewise
	* libgst/dict.h: Likewise
	* libgst/events.h: Likewise
	* libgst/gst.h: Likewise
	* libgst/gst.tab.h: Likewise
	* libgst/gstpub.h: Likewise
	* libgst/heap.h: Likewise
	* libgst/input.h: Likewise
	* libgst/internal.h: Likewise
	* libgst/interp.h: Likewise
	* libgst/lex.h: Likewise
	* libgst/lib.h: Likewise
	* libgst/md-config.h: Likewise
	* libgst/memzero.h: Likewise
	* libgst/oop.h: Likewise
	* libgst/opt.h: Likewise
	* libgst/save.h: Likewise
	* libgst/str.h: Likewise
	* libgst/sym.h: Likewise
	* libgst/sysdep.h: Likewise
	* libgst/tree.h: Likewise
	* libgst/xlat.h: Likewise
	
	* libgst/comp.inl: Remove the useless guard
	* libgst/dict.inl: Likewise
	* libgst/interp.inl: Likewise
	* libgst/oop.inl: Likewise

2002-02-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lib.c: Show only the last copyright year.
	
	* libgst/events.c: Major reengineering to avoid race
	conditions and dangling pointers... gee, how bad the
	code was before this! :-(
	* libgst/sysdep.c: To avoid cluttering the straces,
	don't set the same signal handlers as the last time
	in _gst_set_file_interrupt
	* libgst/interp-bc.inl: Protect interrupts while
	accessing async_queue_index (even though it is volatile)
	* libgst/interp-jit.inl: Likewise

2002-01-29  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 1.96.3 released.

	* libgst/opt.c: Convert arguments to qsort and bsearch
	to accept two void *'s.
	* libgst/input.c: Likewise

2002-01-23  Paolo Bonzini  <bonzini@gnu.org>

	* main.c: Converted to ANSI C and to the GNU
	coding standards
	* libgst/byte.c: Likewise
	* libgst/callin.c: Likewise
	* libgst/cint.c: Likewise
	* libgst/comp.c: Likewise
	* libgst/dict.c: Likewise
	* libgst/events.c: Likewise
	* libgst/gst.tab.c: Likewise
	* libgst/heap.c: Likewise
	* libgst/input.c: Likewise
	* libgst/interp.c: Likewise
	* libgst/lex.c: Likewise
	* libgst/lib.c: Likewise
	* libgst/oop.c: Likewise
	* libgst/opt.c: Likewise
	* libgst/save.c: Likewise
	* libgst/str.c: Likewise
	* libgst/sym.c: Likewise
	* libgst/sysdep.c: Likewise
	* libgst/tree.c: Likewise
	* libgst/xlat.c: Likewise
	* libgst/byte.h: Likewise
	* libgst/callin.h: Likewise
	* libgst/cint.h: Likewise
	* libgst/comp.h: Likewise
	* libgst/dict.h: Likewise
	* libgst/events.h: Likewise
	* libgst/gst.h: Likewise
	* libgst/gst.tab.h: Likewise
	* libgst/gstpub.h: Likewise
	* libgst/heap.h: Likewise
	* libgst/input.h: Likewise
	* libgst/internal.h: Likewise
	* libgst/interp.h: Likewise
	* libgst/lex.h: Likewise
	* libgst/lib.h: Likewise
	* libgst/md-config.h: Likewise
	* libgst/memzero.h: Likewise
	* libgst/oop.h: Likewise
	* libgst/opt.h: Likewise
	* libgst/save.h: Likewise
	* libgst/str.h: Likewise
	* libgst/sym.h: Likewise
	* libgst/sysdep.h: Likewise
	* libgst/tree.h: Likewise
	* libgst/xlat.h: Likewise
	* libgst/comp.inl: Likewise
	* libgst/dict.inl: Likewise
	* libgst/interp-bc.inl: Likewise
	* libgst/interp-jit.inl: Likewise
	* libgst/interp.inl: Likewise
	* libgst/oop.inl: Likewise
	* libgst/prims.inl: Likewise
	
2002-01-22  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gst.y: Signal a warning if self, super, true, false,
	nil, or thisContext are sent.  General reformatting of the
	source code.

2002-01-18  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Removed initialization blocks

2002-01-17  Nigel Williams  <nigelw@wizardis.com.au>

	* libgst/dict.c: Added atEnd variable to FileDescriptor
	* libgst/prims.inl: Provide a primitive to check if a
	descriptor is a pipe or a file.

	* libgst/dict.c: Added timeSlice variable to ProcessorScheduler
	* libgst/events.c: Pass a third parameter to signalAfter
	* libgst/interp-bc.inl: Call setPreemptionTimer once the timer
	has been fired and acknowledged
	* libgst/interp-jit.inl: Call setPreemptionTimer once the timer
	has been fired and acknowledged
	* libgst/interp.c: New functions related to preemptive
	multitasking
	* libgst/interp.h: Added timeSlice variable to ProcessorScheduler
	* libgst/sysdep.h: Added support for process-time timers (like
	ITIMER_VIRTUAL)
	* libgst/sysdep.c: Added support for process-time timers (like
	ITIMER_VIRTUAL)
	
2002-01-15  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lib.c: Ensure that the image path is the directory
	from which we loaded the image, rather than the default image
	path.

2002-01-04  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 1.96.2 released
	
2002-01-02  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Add the Source class variable to the Random
	class.
	* libgst/input.c: Don't use readline unless stdin is a TTY.
	* libgst/lib.c: Changed banner to "GNU Smalltalk ready"
	(lowercase r)

2001-12-12  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/events.c: Poll until there are no pending events

2001-11-20  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 1.96.1 released
	
2001-11-13  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gst.y: Implement #(true false nil) as per the ANSI
	standard.

2001-10-24  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/sysdep.c: Define O_ASYNC as FASYNC if not found.

2001-10-17  David Forster  <dforste@qwest.net>

	* libgst/cint.c: Add uInt and uLong support for C interface.
	Change longType return to use fromCLong.
	* libgst/sym.c: Add uIntSymbol and uLongSymbol.

2001-10-16  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 1.95.5 released.
	
	* libgst/lib.c: Observe quietExecution when loading
	.stinit and .stpre.

2001-10-06  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lib.c: Fixed bugs after applying the two
	patches below.
	
2001-10-06  Nigel Williams  <nigelw@elder-gods.net>

	* libgst/lib.c: Show error message if file not found
	
2001-08-28  Carlo Dapor  <catull_us@yahoo.com>

	* libgst/lex.c: Reset floating point exception mask under FreeBSD.
	* libgst/lib.c: Switch to getopt_long for parsing long command line
	options.
	
2001-07-14  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gst.h: Gee, what a hiatus!  Fixed for C++.
	* libgst/gstpub.h: Likewise
	
2001-06-16  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp.h: Defined PRIM_CHECK_INTERRUPT
	* libgst/prims.inl: Added PRIM_CHECK_INTERRUPT
	where required
	* libgst/xlat.c: EmitInterruptCheck called from
	emitPrimitive only if PRIM_CHECK_INTERRUPT
	
2001-06-13  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/xlat.c: Create the IPMap when translating.
	Defined mapVirtualIP.  Store the IP at every possible
	synchronization point (emitInterruptCheck).
	* libgst/xlat.h: Declared mapVirtualIP.

	* libgst/str.c: Declared addBufData
	* libgst/str.h: Defined addBufData
	
	* libgst/xlat.c: Generate an interrupt check as part of
	the prolog rather than of the return bytecodes.
	
2001-06-12  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp-jit.inl: Defined refreshNativeIPs.
	* libgst/interp.c: ReturnIP --> nativeIP
	* libgst/interp.h: ReturnIP --> nativeIP
	* libgst/dict.c: ReturnIP --> nativeIP
	* libgst/save.c: Reset a context's nativeIP upon image load.
	
2001-06-08  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/sysdep.c: Open the slave pty before forking
	
2001-06-06  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/md-config.h: Define BRANCH_REGISTER for every
	architecture
	* libgst/interp-bc.inl: Put the prefetched address into
	a branch register.

	* libgst/dict.c: Include sysdep.h
	* libgst/input.c: Removed unused variable in pushUNIXFile
	* libgst/prims.inl: Removed unused variable in primitive 254
	* libgst/sysdep.h: Declared fullWrite
	
2001-06-05  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/xlat.c: GetMethodBase became initTranslator
	* libgst/xlat.h: Likewise
	* libgst/interp.c: Got rid of the nativeBase
	* libgst/interp-jit.inl: Got rid of the nativeBase

	* libgst/sysdep.c: Set the CLOEXEC flag in openFile
	
2001-06-01  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/events.c: Use poll(2) instead of select(2),
	I am told it is more scalable.
	* libgst/input.c: Likewise, for coherency.
	
2001-05-26  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/sysdep.c: Use ptys to create a pipe; when
	setting file interrupt with SIOCSGRP and FIOASYNC,
	check that both ioctls succeed.

2001-05-24  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp.c: Make unwindMethod return whether
	the return was successful
	* libgst/interp-bc.inl: Send #badReturnError if
	return from method was unsuccessful
	* libgst/xlat.c: Likewise

	* libgst/interp-jit.inl: Added a comment re. the only
	serious bug remaining.

2001-05-23  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/heap.c: _WIN32 --> WIN32
	* libgst/gst.h: Define WIN32 if __CYGWIN__ or __CYGWIN32__
	* libgst/sysdep.c: _WIN32 --> WIN32

2001-05-22  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/xlat.c: Added support for inlined primitives
	* libgst/prims.inl: Marked a few primitives as inlined
	* libgst/dict.inl: Added accessors for the ISP_ISWORDS
	bit.
	
2001-05-20  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lib.c: Remove calls to moncontrol; will be
	replaced by new profiling stuff.
	* libgst/prims.inl: Temporarily embed the moncontrol
	primitive into #if 0.

2001-05-17  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Recycle existing std{in,out,err}.
	* libgst/input.c: Wait for a character to be available
	before returning to Readline.
	* libgst/prims.inl: Reset errno to 0 after calling
	lseek.
	
2001-05-15  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp-jit.inl: In sendMessageInternal force
	a call to getNativeCode upon a cache miss
	
2001-05-11  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/xlat.c: Fixes for PowerPC (sizeof(jit_insn) > 1)
	
2001-05-04  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/cint.c: Support selfSmalltalk and variadicSmalltalk
	as additional parameter types
	* libgst/sym.c: Defined selfSmalltalkSymbol and
	variadicSmalltalkSymbol
	* libgst/sym.h: Declared selfSmalltalkSymbol and
	variadicSmalltalkSymbol
	
2001-04-30  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.inl: Fixed buffer overflows involving
	oopVec.
	
2001-04-28  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/sysdep.h: Fixed isFinite, it reported -2.0 as
	infinite!
	
	* libgst/callin.h: Declared basicSize
	* libgst/callin.c: Defined basicSize
	* libgst/gstpub.h: Added basicSize to the InterpreterProxy
	
2001-04-23  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp.c: Extrapolated a part of it into events.c,
	include events.h
	* libgst/prims.inl: Turn some primitives into calls to
	functions in events.c
	* libgst/events.c: New file
	* libgst/events.h: New file

	* libgst/interp.h: Declared syncWait
	* libgst/interp.c: Defined syncWait from primitive 86's code
	* libgst/prims.inl: Primitive 86 now calls syncWait
	* libgst/gstpub.h: Declared syncWait in the interpreterProxy
	* libgst/callin.c: Likewise

	* libgst/sysdep.c: Use socketpair to create a pipe
	
2001-04-16  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.h: Declared fileDescriptorClass
	* libgst/dict.c: Declared fileDescriptorClass
	* libgst/lib.c: Load FileDescr.st

	* libgst/opt.c: fix incorrect peephole optimization: Of 
	two equal `pop/store into instance variable of new stack top'
	bytecodes, the second became a `duplicate stack top' bytecode

2001-04-15  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/callin.c: Use incAddOOP everywhere instead of
	registerOOP.  Added objectAlloc to the interpreterProxy
	* libgst/callin.h: Declared objectAlloc in the interpreterProxy
	* libgst/cint.c: InvokeCFunction now includes an incSavePointer
	and incRestorePointer pair.
	* libgst/gst.h: Make incAddOOP a single statement instead
	of a C block.
	
	* libgst/cint.c: In pushSmalltalkObj, use the incubator rather
	than the registry.
	* libgst/cint.h: Removed declaration of enableGC, since the above
	change left it unused.
	* libgst/prims.inl: Removed primitive 264 (#enableGC:)
	
2001-04-02  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Declared objectMemoryClass
	* libgst/dict.h: Declared objectMemoryClass
	* libgst/lib.c: Load ObjMemory.st, not initialize.st
	* libgst/save.c: Raise ObjectMemory events
	* libgst/comp.c: Raise ObjectMemory events
	* libgst/oop.c: Raise ObjectMemory events
	* libgst/prims.inl: Raise ObjectMemory events
	
2001-03-31  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/callin.c: Implemented byteArrayToOOP and OOPToByteArray
	* libgst/gstpub.h: Declared byteArrayToOOP and OOPToByteArray in
	the VMProxy.
	* libgst/sysdep.c: Removed code to set the LANG environment
	variable on Win32 systems.
	
2001-03-28  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Added an `access' parameter to setFileStreamFile
	* libgst/prims.inl: Pass the `access' parameter to setFileStreamFile
	from primitive 254
	
2001-03-20  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Set up FileStream for new buffering scheme,
	and updated setFileStreamFile.
	* libgst/prims.inl: Implemented primitive 254 for new buffering
	scheme.  Incorporated primitives 247/248 (file-in) into 254.
	
2001-03-17  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/input.c: Implemented pushUNIXFile & co. in terms
	of file descriptors.
	* libgst/prims.inl: Implement FileStream in terms of file
	descriptors.
	* libgst/save.c: Use file descriptors.
	* libgst/sysdep.c: Modified openFile/openPipe to use
	file descriptors.
	
2001-03-05  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Bindings are simple oopConsts now.
	* libgst/tree.c: Resolve bindings as oopConsts.
	* libgst/tree.h: Removed bindingConst.
	* libgst/gst.y: Raise an error on an invalid binding.

	* libgst/comp.c: initCompiler is now public.
	* libgst/comp.h: initCompiler is now public.
	* libgst/lib.c: Call initCompiler.

2001-03-01  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/md-config.h: Fixed typo in register allocation
	for the SPARC.

2001-03-01  Dirk Sondermann <d.sondermann@freenet.de>

	* libgst/md-config.h: Disable register allocation on the
	SPARC (possibly temporary change).
	
2001-02-23  Paolo Bonzini  <bonzini@gnu.org>

	*** Released version 1.95.3

2001-02-19  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp.h: Declare sendMethod.
	* libgst/interp.c: Added sendMethod to list of routines
	implemented by plug-ins.
	* libgst/interp-bc.inl: Added sendMethod.
	* libgst/interp-jit.inl: Added sendMethod.
	* libgst/prims.inl: Support sending methods in the
	#perform: and #perform:withArguments: primitive.

	* libgst/comp.c: Add `install' parameter to compileMethod;
	set latestCompiledMethod in compileMethod; use sendMethod
	in executeStatements.
	* libgst/gst.y: Pass `install' parameter to compileMethod
	
2001-02-17  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/input.c: Made from complete.c and part of lex.c
	* libgst/input.h: Made from complete.h and part of lex.h
	* libgst/gst.y: Include input.h
	* libgst/byte.c: Include input.h instead of lex.h
	* libgst/cint.c: Ditto
	* libgst/comp.c: Ditto
	* libgst/dict.c: Ditto
	* libgst/heap.c: Ditto
	* libgst/input.c: Ditto
	* libgst/interp.c: Ditto
	* libgst/lex.c: Ditto
	* libgst/lib.c: Ditto
	* libgst/oop.c: Ditto
	* libgst/opt.c: Ditto
	* libgst/sym.c: Ditto
	* libgst/tree.c: Ditto

	* libgst/comp.c: Removed emacsProcess from here
	* libgst/tree.c: Removed hadError from here
	* libgst/input.c: Moved emacsProcess and hadError here
	
	* libgst/comp.h: Removed emacsProcess from here
	* libgst/tree.h: Removed hadError from here
	* libgst/input.h: Moved emacsProcess and hadError here

2001-02-17  Dirk Sondermann <d.sondermann@freenet.de>

	* libgst/heap.c: Fixed for Solaris
	
2001-02-16  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/complete.c: New file
	* libgst/complete.h: New file
	* libgst/lex.c: Moved initializeReadline to readline.c
	* libgst/lib.c: Call initializeReadline after we loaded the
	image, because addAllSymbolCompletions needs the full symbol table.
	* libgst/sym.c: Call addSymbolCompletion in internCountedString,
	added addAllSymbolCompletions.
	* libgst/sym.h: Declared addAllSymbolCompletions
	
2001-02-15  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/cint.c: Made invokeCRoutine return whether the
	call-out was successful.
	* libgst/cint.h: Made invokeCRoutine return a boolean.
	* libgst/prims.inl: On invalid C call-outs, primitive 255 fails.
	
2001-02-14  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.inl: In primitive 255 (C call-out) check
	that we were not called from the at-cache.
	
2001-02-13  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Keep dictionaries no more than 75% full,
	* libgst/dict.h: Ditto

	* libgst/dict.c: Keep dictionary sizes prime (new function
	newNumFields).

2001-02-12  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gst.h: Moved F_FINALIZE into the runtime flags
	(not preserved between the time an image is saved and
	the time it is loaded)
	
2001-02-06  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lex.c: PushReadlineString became pushStdinString,
	and calls pushUNIXFile if emacsProcess is true or readline
	is not available
	* libgst/lex.h: Declare pushStdinString
	* libgst/lib.c: Instead of using #ifdef to decide between
	pushReadlineString or pushUNIXFile, use pushStdinString.
	
2001-02-02  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/callin.c: Added idToOOP/OOPToId, declaration of
	interpreterProxy
	* libgst/gstpub.h: Declared idToOOP/OOPToId, VMProxyStruct
	* libgst/callin.h: Moved old contents of gstpub.h here

	* libgst/lib.c: Don't call gst_dld_init
	* libgst/cint.c: Don't call initUserCFuncs; merged with
	dld_gst.c.  In gst_dld_open automatically call gst_initModule
	for the shared library; and always use libltdl.
	* libgst/cfuncs.c: Removed.
	* libgst/dld*: Removed.
	* libgst/cint.c: Search the cFuncInfo array backwards,
	so that new definitions override the old ones.
	
2001-01-31  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/cint.c: Declared a wrapper around opendir, which
	returns ENOSYS under Linux!  Also declared isExecutable
	* libgst/lib.c: Load OtherArrays.st
	* libgst/sysdep.h: Declared fileIsExecutable
	* libgst/sysdep.c: Defined fileIsExecutable
	
2001-01-31  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Compile bindingConsts.
	* libgst/gst.y: Added #{...} literals
	* libgst/sym.c: Defined findVariableBinding
	* libgst/sym.h: Declared findVariableBinding
	* libgst/tree.c: Defined makeBindingConstant
	* libgst/tree.h: Declared makeBindingConstant and bindingConst

2001-01-30  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Define KernelFileSystemPath in
	initDictionaryOnImageLoad, and KernelFilePath in
	initDictionary

2001-01-30  Paolo Bonzini  <bonzini@gnu.org>

	*** Released version 1.95.1
	
2001-01-16  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp-bc.inl: Define different optimization levels
	depending on REG_AVAILABILITY.
	* libgst/dict.inl: Include md-config.h instead of register.h
	* libgst/interp.c: Include md-config.h instead of register.h
	* libgst/md-config.h: New name of register.h

2001-01-14  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Use incubator in makeBlockClosure.
	* libgst/oop.inl: IsObjAddr returns false if the address lies beyond
	the allocPtr (used to be beyond the maxPtr)

2001-01-12  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp-bc.inl: Fixed pipelining bugs; added more caching
	opportunities

2001-01-09  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp-bc.inl: Implementation of pipelining
	* libgst/interp.c: Defined and explained PIPELINING

2001-01-08  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.inl: Added cast to arrayNew to work on 64-bit machines.
	* libgst/gst.h: Removed warning for 64-bit machines.
	* libgst/interp.c: Fixed prepareContext to work on 64-bit machines
	(num is now a long).
	* libgst/oop.c: Make data spaces twice as big on 64-bit machines.
	* libgst/oop.h: Make data spaces twice as big on 64-bit machines.
	* libgst/register.h: Removed warning for unsupported architectures,
	was much more a burden than I had expected.

2000-12-16  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/opt.c: Finished first draft of type inferencing.
	* libgst/xlat.c: Adapted to use opt.c; nothing was broken for
	disabled type inferencing.

2000-12-05  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/heap.c: Moved the process of guessing the heap base from
	configure.in to here.
	* libgst/sysdep.h: Declared SigHandler
	* libgst/sysdep.c: Made setSignalHandler return the previous signal
	handler.

2000-11-01  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lib.c: Changed bug reporting address

2000-10-14  GertJan Kersten (GertJan.Kersten@bolesian.nl)

	* libgst/cint.c: Fix brokenness in Cygwin's stat and chdir
	(which set errno even if the function succeeds).

2000-09-12  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/opt.c: Started implementation of type inferencing
	(have basic block detection now).  Finally succeded in
	passing Physics yesterday.

2000-09-10  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp.h: Added declarations for primitive attributes. 
	* libgst/prims.inl: Added primitive attributes.
	* libgst/xlat.c: Use primitive attributes in emitPrimitive.

2000-09-09  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/xlat.c: Added discardNativeCode and modified other
	function to use the `discarded' list.
	* libgst/xlat.h: Added declaration for discardNativeCode.
	* libgst/dict.c: In identityDictionaryAtPut, return the
	old value associated to the key.
	* libgst/comp.c: Include xlat.h; call discardNativeCode on
	the old method if a method is replacing another.
	* libgst/prims.inl: Primitive 90, instead of returning the
	native code for a method, discards the method (completely
	different semantics -- but the old one had no use since
	the Smalltalk program had no interesting use of the result).

2000-09-09  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/byte.c: Modified bytecode 134 for pop-into-array
	* libgst/byte.h: Modified bytecode 134 for pop-into-array
	* libgst/interp-bc.inl: Modified bytecode 134 for pop-into-array
	* libgst/opt.c: Modified computeStackPositions for pop-into-array
	* libgst/xlat.c: Modified bytecode 134 for pop-into-array,
	added gen_popIntoArray

	* libgst/comp.c: Added compileArrayConstructor and modified
	according to the changes to tree.c below
	* libgst/lex.c: Recognize { and }
	* libgst/gst.y: Recognize { ... } syntax
	* libgst/tree.c: Removed charConst, symbolConst -> oopConst,
	implemented makeArrayConstructor
	* libgst/tree.h: Declared makeArrayConstructor, added
	arrayConstructorType, removed charConst, symbolConst -> oopConst

2000-09-08  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp.c: Method cache is no longer static; moved
	MethodCacheEntry declaration to interp.h.  Also found bug
	in lookupMethod which prevented the method cache from being
	fully exploited (startingClassOOP was set to the methodClass).
	* libgst/interp.h: Declared MethodCacheEntry
	* libgst/interp.inl: Defined checkSendCorrectness
	* libgst/prims.inl: Used checkSendCorrectness

	* libgst/xlat.c: Included compilation of == into gen_intComparison
	(now called gen_binaryBool); renamed gen_intOperation to
	gen_binaryInt and TREE_ARIT_* to TREE_BINARY_*

2000-09-07  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 1.8.3 released

	* libgst/dict.c: Removed ByteMemory and WordMemory declarations.
	* libgst/dict.h: Removed ByteMemory and WordMemory declarations.
	* libgst/lib.c: Don't load ByteMemory and WordMemory definitions.
	* libgst/prims.inl: Removed ByteMemory primitives.

2000-09-07  Nigel Williams  <nigelw@wizardis.com.au>

	* libgst/cint.c: Allow to pass nil for stringOut, byteArray and
	byteArrayOut too.

2000-09-01  Nigel Williams  <nigelw@wizardis.com.au>

	* libgst/prims.inl: Corrected class check for primitive 203/204.

2000-08-15  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/opt.c: Added stub implementation of inferSmallIntegerOps.
	* libgst/opt.h: Declare inferSmallIntegerOps and the constants it uses.
	* libgst/xlat.c: Added support for inferSmallIntegerOps and ability
	to omit overflow checks if the result of an inlined operation is
	known to be a SmallInteger.

2000-08-08  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Renamed compileSubexpressionWithGoto to
	compileSubexpressionAndJump
	* libgst/dict.inl: Only have 8 case's (instead of 9) in nilFill
	* libgst/interp.c: Only have 8 case's (instead of 9) in prepareContext
	* libgst/save.c: Moved most of loadFromFile to loadSnapshot; removed
	goto statements (my life is passing through a phase of structured
	programming mania).

2000-08-06  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/byte.c: Moved part to opt.c
	* libgst/byte.h: Moved part to opt.h
	* libgst/opt.c: Created from byte.c.  As the JIT compiler will
	get more sophisticated this part is going to get bigger.
	* libgst/opt.h: Created from byte.h

	* libgst/comp.c: Include opt.h.  Also, don't generate unreachable
	jumps in `... ifTrue: [ ^true ]' (or an analogous pattern with
	#ifTrue:ifFalse:).  This pleases computeStackPositions enough
	to run the Prolog and Lisp interpreters.
	* libgst/xlat.c: Include opt.h

	* libgst/gst.h: Added F_FIXED.
	* libgst/oop.h: Declared makeFixedOOP.
	* libgst/oop.c: Added makeFixedOOP, deal with fixed objects
	in prepareForSweep.
	* libgst/prims.inl: Added primitive 170-172 to deal with fixed
	objects.
	* libgst/save.c: Always clear F_RUNTIME flags, not only when
	the endianness is wrong!!! This caused the GC to try to release
	the native code version of methods that had indeed been compiled
	when the image was saved, but were not compiled when GC was
	invoked.  Also implemented saving F_FIXED objects.

2000-07-10  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/lib.c: Allow usage of Undeclared in the kernel's source

2000-07-04  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/heap.c: Support MAP_ANON and MAP_ANONYMOUS (thanks to
	John David Anglin)
	* libgst/oop.c: In gcFlip, modify numFreeOOPs so that allocOOPs
	allocates its OOPs merrily, even if we're below the low-water
	threshold.
	* libgst/oop.h: Defined LOW_WATER_OOP_THRESHOLD
	* libgst/oop.inl: In allocOOP, check low-water condition by
	looking at numFreeOOPs, not firstFreeOOP.

2000-07-02  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/gst.y: Add `oval' to the union, and define (and parse)
	SCALED_DECIMAL_LITERAL 
	* libgst/lex.c: Parse ScaledDecimal literals
	* libgst/sym.c: Declared asScaledDecimalSymbol
	* libgst/sym.h: Defined asScaledDecimalSymbol
	* libgst/tree.c: Defined makeOOPConstant
	* libgst/tree.h: Declared makeOOPConstant

2000-07-01  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp.c: Don't overwrite the method cache until we
	are sure that the receiver understands the message (lookupMethod)
	* libgst/lib.c: Load AnsiDates.st and ScaledDec.st too
	* libgst/prims.inl: Handle case where the receiver is a `Float'
	but the argument is a `SmallInteger' directly in the 41-to-50
	primitives.
	* libgst/xlat.c: Another fix to the strength-reduced division
	algorithm.  If adjust is true, fixing the dividend if the signs
	mismatch produces an incorrect result.

2000-06-26  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.inl: Restored divide-by-zero check in //, \\ and
	/ (removed by mistake June 21st)

	* libgst/xlat.c: Removed interrupt check from the method prolog,
	moved it to the `return' bytecodes and to after a primitive;
	this fixed processes.
	Also INLINED_CONDITIONAL now adjusts the stack top in V2 and then
	resets spDelta instead of simply decrementing spDelta: this
	caused incorrect compilation of #ifTrue:ifFalse: if the receiver
	was inlined and the returned value was used as a parameter to a
	message.  There are no regressions with respect to the bytecode
	interpreter now.

2000-06-21  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: When compiling a #repeat loop, add a dummy
	`push nil' bytecode at the end to please the JIT compiler
	(which said its stack had underflowed -- it was right, but it
	was compiling unreachable code...).
	* libgst/interp.h: Made the primitiveTable `const'
	* libgst/interp-bc.inl: Use primitives for //, \\ and / if both
	arguments are integers
	* libgst/interp-jit.inl: First fixes to add processes to the JIT
	compiler
	* libgst/prims.inl: Fixed meaning of // and \\ for negative divisors;
	in primitive 90, use getReturnIP (defined in interp-jit.inl).
	* libgst/xlat.c: Fixed meaning of // and \\ for negative divisors;
	fixed overflow detection in multiplication; align interrupt checks
	to 4 bytes.

2000-06-18  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/dict.c: Added to SortedCollection two instance variables
	needed to be able to amortize sorting cost (through heaps & merging).

2000-06-17  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/xlat.c: Fixed doesNotUnderstand

2000-06-17  Paolo Bonzini  <bonzini@gnu.org>

	*** Released versions 1.95 (development) and 1.7.5 (stable)

2000-06-10  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/byte.c: Fixed bug in optimizeByteCodes (|| was there
	instead of &&) which upset the JIT compiler
	* libgst/comp.c: If a method is a primitive return of a
	BlockClosure, initialize the BlockClosure in methodNew.

	* libgst/oop.c: Call releaseNativeCode instead of
	freeNativeCode in prepareForSweep, at the end call
	freeNativeCode
	* libgst/xlat.c: Removed definition of MethodEntry, renamed
	freeNativeCode to releaseNativeCode, added freeNativeCode
	* libgst/xlat.h: Added definition of MethodEntry, declared
	releaseNativeCode
	* libgst/interp.h: Declare validateMethodCacheEntries
	* libgst/interp-bc.inl: Added validateMethodCacheEntries (no-op)
	* libgst/interp-jit.inl: Added validateMethodCacheEntries

2000-06-07  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/interp.c: Fixed behavior of emptyContextStack with
	regard to the returnIP field.
	* libgst/interp-jit.inl: Don't look at the header flag in
	sendMessageInternal.
	* libgst/xlat.c: Added inlining of arithmetic operations.
	declared TREE_ALT_PUSH and implemented the gen_alt* functions.
	Still missing: processes, doesNotUnderstand:

2000-06-06  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/prims.inl: Use a huge table of functions instead of
	a huge switch statement
	* libgst/interp.h: Declare table of functions for
	the primitives
	* libgst/internal.h: Removed PTR_EXEC_PRIM_OP
	* libgst/interp-jit.inl: Same as above.
	* libgst/interp-bc.inl: Use primitiveTable instead of
	executePrimitiveOperation
	* libgst/xlat.c: Same as above.

2000-06-04  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/byte.c: New function computeStackPositions.
	* libgst/byte.h: Declared computeStackPositions.
	* libgst/xlat.c: Don't call prepareContext in the prologs
	if the method has no arguments and no temporaries.  Plus,
	use computeStackPositions.

2000-06-03  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/xlat.c: Support #valueWithArguments: and other
	primitives (other than 81) which use sendBlockValue.  Wrote
	the code for compiling deferred sends.  Working inlined
	comparisons.

	* libgst/prims.inl: Added primitive 90 to retrieve the
	native code for a method.

2000-06-02  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: If USE_JIT_TRANSLATION is defined,
	executeStatements skips some values which aren't mantained in
	that case.

	* libgst/xlat.c: Fixed error in pushing thisContext (wrong
	register used, R1 instead of V1).  Fixed problems when the
	stack was empty in setTopNodeExtra.  The method hash table
	was broken -- did not initialize current->receiverClass.
	Also check in the block's prolog, if code for the right
	CompiledBlock is being executed.

	* libgst/interp-jit.inl: Reset the exceptFlag after execution
	of JIT-compiled native code is interrupted.  The interpreter
	is now able to create an image and then restore it.

2000-06-01  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/callin.c: Support losing systems which don't allow
	va_arg(..., char)
	* libgst/dld_beos.c: New file.

2000-05-29  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/xlat.c: Added some inlining (==, isNil, notNil,
	blockCopy:); modified suboperation codes so that `2' is reserved
	to literals (which aids a lot when inlining).  Blocks done, they
	were easy.

2000-05-28  Paolo Bonzini  <bonzini@gnu.org>

	* libgst/comp.c: Moved here a ChangeLog comment that actually
	described the code; gave a category to Behavior>>#methodsFor:

	* libgst/xlat.c: Usual tons of fixes.  Crashes at initialize.st.
	Among others:
	- save the returnIP in the parent context, not in the newly created
	  context (that is before activateNewContext rather than afterwards).
	- fixed the method prolog to update the `self' variable, which I had
	  forgotten
	- labels did not work (had missed a *)
	- do EXPORT_SP_CODE in crucial points, including basic block boundaries

	* libgst/interp.c: New procedure showStackContents
	* libgst/interp.h: Declared showStackContents
	* libgst/prims.inl: Use showStackContents in the temporary definition
	of #error: and #doesNotUnderstand: (useful for debugging)

2000-05-24  Paolo Bonzini  <bonzini@gnu.org>

	* lib/xlat.c: More tons of fixes.  Crashes at Character.st
	* lib/xlat.h: Export returnFromNativeCode
	* lib/heap.c: Switched to Doug Lea's malloc (only an hour's effort!)
	* lib/interp.c: Fixed behavior of `execution environment' contexts
	with the JIT compiler.

2000-05-24  Paolo Bonzini  <bonzini@gnu.org>

	* lib/xlat.c: Tons of fixes; renamed from lib/dynamic.c

2000-05-17  Paolo Bonzini  <bonzini@gnu.org>

	* lib/gst.h: Added a couple of flags (F_XLAT_2NDCHANCE and
	F_XLAT_REACHABLE) for dealing with the changes to lib/oop.c.
	* lib/interp-jit.inl: Removed unwindContext and changeProcessContext,
	added getContextIP & setThisMethod
	* lib/interp-bc.inl: Moved unwindContext and changeProcessContext
	back to interp.c, added getContextIP
	* lib/interp.c: Restored unwindContext and changeProcessContext from
	interp-bc.inl, used getContextIP instead of toInt(...->ipOffset)
	* lib/oop.c: Implemented a `second chance' algorithm for disposing
	of methods whose native code translations are not referenced by any
	context.

2000-05-13  Paolo Bonzini  <bonzini@gnu.org>

	* lib/alloc.c: Moved to lib-src
	* lib/alloc.h: Moved to lib-src
	* lib/alloca.c: Moved to lib-src
	* lib/getdtablesize.c: Moved to lib-src
	* lib/getpagesize.c: Moved to lib-src
	* lib/memmove.c: Moved to lib-src
	* lib/obstack.c: Moved to lib-src
	* lib/obstack.h: Moved to lib-src
	* lib/putenv.c: Moved to lib-src
	* lib/qsort.c: Moved to lib-src
	* lib/strdup.c: Moved to lib-src
	* lib/strerror.c: Moved to lib-src
	* lib/strtoul: Moved to lib-src
	* lib/usleep.c: Moved to lib-src
	* lib/waitpid.c: Moved to lib-src

2000-05-12  Paolo Bonzini  <bonzini@gnu.org>

	* lib/heap.c: Derive baseaddr by trying to mmap a page, rather than
	blindly getting sbrk(0)

2000-05-09  Paolo Bonzini  <bonzini@gnu.org>

	* lib/comp.c: Abort compilation if a method turns out to be too
	complex for the bytecode set (i.e. if it jumps too far).
	* lib/putenv.c: Strdup the added string

2000-05-04  *X*X* (aldomel@ix.netcom.com)

	* lib/sym.h: Added #include gst.h
	* lib/lib.c: Better error message when the Kernel files can't be
	found (image bootstrap failed).

2000-05-04  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 1.94.90 released

2000-05-02  Paolo Bonzini  <bonzini@gnu.org>

	* lib/gst.y: Fixed errors in parsing #( () ) and #[]; the
	former was parsed to (Array with: nil), the last crashed (!)
	* lib/getpagesize.c: Created from part of sysdep.c
	* lib/getdtablesize.c: Created from part of sysdep.c
	* lib/usleep.c: Created from part of sysdep.c
	* lib/sysdep.c: Added code to set the `LANG' environment
	variable under Win32.

2000-04-27  Paolo Bonzini  <bonzini@gnu.org>

	* lib/register.h: Issue the #warning only if using GCC

Wed Apr 26 14:42.52 2000  Paolo Bonzini  <bonzini@gnu.org>

	* lib/sysdep.h: Relinquish -> usleep, added getpagesize
	* lib/sysdep.c: Same as above
	* lib/prims.inl: Relinquish -> usleep

2000-04-23  Paolo Bonzini  <bonzini@gnu.org>
 
	* lib/dict.c: Changed `length' variable to `size' in FileSegment

2000-04-12  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 1.7.4 released

2000-04-01  Paolo Bonzini  <bonzini@gnu.org>

	* lib/oop.c: Completed switch to heaps, using heap_sbrk instead of
	heap_malloc and	heap_realloc.  Removed maxSpaceSize variable.
	* lib/save.c: Use memSpace.totalSize instead of maxSpaceSize.

2000-03-31  Hideoki Saito (saito@densan.co.jp)

	* lib/comp.h: Fixed bogus error on big-endian machines

2000-03-25  Paolo Bonzini  <bonzini@gnu.org>
 
	* lib/byte.c: Added bytecode 134 (for lots of instance variables).
	* lib/byte.h: Added bytecode 134.
	* lib/comp.c: Added bytecode 134.
	* lib/dynamic.c: Added bytecode 134.
	* lib/interp-bc.inl: Added bytecode 134.

2000-03-24  Paolo Bonzini  <bonzini@gnu.org>

	* lib/alloc.c: Removed code for the BSD memory allocator.
	* lib/heap.c: Added.
	* lib/heap.h: Added.
	* lib/oop.c: Use heaps to allow the OOP table to grow.

2000-03-23  Paolo Bonzini  <bonzini@gnu.org>
 
	*** Version 1.7.3 released

2000-03-22  Paolo Bonzini  <bonzini@gnu.org>

	* lib/gst.h: Added F_XLAT and F_RUNTIME
	* lib/save.c: Remove F_RUNTIME flags upon image load

2000-03-21  Paolo Bonzini  <bonzini@gnu.org>

	* lib/comp.h: Include comp.inl
	* lib/comp.inl: Created
	* lib/dict.c: Added returnIP to ContextParts
	* lib/dynamic.c: All but blocks is in place...
	* lib/interp.c: Moved a few functions to interp-bc.inl
	* lib/interp.h: Added returnIP to ContextPart structs
	* lib/interp-bc.inl: (new name of bytecode.inl) moved here a few
	functions that are different for the bytecode and JIT interpreter
	(sendMessageInternal, unwindContext, changeProcessContext, ...)
	* lib/interp-jit.inl: Created
	* lib/sym.c: Added mustBeBooleanSymbol and badReturnErrorSymbol
	* lib/sym.h: Added mustBeBooleanSymbol and badReturnErrorSymbol

2000-03-16  Paolo Bonzini  <bonzini@gnu.org>

	* lib/byte.h: Since I added atSignSymbol, I put atSignSpecial here.
	* lib/bytecode.inl: Since I added atSignSymbol, I use it instead of
	internString("@").
	* lib/comp.c: Since I added atSignSymbol, I generate bytecode 187
	even if it has little use...
	* lib/dynamic.c: Shape is getting clearer and clearer...
	* lib/sym.c: Added atSignSymbol (for JIT).
	* lib/sym.h: Added atSignSymbol (for JIT).

2000-03-11  Paolo Bonzini  <bonzini@gnu.org>
 
	*** Version 1.7.2 released

	* lib/byte.c: IsPush -> isPushTable; added isSendTable
	* lib/byte.h: Added isPushByteCode & isSendByteCode
	* lib/dynamic.c: Began implementing new version
	* lib/dynamic.h: New version

2000-02-25  Paolo Bonzini  <bonzini@gnu.org>

	* lib/lib.c: Use the Undeclared dictionary for files loaded
	from the command line too.
	 
2000-02-24  Paolo Bonzini  <bonzini@gnu.org>

	* lib/cint.c: Better output from badType.  Plus, ByteArrays
	passed as Strings are considered null-terminated, and Strings
	passed as ByteArrays are not.
	* lib/interp.c: ShowBacktrace not static anymore.  Fixed crash
	on sends to super from a block.
	* lib/interp.h: Declare showBacktrace.

2000-02-22  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 1.7.1 released

2000-02-22  Paolo Bonzini  <bonzini@gnu.org>

	* lib/cint.c: Added defineCFuncs to test file accessing modes.

2000-02-21  Paolo Bonzini  <bonzini@gnu.org>

	* lib/prims.inl: Added time-zone primitives for Time
	* lib/sysdep.c: Added currentTimeZoneName
	* lib/sysdep.h: Added currentTimeZoneName

2000-02-17  Paolo Bonzini  <bonzini@gnu.org>

	* lib/bytecode.inl: Fixed crash on blocks returning from non-existent
	method contexts; fixed bug in detecting overflows on bit shifts.
	* lib/prims.inl: Fixed bug in detecting overflows on bit shifts.

2000-02-15  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 1.7 released

2000-02-06  Thorsten Klein  <TK@Thorsten-Klein.de>

	* lib/dld_gst.c: Missing asterisk in `i' for loop (second
	expression was `i', now is `*i').  Caused SIGSEGV when a missing
	library name was passed.

2000-02-01  Paolo Bonzini  <bonzini@gnu.org>

	* lib/byte.h: Subsumed bytecodes 132 and 134 (a whole byte for
	the argument count is way too much, and it does not matter if
	it's a bit slower because these bytecodes are rare indeed).
	* lib/byte.c: Print bytecode 132 according to the new coding
	* lib/bytecode.inl: Interpret new coding for bytecode 132
	* lib/comp.c: Emit new coding for bytecode 132

2000-01-31  Paolo Bonzini  <bonzini@gnu.org>

	*** Sixth beta of 1.7 (labeled 1.6.85) released

2000-01-31  Paolo Bonzini  <bonzini@gnu.org>

	* lib/interp.c: Worked out bugs in call-ins that were added
	after the introduction of the `terminate interpreter' bytecode
	(Jan 8th) and which prevented Blox from working.
	prepareExecutionEnvironment was stacking a context with an OOP
	from the main OOP table over some lifoContexts.
	* lib/oop.c: Moved debug() to sysdep.c
	* lib/oop.h: Moved debug() to sysdep.h
	* lib/sysdep.c: Moved debug() here from oop.c
	* lib/sysdep.h: Moved debug() here from oop.h

2000-01-28  Paolo Bonzini  <bonzini@gnu.org>

	* lib/comp.c: Fixed bug with double-freeing of block bytecodes
	(this is also due to a very permissive allocator)
	* lib/lex.c: Fixed bug in parsePrimitive (xfree without matching
	xmalloc) -- strangely enough, it didn't show up on all systems!
	* lib/prims.inl: Fixed Memory primitives to return and accept
	LargeIntegers for addresses when needed.

2000-01-24  Paolo Bonzini  <bonzini@gnu.org>

	* lib/byte.c: Changed the clean block detection machinery to work
	with CompiledBlocks.  Previously, we emitted a fixed sequence of
	bytecodes for blocks, then we made a pass on the bytecodes before
	optimization patching already generated code in case we found the
	block to be clean.  Now, instead, we compute information on the
	block's cleanness before we create the CompiledBlock object, we
	embed the information in the CompiledBlock's header, and then use
	that information to directly emit optimized bytecodes in case the
	block is clean (instead of applying patches later).
	* lib/comp.c: Moved `class' and `selector' fields to MethodInfo.
	Blocks are compiled to CompiledBlocks.
	* lib/comp.h: Removed `class' and `selector' fields from [Compiled]Method
	* lib/dict.c: New definitions of MethodInfo, CompiledCode, CompiledMethod,
	CompiledBlock; declaration of compiledCodeClass and compiledBlockClass.
	* lib/dict.h: Declaration of compiledCodeClass and compiledBlockClass
	* lib/interp.c: Execute blocks from CompiledBlocks.
	* lib/lib.c: Load CompildCode.st and CompiledBlk.st
	* lib/prims.inl: Added primitive 68 to create CompiledBlocks.

2000-01-20  Paolo Bonzini  <bonzini@gnu.org>

	* lib/byte.c: Fixed crash on methods whose last act was
	returning a clean block.  It turned out that evaluating those
	blocks was GST's last act, either...
	* lib/cint.c: Enable passing 32-bit LargeIntegers in C call-
	outs.  Looks like I had forgotten about it on Sep 10 1999.
	Also, introduced a `pVoidFunc' typedef to avoid Lisp-like
	abundance of parentheses when passing C function addresses.

2000-01-20  Paolo Bonzini  <bonzini@gnu.org>

	* lib/bytecode.inl: IntegerClass -> smallIntegerClass
	* lib/dict.c: IntegerClass -> smallIntegerClass, plus
	added definition of SmallInteger
	* lib/dict.h: Added declaration of SmallInteger
	* lib/gst.h: IntegerClass -> smallIntegerClass
	* lib/interp.c: IntegerClass -> smallIntegerClass
	* lib/interp.inl: IntegerClass -> smallIntegerClass
	* lib/lib.c: Load SmallInt.st too.
	* lib/prims.inl: IntegerClass -> smallIntegerClass

2000-01-15  Paolo Bonzini  <bonzini@gnu.org>

	* lib/comp.c: Adapted large integer compilation stuff in
	makeConstantOOP to compile ByteArrays too.
	* lib/gst.y: Added rules for ByteArray literals and arrays
	like #(1 2 3 #(4 5 6)) -- i.e. with the sharp inside the
	parentheses
	* lib/lex.c: Make parseNumber return BYTE_LITERAL for
	integers between 0 and 255
	* lib/tree.c: Added makeByteArrayConstant

2000-01-09  Paolo Bonzini  <bonzini@gnu.org>

	* lib/lex.c: CurStrBuf -> obstack_curStrBuf; plus, added
	the compilationObstack variable which is initialized in
	parseStream.
	* lib/lex.h: Added declaration of compilationObstack
	* lib/str.c: Added obstack_curStrBuf
	* lib/str.h: Declared obstack_curStrBuf
	* lib/tree.c: Heavily simplified destruction code by using
	obstacks

	* lib/lib.c: Solved SIGSEGV when gst.im was not in the
	current directory and SMALLTALK_IMAGE was not set.

2000-01-09  Paolo Bonzini  <bonzini@gnu.org>

	* lib/comp.c: Added code to create Smalltalk LargeInteger
	objects from large integer ConstNodes in makeConstantOOP.
	* lib/gst.y: Handle large integer literals in the grammar
	* lib/lex.c: Added code to parse large integer literals
	* lib/tree.c: Added code to create large integer ConstNodes
	* lib/tree.h: Added declaration of the LargeInteger struct
	and of large integer ConstNodes

2000-01-08  Paolo Bonzini  <bonzini@gnu.org>

	* lib/byte.h: Added `exitInterpreter' bytecode.
	* lib/comp.h: Declared `getTerminationMethod'.
	* lib/comp.c: Implemented `getTerminationMethod', and added code
	to installInitialMethods which installs a termination method
	which executes the new bytecode above.
	* lib/bytecode.inl: Implemented `exitInterpreter' bytecode.
	* lib/interp.c: Contexts created by prepareExecutionEnvironment
	no longer have to be special cased in unwindLastContext.
	* lib/sym.c: Added terminateSymbol.
	* lib/sym.h: Added terminateSymbol.

2000-01-02  Paolo Bonzini  <bonzini@gnu.org>

	* lib/interp.c: Gst enters the new millennium!!! (yeah, I know it
	actually starts in 2001 but I don't want to wait another year... ;-)
	and it does by getting rid of the free lists for contexts -- it is
	faster to use the memory chunks like a stack.
	Also, I replaced tests for `isNil(thisContextOOP)' with tests for
	`!ip'.
	
	* lib/strerror.c: Added.
	* lib/sysdep.c: Win32 implementation of getMilliTime now more precise
	* lib/sysdep.h: Added macros for frexp and ldexp where they aren't
	available
	 
1999-12-28  Paolo Bonzini  <bonzini@gnu.org>

	*** Fifth beta of 1.7 (labeled 1.6.84) released

	* lib/byte.c: New functions checkKindOfBlock and patchCleanBlocks.
	* lib/byte.h: Declaration of patchCleanBlocks.

1999-12-27  Paolo Bonzini  <bonzini@gnu.org>

	* lib/byte.c: New function fixupBlockClosures.
	* lib/comp.c: New way of compiling blocks.
	* lib/bytecode.inl: Bytecode 200 is now #blockCopy: (same as the Blue
	Book, but the primitive is implemented differently of course).
	* lib/prims.inl: New implementation of primitive 80 (blockCopy)
	* lib/sym.c: Removed #blockCopy:temporaries: (replaced with #blockCopy:),
	added machinery to reveal `clean' blocks
	* lib/sym.h: Removed #blockCopy:temporaries: (replaced with #blockCopy:)

1999-12-27  Paolo Bonzini  <bonzini@gnu.org>

	* lib/dict.c: Added method to BlockClosure, changed to new
	context structure (methodClass/selector retrieved from the
	compiledMethod, method only there for MethodContexts)
	* lib/interp.c: Changed to new context and BlockClosure structure
	* lib/prims.inl: Changed to new BlockClosure structure

1999-12-26  Paolo Bonzini  <bonzini@gnu.org>

	* lib/comp.c: Store the class and selector in the created
	CompiledMethods.  A first step towards leaner context objects
	(i.e. more speed when sending messages!) and more powerful
	constructs such as `clean' block closures (which do not need
	to be created at run-time because are isolated from the outer
	contexts).
	* lib/comp.h: Added `class' and `selector' to struct Method.
	* lib/dict.c: Added `class' and `selector' to CompiledMethod.
	* lib/prims.inl: Pass class and selector to makeNewMethod.

1999-12-19  Paolo Bonzini  <bonzini@gnu.org>

	* lib/bytecode.inl: Removed hasBlock (can be replaced with a
	test on whether the context lies in the main OOP table); this
	simplified both sends and returns.  I also made the structure
	of method and block context objects more similar, resulting
	in simpler and faster code (except for block returns), and
	opening doors to optimizations such as delayed filling of the
	`method' and `receiver' slots of context objects.  The overall 
	improvement obtained since the Dec 17 change amounts to 9-10%.
	* lib/dict.c: Same as above
	* lib/interp.c: Same as above
	* lib/interp.h: Same as above
	* lib/prims.inl: Same as above

1999-12-17  Paolo Bonzini  <bonzini@gnu.org>

	* lib/interp.c: Various changes, notably to getMethodContext and
	its users, to avoid using oopToObj more than once on the same
	object.

1999-12-17  Paolo Bonzini  <bonzini@gnu.org>

	* lib/gst.h: Nil is now 0L (used to be 0), which is better when
	used as a pointer.
	* lib/interp.c: As long as we're sure that the execution order is
	LIFO (i.e. as long as no blocks are involved), allocate OOPs for
	the contexts outside of the main OOP table; this is because
	allocOOP is slower than picking a pre-built OOP out of a stack.
	This partly resembles the design of 1.1.5 (introduced Jan 1, 1991
	and modified Oct 18, 1998), but has the advantage that when a
	BlockClosure is created we only have to allocate the OOPs that we
	tried to avoid -- 1.1.5 copied the whole objects to the main heap,
	causing way too many GCs.

1999-12-16  Paolo Bonzini  <bonzini@gnu.org>

	* lib/gst.h: F_FAKE --> F_POOLED, isFake --> isPooled
	* lib/interp.h: ResetFakeContexts --> emptyContextsPool
	* lib/interp.c: (de)allocFakeContext --> (de)allocPoolContext,
	fakeList --> contextPool, plus changes above
	* lib/oop.c: RealizeOOPs --> sweepPooledObjects, plus changes above

1999-12-15  Paolo Bonzini  <bonzini@gnu.org>

	* lib/sym.c: Modified hashString to reduce likeliness that
	hash be zero.

1999-12-14  Paolo Bonzini  <bonzini@gnu.org>

	* lib/bytecode.inl: Use the new procedures below
	* lib/comp.c: Allocated one more bit for the method flags.  If
	there is a primitive index, the flags are now 4 (used to be 0).
	* lib/interp.c: The old `returnWithValue' procedure was split in
	two, unwindToContext and unwindLastContext -- one is used upon an
	explicit `return from method', the other does less job and returns
	to the parent context upon a `return from context'

1999-12-11  Paolo Bonzini  <bonzini@gnu.org>

	* lib/dict.c: Moved findClassMethod here from lib/dict.inl
	* lib/dict.h: Restored declaration of findClassMethod
	* lib/dict.inl: Moved findClassMethod here to lib/dict.c -- it is
	used rarely (only for method cache misses) and was bloating
	sendMessageInternal's code.

	* lib/bytecode.inl: Simple one-byte bytecodes prefetch the next
	address to jump to (hoping to save address generation interlocks)
	* lib/interp.c: Support for prefetching

1999-12-06  Paolo Bonzini  <bonzini@gnu.org>

	* lib/bytecode.inl: Hard-code register allocation of ivar2
	and tempOOP only where they are actually used
	* lib/dict.inl: Hard-coded register allocation in nilFill
	* lib/interp.c: Hard-coded register allocation now relies on
	register.h and is used in sendMessageInternal/sendBlockValue.
	* lib/register.h: Created

1999-12-05  Paolo Bonzini  <bonzini@gnu.org>

	* lib/byte.c: ReturnMethodStackTop became returnContextStackTop
	in isSimpleReturn.
	* lib/cint.c: Declare the strerror C function.
	* lib/gst.h: ANSI asks for 65535 instance variables, so I shifted
	the instance specification's `number of instance vars' field
	right by three bits (now 262143 variables are possible).
	* lib/lex.c: Parse stuff like 1.0d53 and 1.0q212 correctly even
	though FloatD/FloatE/FloatQ is not supported yet.

	* lib/memzero.h: Removed a conditional by using LONG_SHIFT in the
	generic version of memzero.

1999-12-05  Paolo Bonzini  <bonzini@gnu.org>

	* lib/bytecode.inl: The `hasBlock' instance variable in a context
	is now an integer (0 or 1).  This eliminated several lookups for
	the `trueOOP' and `falseOOP' globals.
	* lib/interp.c: Same as above
	* lib/prims.inl: Same as above

1999-11-26  Paolo Bonzini  <bonzini@gnu.org>

	*** Fourth beta of 1.7 (labeled 1.6.83) released

	* lib/bytecode.inl: Added caching of primitive numbers for sends of
	#at:, #at:put: and #size
	* lib/interp.c: Same as above
	* lib/prims.inl: Same as above

1999-11-22  Paolo Bonzini  <bonzini@gnu.org>

	* lib/interp.c: Fixed floating-point exception on operations
	with infinity and NaN, under FreeBSD.

1999-11-21  Paolo Bonzini  <bonzini@gnu.org>

	* lib/alloc.c: Use memzero instead of memset; also, xmalloc
	doesn't zero memory
	* lib/byte.c: Use memzero instead of memset
	* lib/dict.inl: Use memzero instead of memset
	* lib/dynamic.c: Use memzero instead of memset
	* lib/gst.h: Include memzero.h
	* lib/memzero.h: Added

	* lib/oop.c: Don't update numFreeOOPs on allocate/free oop.
	It is only used after a GC (to check whether the OOP table
	must be resized), so it is sufficient that it be correct
	after a GC.

1999-11-20  Paolo Bonzini  <bonzini@gnu.org>

	* lib/dict.c: RestoreCFuncDescriptor was called at the wrong
	time in save.c -- before the xxxClass variables were loaded
	(Oct 20 change).  So now it is called here.
	* lib/save.c: See above for lib/dict.c

1999-11-20  P. Lecoanet

	* lib/bytecode.inl: Special case #blockCopy:temporaries: for
	context objects and #value/#value: for BlockClosure objects.
	Also, no need to push and pop the object for the `return
	self/true/false/nil' bytecodes -- a simple assignment will do.

1999-11-19  Paolo Bonzini  <bonzini@gnu.org>

	* lib/dict.c: Removed initNilVec and nilVec
	* lib/dict.inl: Implemented nilFill as an unrolled loop (memcpy
	is sloooow)
	* lib/interp.c: Arguments are moved between contexts with an
	unrolled loop (memcpy is sloooow); pushNNils now sets up the
	whole context stack (arguments+temporaries) and is called
	prepareContext.  Another +10% for this on send-heavy benchmark!!!

1999-11-18  Paolo Bonzini  <bonzini@gnu.org>

	* lib/byte.h: ReturnBlockStackTop became returnContextStackTop
	* lib/comp.c: Compile returns from methods as returnContextStackTop
	(should be a bit faster)
	* lib/bytecode.inl: `return self' and other similar bytecodes
	fall into returnContextStackTop, not returnMethodStackTop.

1999-11-18  Paolo Bonzini  <bonzini@gnu.org>

	* lib/comp.c: Changed to account for removal of cacheHits and
	messagesSent.
	* lib/comp.h: Removed messagesSent.
	* lib/interp.c: Removed cacheHits and messagesSent, which 
	can be deducted from other statistics.
	* lib/interp.h: Removed cacheHits.
	* lib/prims.inl: New implementation of mutation does not need
	primitive 263 (#specialBasicAt:).

1999-11-17  Paolo Bonzini  <bonzini@gnu.org>

	* lib/dict.inl: Access functions test subscript bounds -- this
	eliminates an instanceSpec lookup.
	* lib/prims.inl: No need to call checkIndexableBoundsOf on
	access primitives (#at:*, #basicAt:*)
	* lib/gst.y: Support for the #(1 2 3 #a #b #'cdef' 45) syntax
					     ^^ ^^ ^^^^^^^

1999-11-14  Paolo Bonzini  <bonzini@gnu.org>

	* lib/comp.c: `return instance variable' stores index in the
	`primitive' field of the method header (allows more optimizations
	and better register allocation in sendMessageInternal)
	* lib/comp.h: Move flag bits to high end of the methodHeader, so
	that there is place for two additional bits if needed
	* lib/dict.c: BlockContexts now hold the receiver and the
	BlockClosure instead of the number of arguments and temporaries.
	* lib/interp.c: Same as comp.c and dict.c above; plus, removed
	code for ACCESSOR_DEBUGGING.
	* lib/interp.h: Same as dict.c above

1999-11-13  Paolo Bonzini  <bonzini@gnu.org>

	* lib/dict.c: NilVec contains now 128 OOPs
	* lib/dict.inl: NilVec contains now 128 OOPs
	* lib/interp.c: Doc fixes; cleaned up unused variables in the code
	handling fake contexts; finally, the method cache now includes
	the method header (+5/10% performance).

1999-11-11  Paolo Bonzini  <bonzini@gnu.org>

	* lib/dynamic.c: Move method whose threaded code representation
	is requested to the head of the methodsTable.
	* lib/lex.c: USE_MONCONTROL only affects the interpreter, not the
	lexer.
	* lib/lib.c: Disable execution tracing options when the dynamic
	translator is being used.
	* lib/oop.c: Removed code for ACCESSOR_DEBUGGING, which I found
	more bug-prone than useful in more than a year; added lines
	explaining GC_TORTURE.
	* lib/oop.inl: Removed the few lines that implemented the
	ACCESSOR_DEBUGGING preprocessor symbol and explained what it was
	for.

1999-11-10  Paolo Bonzini  <bonzini@gnu.org>

	* lib/bytecode.inl: In most bytecodes that are implemented with a
	switch statement, the switch statement is resolved at translation
	time.  Also, added `default' clauses to such switch statements so
	that the compiler can produce better code.
	* lib/dynamic.c: Same as above
	* lib/dynamic.h: Same as above
	* lib/interp.c: Same as above

	* lib/gst.h: Removed declarations of TreeNode, thisClass and
	regressionTesting, which are already declared elsewhere
	(respectively in tree.h, comp.h and lib.h).  Also removed
	declaration of Stream which is needed only in lex.c and is
	therefore moved there.
	* lib/lex.c: Moved declaration of Stream from gst.h

1999-11-09  Paolo Bonzini  <bonzini@gnu.org>

	* lib/dynamic.c: Invalidating the macro opcode cache is now
	separated from invalidating the threaded code cache. Also,
	convert from threaded code ip to bytecode ip before 
	invalidating the threaded code cache; reload the methodBase 
	and the threaded ip after having invalidated it (in
	invalidateMethodCache). Everything works if no optimization 
	options are set when compiling.

1999-11-09  Paolo Bonzini  <bonzini@gnu.org>

	* lib/callin.c: SelectorNumArgs used; in addition, the result
	is checked to be the `nil' object in msgSendf is checked and,
	if so, 0 (or some variation of it, like 0.0 and NULL) is
	returned.
	* lib/interp.c: Added DEBUG_CODE_FLOW preprocessor symbol that
	prints every message that is sent in the same form used by
	backtraces (e.g. `Integer(Object)>>#retry:coercing:').
	* lib/prims.inl: SelectorNumArgs used in implementation
	of #perform:...
	* lib/sym.c: Added selectorNumArgs
	* lib/sym.h: Added selectorNumArgs

1999-11-08  Paolo Bonzini  <bonzini@gnu.org>

	* lib/byte.c: Fixed bug in makeDestinationTable that caused
	macro-opcode inlining to lose as soon as a jump was found.
	* lib/dynamic.c: Had mistyped an = for an == grrr... 2 days to
	find it! Now runs up to WeakObjects.st both with and without
	macro-opcode inlining, so macro opcodes should be reasonably
	bug-free (except for problems arising from inlining code
	optimized by GCC, which I have not tackled yet).

1999-11-06  Paolo Bonzini  <bonzini@gnu.org>

	* lib/bytecode.inl: Jump bytecodes must be `PROTECT' bytecodes,
	isNil and notNil sends need not.  Found two unused variables.
	* lib/cint.c: Moved `extern' declaration of enableGC into cint.h,
	the actual declaration of the variable came here from interp.c
	* lib/cint.h: Moved `extern' declaration of enableGC from cint.c
	* lib/interp.c: Moved getMethodLiterals to interp.inl and
	enableGC to cint.c
	* lib/interp.inl: Moved getMethodLiterals from interp.c

1999-11-05  Paolo Bonzini  <bonzini@gnu.org>

	* lib/byte.c: Can print bytecodes without a vector of literals
	* lib/dynamic.c: Added debugging support; offsetToFill was not reset
	when a non-inlinable opcode was found (fixed by setting it in
	newOpcodeEntry) -- now runs up to the first jump bytecode
	(#initialize in Character.st), or up to MethodDict.st
	with macro-opcode inlining disabled.

1999-11-02  Paolo Bonzini  <bonzini@gnu.org>

	* lib/dynamic.c: Work on the dynamic translator restarted. The first
	correct dynamically code was generated today: a small step for
	humanity, a big step for me (hmmm... maybe it was the other way
	round...) -- runs up to the first `inlined opcode-non inlined opcode-
	inlined opcode' pattern (line 1358 of Builtins.st)
	* lib/interp.c: Work on the dynamic translator restarted

1999-10-31  Paolo Bonzini  <bonzini@gnu.org>

	* lib/comp.c: Fixed bug when compiling an integer constant
	that did not fit in the first 31 literals (`push instance
	variable[x]' was emitted instead of `push literal[x]')

1999-10-31  Paolo Bonzini  <bonzini@gnu.org>

	*** Third beta of 1.7 (labeled 1.6.82) released

1999-10-30  Paolo Bonzini  <bonzini@gnu.org>

	* lib/interp.c: A few bytecodes were still sending #booleanRequired
	instead of #mustBeBoolean (see May 3rd change).

1999-10-22  Paolo Bonzini  <bonzini@gnu.org>

	* lib/save.c: Ensure that upon load the heap is at least 50% free.

1999-10-21  Paolo Bonzini  <bonzini@gnu.org>

	* lib/dict.c: Added characterArrayClass
	* lib/dict.h: Added characterArrayClass
	* lib/lib.c: Added CharArray.st

1999-10-20  Paolo Bonzini  <bonzini@gnu.org>

	* lib/dict.c: The new startup sequence (Oct 9) allowed to
	make the dictInit function (now called initNilVec) static.
	So that has been done since dictInit was just a hack:
	it initialized variables in dict.c like initDictionary,
	but while the latter is called from lib.c, dictInit had to
	be called from initOOPTable and loadFromFile).
	* lib/dict.h: Removed declaration of dictInit.
	* lib/oop.c: Removed call to dictInit.

1999-10-12  Paolo Bonzini  <bonzini@gnu.org>

	* lib/dld_hpux.c: `return 0' was missing in gst_dld_init
	* lib/lib.c: Put the image in the local directory if the
	image directory is missing or not writeable.
	* lib/sysdep.c: Added fileIsWriteable, plus usage of time_t;
	strdup was erroneously declared in getFullFileName.

1999-10-11  Paolo Bonzini  <bonzini@gnu.org>
	
	* lib/comp.c: Removed addForcedSelector (a copy of addForcedObject).
	Open coding of #whileTrue, #whileFalse, #repeat; removed open
	coding of #yourself.
	* lib/dict.c: Restored lookupKeyClass and its definition as I
	finally understood what it was meant to do; modified Association's
	definition (doesn't include key instance variable anymore).
	* lib/dict.h: Same as above

1999-10-10  Paolo Bonzini  <bonzini@gnu.org>

	* lib/oop.c: Added reallocOOPTable.
	* lib/oop.inl: Call reallocOOPTable instead of exiting when
	ran out of OOP table slots.
	* lib/save.c: FixupObject, restoreObject, restoreInstanceVars accept
	an gst_object instead of an OOP; more coherent with their names and
	a bit more efficient too.  Also moved updating of CFunctionDescriptors
	from restoreInstanceVars to fixupOOPInstanceVars (it is not needed
	when saving, only when loading, and was the only part of the code
	that required the parameters to be OOPs).
	* lib/save.h: FixupObject and restoreObject are now public.

1999-10-10  Paolo Bonzini  <bonzini@gnu.org>

	* lib/gst.h: Define the `min' and `max' macros.
	* lib/lib.c: Used oopTableSize instead of OOP_TABLE_SIZE;
	use additional parameter to initOOPTable.
	* lib/oop.c: Added to initOOPTable a parameter to specify the
	table size; defined oopTableSize and used instead of
	OOP_TABLE_SIZE.
	* lib/oop.h: OOP_TABLE_SIZE became INITIAL_OOP_TABLE_SIZE;
	declared oopTableSize.
	* lib/oop.inl: Used oopTableSize instead of OOP_TABLE_SIZE
	* lib/prims.inl: Used oopTableSize instead of OOP_TABLE_SIZE
	* lib/save.c: Used oopTableSize instead of OOP_TABLE_SIZE;
	use additional parameter to initOOPTable.

1999-10-10  Paolo Bonzini  <bonzini@gnu.org>

	* lib/oop.c: Moved builtin objects at the front of the oop table;
	this is a first step towards a variable-sized oop table
	(believe it or not, I did it in less than half an hour!!).
	* lib/oop.h: Same as above.
	* lib/oop.inl: Same as above.
	* lib/prims.inl: Same as above.
	* lib/save.c: Same as above.
	* lib/sym.c: Same as above.

1999-10-09  Paolo Bonzini  <bonzini@gnu.org>

	*** Second beta of 1.7 (labeled 1.6.81) released

	* lib/bytecode.inl: Added a few experimental branch labels
	for the dynamic translator.
	* lib/prims.inl: Added primitive 90 to flush the dynamic
	translator's code cache.

	* lib/dict.c: Added code to reinitialize the global OOPs (which
	are not saved anymore so that the image is more compatible). Also,
	the OOP indices associated to Smalltalk, Processor and the
	SymbolTable are fixed so that we know them without storing them
	in the image file. Finally, declare the `Undeclared' dictionary in
	initSmalltalkDictionary().
	* lib/oop.c: Removed markGlobalOOPs (instead, just mark the
	`Smalltalk' dictionary).
	* lib/save.c: Removed the global OOPs; they are reinitialized
	every time in dict.c.
	* lib/save.h: Removed the global OOPs
	* lib/sym.c: Added undeclaredSymbol, and used in findClassVariable.
	* lib/sym.h: Added undeclaredSymbol.

1999-10-07  Paolo Bonzini  <bonzini@gnu.org>

	* lib/dict.c: Restored old MethodDictionary class (see
	March 29th, 1989 entry!) It was needed after all.
	* lib/dict.h: Same as above
	* lib/lib.c: Same as above
	* lib/save.c: Same as above
	* lib/sysdep.c: Fixed faked closePipe to return status of child
	process.

1999-10-02  Paolo Bonzini  <bonzini@gnu.org>

	* lib/comp.c: Was trimming the last character of the method's
	source code in FileSegments.
	* lib/lex.c: Was trimming the last character of the method's
	source code when creating Strings from source code read from
	a file.
	* lib/lib.c: Added -K option, don't crash on -I/-L/-K without
	mandatory argument.

1999-09-26  Paolo Bonzini  <bonzini@gnu.org>

	* lib/interp.c: InitProcessSystem removed the initial process from
	its own process list -- result: as soon as `Processor yield' was
	called, highestPriorityProcess did not know that the active process
	was active!
	* lib/prims.inl: Relinquish control to other processes on #yield.
	* lib/lib.c: `gst -a' caused a segmentation violation
	* lib/sysdep.h: Declaration of `relinquish'.
	* lib/sysdep.c: Implemented `relinquish'.

1999-09-25  Paolo Bonzini  <bonzini@gnu.org>

	*** First beta of 1.7 (labeled 1.6.80) released

	* lib/bytecode.inl: Use areInts in open-coded operators.
	* lib/gst.h: Added areInts, removed F_FINALIZING.
	* lib/oop.c: Store objects to be finalized in a buffer, to avoid
	an OOP table scan.
	* lib/str.h: Added declaration of generic buffer functions
	* lib/str.c: Added generic buffer functions (not limited to chars)
	* lib/dld_aix.c: Added
	* lib/waitpid.c: Added
	* lib/strtoul.c: Added

1999-09-23  Paolo Bonzini  <bonzini@gnu.org>

	* lib/dynamic.c: Created.
	* lib/dynamic.h: Created.
	* lib/obstack.c: Added, fixed to use _obstack_memcpy.
	* lib/obstack.h: Added.
	* lib/sysdep.h: Added flushCode.
	* lib/sysdep.c: Added flushCode & signalAfter implementation using
	fork()+getMilliTime().

1999-09-19  Paolo Bonzini  <bonzini@gnu.org>

	* lib/dict.c: Declare lookupTableClass
	* lib/dict.h: Declare lookupTableClass
	* lib/lib.c: Load LookupTbl.st and WeakObjects.st

1999-09-18  Paolo Bonzini  <bonzini@gnu.org>

	* lib/gst.y: Include "lib.h", define YYPRINT
	* lib/lex.c: Define yyprint
	* lib/lex.h: Declare yyprint
	* lib/lib.h: Added declaration of "quietExecution", previously only
	in lib.c

1999-09-15  Paolo Bonzini  <bonzini@gnu.org>

	* lib/cint.c: Added mkdir declaration.

1999-09-14  Paolo Bonzini  <bonzini@gnu.org>

	* lib/dict.c: Added DefaultSortBlock to SortedCollection.
	* lib/lex.c: Fixed bug; 8-bit characters *outside* string literals
	crashed the lexer.
	* lib/sysdep.c: Use getcwd if HAVE_GETCWD (new symbol) is set and
	getwd otherwise.  Old behavior was to use getcwd if HAVE_UNISTD_H
	was set and getwd if HAVE_GETWD was set

1999-09-13  Paolo Bonzini  <bonzini@gnu.org>

	* lib/comp.c: Compile doits in UndefinedObject.

1999-09-12  Paolo Bonzini  <bonzini@gnu.org>

	* lib/dict.c: Moved variables from ClassDescription; instanceVariables to
	Behavior; name/comment/category/environment to Class (they make no sense
	in Metaclass!).
	* lib/dict.h: Same as above.

1999-09-11  Paolo Bonzini  <bonzini@gnu.org>

	* lib/comp.c: Changes for namespaces (execute doits in the current namespace).
	* lib/dict.c: Same as above (shared pool variable search algorithm,
	new `environment' variable, declaration of currentNamespace).
	* lib/dict.h: Same as above (added `environment' variable to ClassDescription,
	declaration of currentNamespace).
	* lib/dict.inl: Same as above (setClassEnvironment).
	* lib/prims.c: Same as above (primitive 250 to tell the compiler about the
	current namespace).
	* lib/save.c: Same as above (added uppercaseSuperSymbol, currentNamespace).
	* lib/sym.c: Same as above (shared pool variable search algorithm).
	* lib/sym.h: Same as above (added uppercaseSuperSymbol).

1999-09-10  Paolo Bonzini  <bonzini@gnu.org>

	* lib/dict.c: VariableWordSubclasses use accessors for 32-bit integers.
	BlockClosures are now variableWordSubclasses since the previous encoding
	was incompatible with the code to switch the endianness in a saved image.
	* lib/dict.inl: Added accessors for 32-bit integers (64-bit on Alphas).
	* lib/gst.h: Added warning that says Alphas are not ok yet.
	* lib/gst.y: Shell was unusable after a parse error -- solved.
	* lib/interp.h: New encoding of BlockClosures (see above).
	* lib/prims.inl: C object and memory address primitives use the above
	accessors.

1999-09-08  Paolo Bonzini  <bonzini@gnu.org>

	* lib/prims.inl: Flush the FileStream before reading its size.

1999-09-06  Paolo Bonzini  <bonzini@gnu.org>

	* lib/dict.c: Added idleTasks variable to ProcessorScheduler.
	* lib/interp.h: Added idleTasks variable to ProcessorScheduler.
	* lib/lib.c: Allowed -- to stop option parsing, to comply with getopt.
	* lib/sysdep.c: Added POSIX interrupt handling (sigprocmask); Win32
	code for alarms now uses kill(2) instead of manually calling the
	handler.

1999-09-02  Paolo Bonzini  <bonzini@gnu.org>

	* lib/gst.y: Added support for [ :a :b || temp1 temp2 | ].
	* lib/lex.c: UnreadChar not static anymore.  Also removed scanStringoid
	and moved its code to stringLiteral.  Parsing a comment does not
	actually require to store the whole comment in memory, so it is a
	conceptually different operation.  Fixed for the change to str.c below.
	Removed memory leak in printToken (not so important since it's just
	debugging code, but it's a bug).
	* lib/lex.h: UnreadChar is now extern.
	* lib/lib.c: Removed references to resizeString.
	* lib/str.c: Removed resizeString, curStrBuf now returns a copy of the
	string (previously it was a chore left to its caller through strdup).

1999-08-31  Paolo Bonzini  <bonzini@gnu.org>

	* lib/interp.c: Registers where the interpreter's ip and sp stay are
	hard-coded for most architectures.  Added definitions for the high
	speed interpreter with dynamic translation.
	* lib/interp.inl: Moved internal accessors to interp.c; moved object
	equality and hashing functions to dict.inl (the only places where they
	were actually used).

1999-08-30  Paolo Bonzini  <bonzini@gnu.org>

	* lib/bytecode.inl: Created from part of interp.c
	* lib/gst.h: Removed `extern' definition of the instruction pointer.
	* lib/interp.c: Made the instruction pointer static; prepared for the
	new bytecode.inl file; relativeByteIndex is replaced by
	currentBytecodeIndex; added definitions of the latter macro.
	* lib/interp.inl: Removed relativeByteIndex.
	* lib/prims.inl: RelativeByteIndex is replaced by currentBytecodeIndex.

1999-08-29  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 1.6.2 released.

1999-08-27  Paolo Bonzini  <bonzini@gnu.org>

	* lib/cint.c: Always define DLD functions (at worst they're stubs)
	* lib/dld_none.c: Created.
	* lib/lib.c: Always load DLD.st (at worst it refers to C stubs)

1999-08-26  Paolo Bonzini  <bonzini@gnu.org>

	* lib/dict.c: Put CDoubleMin and CDoubleMax in the Smalltalk dictionary.
	* lib/interp.c: NEXT_BYTECODE was not defined for old (switch statement)
	dispatching.

1999-08-08  Paolo Bonzini  <bonzini@gnu.org>

	* lib/dict.c: In initRuntimeObjects, define the ImageFileName global
	as equal to binaryImageName.
	* lib/lib.c: Load .stpre only when creating local image files.  Removed
	findImageFile.  Option -v shows the hard-coded kernel and image paths.
	binaryImageName is not static anymore, defaultImageName is.
	* lib/lib.h: Removed findImageFile.  binaryImageName is now declared
	here as an extern symbol, and defaultImageName is not.
	* lib/prims.inl: `Smalltalk snapshot' primitive (250) removed -- the
	new ImageFileName global makes it redundant.
	* lib/save.c: LoadFromFile now expects a full path to the image just like
	saveToFile, does not call findImageFile.

1999-08-07  Paolo Bonzini  <bonzini@gnu.org>

	* lib/cint.c: Declare `unlink' (valid only for files) instead of `remove'
	(which nukes whole directories too) to be used to implement
	File class>>#primRemove:
	* lib/sysdep.c: Added simulation of popen and pclose in openPipe
	and closePipe.

1999-08-07  Paolo Bonzini  <bonzini@gnu.org>

	* lib/dict.h: InitSTDIOObjects became initRuntimeObjects
	* lib/dict.c: InitSTDIOObjects became initRuntimeObjects, and various
	initializations (Features, KernelPath, ImagePath) were moved here from
	initSmalltalkDictionary.  This completes the change made on July 14th.
	* lib/lib.c: InitSTDIOObjects became initRuntimeObjects

1999-08-06  Paolo Bonzini  <bonzini@gnu.org>

	* lib/interp.inl: RelativeByteIndex now explicitly casts to int for
	Alpha compatibility.
	* lib/sym.c: Switched from int to long when dealing with differences
	between addresses, for Alpha compatibility.
	* lib/dict.c: Switched from int to long when dealing with differences
	between addresses, for Alpha compatibility.

1999-07-15  Paolo Bonzini  <bonzini@gnu.org>

	* lib/dld_gnu.c: Added gst_dld_exts (.o, .a)
	* lib/dld_gst.h: Added gst_dld_exts
	* lib/dld_gst.c: Added gst_dld_openext
	* lib/dld_hpux.c: Added gst_dld_exts (.sl)
	* lib/dld_ltdl.c: Added gst_dld_exts (dummy)
	* lib/dld_libdl.c: Added gst_dld_exts (.so, .a)
	* lib/dld_win32.c: Added gst_dld_exts (.dll, .exe)

1999-07-14  Paolo Bonzini  <bonzini@gnu.org>

	* lib/gst.h: Added F_BYTE, used while saving to ease reloading
	if the endianness changes.
	* lib/save.c: Added ability to load images from machines with
	different endianness and to recognize (and reject) images from
	machines with different sizeof(long).  This change unveiled a bug
	in GNU C 2.7.2!!!
	* lib/dld_ltdl.c: Created (thanks to Alexander Shinn for pointing
	me to libtool!)

1999-07-10  Paolo Bonzini  <bonzini@gnu.org>

	* lib/interp.c: InterruptHandler should set again the handler
	for SIGINT
	* lib/sysdep.c: Fixed syntax error. Also, sigaction should use
	SA_RESETHAND if available because signal is supposed to work
	that way.
	* lib/sysdep.c: #define SIGALRM if not provided by C headers.

1999-07-05  Paolo Bonzini  <bonzini@gnu.org>

	* gstconf.h.in: Changed USE_READLINE to HAVE_READLINE (more coherent)
	* gstconf.h: Same as above
	* lib/comp.c: Same as above
	* lib/lex.c: Same as above
	* lib/lex.h: Same as above
	* lib/lib.c: Same as above

1999-07-04  Paolo Bonzini  <bonzini@gnu.org>

	* lib/sysdep.c: Renamed dprintf to debugf. glibc 2.0 defines
	a different prototype for a function with the same name (glibc 2.1
	only defines it if __USE_GNU is defined and does not break gst).

1999-06-28  Paolo Bonzini  <bonzini@gnu.org>

	* lib/qsort.c: Added standard stuff to make alloca work.
	* lib/gstpub.h: Moved inclusion of gst.h *inside* `extern "C"'

1999-06-25  Paolo Bonzini  <bonzini@gnu.org>

	*** Bug-fixing version 1.6.1 released.

1999-06-21  Paolo Bonzini  <bonzini@gnu.org>

	* lib/alloc.c: In xrealloc, we must call malloc explicitly when
	the first argument is 0, since some reallocs don't do this.
	* lib/cint.c: Fix for Solaris' brokenness (in their stat.h, they use
	`#define st_atime st_atim.tv_sec')
	* lib/qsort.c: Added (from GCC).

1999-06-17  Mark Elbrecht  <snowball@bigfoot.com>

	*** Version 1.6 released.
	* lib/lex.c: Fix crash when using drive letters in isKernelFile.
	* lib/lib.c: For DOS, use '_stinit' and '_stpre' as init files since
	DOS doesn't allow a period to start a filename.

1999-06-09  Pahi Andras  <pahi@mozart.eet.bme.hu>

	* lib/cint.c: DefineCFunc makes a private copy with strdup of the
	C function's name. The problem is likely to root to the pre-DLD days
	(1989-1990) when only string constants were passed to defineCFunc, so
	strdup was unnecessary.

1999-06-03  Paolo Bonzini  <bonzini@gnu.org>

	* lib/comp.c: Added displayCompilationTrace
	* lib/comp.h: Added declaration of displayCompilationTrace
	* lib/prims.inl: If declaration tracing is on, shows new
	categories as encountered.

1999-05-30  Paolo Bonzini  <bonzini@gnu.org>

	* lib/gst.h: Added default values for the definitions that used to
	be in gstpaths.h
	* lib/gstpaths.h: Removed since configure did not create it properly
	after the installer was fixed
	* lib/Makefile.in: Added definitions to be used in place of gstpaths.h
	* lib/lib.c: If the the paths cannot be located, try using the local
	directory
	* lib/lib.h: DefaultImageName is now a variable
	* lib/str.c: Added resizeString

1999-05-28  Paolo Bonzini  <bonzini@gnu.org>

	* lib/cint.c: Object passed as `unknown' or `self', whose class is not
	recognized, are now passed as an OOP (they used to be skipped).
	* lib/interp.c: the open-coded // was rounding like quo: Does.
	* lib/prims.inl: The base date for secondClock was 2 Jan 2000 instead
	of 1 Jan 2000.  This was apparent after the fix above.

1999-05-20  Paolo Bonzini  <bonzini@gnu.org>

	* lib/alloc.c: Moved platform-dependent definitions here.  Modified
	so that, if we replace libc's allocator, we define calloc too (see
	glibc's manual).  Also modified so that xmalloc exits if it fails.
	* lib/alloc.h: Removed platform-dependent definitions.  Now this
	file only contains extern declarations (correctly).

1999-05-15  Paolo Bonzini  <bonzini@gnu.org>

	* lib/gst.h: Added code to #define `volatile' to nothing if it is
	not supported.
	* lib/interp.c: Modified to pass through -Wall when optimization
	is on.  This highlighted a possible (although never observed) bug in
	sendMessageInternal: the setjmp/longjmps in executePrimitiveOperation
	could have clobbered methodOOP, which is now declared volatile.

1999-05-14  Paolo Bonzini  <bonzini@gnu.org>

	* lib/byte.c: Modified to (almost) pass through -Wall.
	* lib/cint.c: Modified to pass through -Wall.
	* lib/comp.c: Modified to pass through -Wall.
	* lib/dict.c: Modified to pass through -Wall.
	* lib/dict.inl: Modified to pass through -Wall.
	* lib/gstpub.h: Added C++ `extern "C"' guard.
	* lib/interp.c: Modified to pass through -Wall.
	* lib/interp.inl: Modified to pass through -Wall.
	* lib/lex.c: Modified to pass through -Wall.
	* lib/oop.c: Modified to pass through -Wall.
	* lib/save.c: Modified to pass through -Wall.
	* lib/sym.c: Modified to pass through -Wall.

1999-05-13  Paolo Bonzini  <bonzini@gnu.org>

	* lib/callin.c: Added objectAlloc.
	* lib/gst.h: Added guards to avoid including heavily implementation
	dependent stuff when gst.h is included by gstpub.h
	* lib/gstpub.h: Changed to use those guards.
	* lib/dld_hpux.c: Created.
	* lib/dld_libdl.c: New name of dld_sun.c
	* lib/lex.c: Stream description for readline streams is not
	`a Readline string' anymore, but `stdin' (since that's where we
	actually get the string).  Also, when readline is used I also
	include <readline/history.h> now; and I disable readline's auto-
	completion feature, not supported by gst (initializeReadline).


1999-05-11  Paolo Bonzini  <bonzini@gnu.org>

	* lib/comp.c: Various performance counters are now unsigned longs.
	* lib/comp.h: Various performance counters are now unsigned longs.
	* lib/interp.c: #mustBeBoolean is now sent to the object that should
	have been a Boolean, as the Blue Book says.  Plus, same as above.
	* lib/interp.h: Various performance counters are now unsigned longs.

1999-05-09  Paolo Bonzini  <bonzini@gnu.org>

	* lib/id.c: Removed -- I'm very sorry to do it, since it was created
	10 1/2 years ago, but it was a copy of str.c
	* lib/id.h: Removed -- I'm very sorry to do it, since it was created
	10 1/2 years ago, but it was a copy of str.h
	* lib/lex.c: Removed references to function that used to be in poor id.c;
	changed references to copyStr to use strdup.
	* lib/prims.inl: Added code to test for infinity, NaNs and other failures
	in mathematical functions (exp/ln/sqrt/trigonometry).
	* lib/str.c: Removed copyStr.
	* lib/sysdep.h: Added portable macros to test for nan and infinity.
	Not all libc's have isnan, isinfinity and the like.

1999-05-08  Paolo Bonzini  <bonzini@gnu.org>

	* lib/comp.c: fixed bug when compiling to:do:/to:by:do: And the loop
	index temporary was in position 15 (a 2-byte push was erroneously
	compiled, since a 1-byte push can be used).
	* lib/interp.c: Did not trap divides by zero on open-coded // messages.
	* lib/lib.c: Added Transcript.st to the list of kernel files.
	* lib/oop.c: Character objects' objSize field was uninitialized. Fixed.
	* lib/prims.inl: fixed SIGSEGV on (IndexableClass new: ANegativeNumber).

1999-05-06  Paolo Bonzini  <bonzini@gnu.org>

	* lib/dict.c: Added exceptionHandlers variable to Process.
	* lib/gst.y: Fixed bug with conditional compilation -- conditional
	exclusion was not disabled by the double bang sequence.
	* lib/interp.h: Added exceptionHandlers variable to Process.

1999-05-03  Paolo Bonzini  <bonzini@gnu.org>

	* lib/interp.c: Changed the system message #booleanRequired to
	#mustBeBoolean for coherence with the Blue Book (I had not noted
	that passage).  Fixed async signals (actually, I just removed
	the error messages -- they seem to work as they are and their
	implementation is exactly the same as in the book...) and
	changed the signal handling routines to use them instead of
	separate variables.  Added asyncSignal().
	* lib/interp.h: Added declarations for asyncSignal().
	* lib/interp.inl: Fixed unparenthesized arguments in the `equal' macro.
	* lib/gstpub.h: Added declarations for asyncSignal().
	* lib/lib.c: Search for a local copy of the kernel files in the
	`kernel' subdirectory of the local directory; always save the
	kernel sources as FileSegments.  This way, GNU Smalltalk works
	both if a) it is installed and the kernel lies in /usr/local/share
	b) it is not installed and everything is done inside the
	user's home directory c) it is not installed, we are under Windows
	and everything is done inside the current directory (maybe I'll
	switch to the executable directory in the future...)

1999-04-29  Paolo Bonzini  <bonzini@gnu.org>

	* lib/comp.c: Now does compile correctly optimized selectors whose
	block arguments have arguments or temporaries.  In fact I simply
	don't optimize them -- but maybe I will sooner or later.  Also,
	#timesRepeat:, #to:do: and #to:by:do: are now open-coded.
	Finally, I fixed the fact that the bytecodes for an erroneous method
	were put at the beginning of the next syntactically valid method.
	* lib/lib.c: The `Smalltalk Ready' banner is now `GNU Smalltalk Ready'.
	* lib/save.c: Added timesRepeatColonSymbol, toColonDoColonSymbol and
	toColonByColonDoColonSymbol.
	* lib/sym.c: Same as above.
	* lib/sym.h: Same as above.

1999-04-27  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 1.5.beta3 released.
	* lib/alloc.c: Added inclusion of stdlib.h (or malloc.h for old C's)
	when the custom allocator is not used.
	* lib/byte.c: Fixed optimization of pushIndexed.
	* lib/dld_sun.c: Added missing semicolon.
	* lib/interp.c: Finished new GCC implementation at last -- now we
	only have to do a single goto for EVERY bytecode.  Maybe something
	better could be done by caching dispatchVec in a register...  Auto-
	matic #undef-ining of USE_OLD_DISPATCH is now based on the new
	gstconf.h definition HAVE_GOTO_VOID_P (used to simply check __GNUC__).

1999-04-25  Paolo Bonzini  <bonzini@gnu.org>

	* lib/byte.c: Added optimization of nopBytecode.  Added `replace
	stack top' bytecodes 140-142 in optimizeBasicBlock.
	* lib/byte.h: Added `replace stack top' bytecodes.
	* lib/comp.c: Added yourselfSymbol in whichBuiltinSelector (yourself
	is now open-coded).
	* lib/interp.c: Added `replace stack top' bytecodes.
	* lib/prims.inl: Changed GC-tuning primitives (spaceGrowRate
	and growThreshold) to accept integers too.
	* lib/sym.h: Added yourselfSymbol.
	* lib/sym.c: Added yourselfSymbol.
	* lib/save.c: Added yourselfSymbol.

1999-04-23  Paolo Bonzini  <bonzini@gnu.org>

	* lib/gst.h: Cleaned up some definitions for ANSI features which
	can be checked by autoconf -- the old #ifdef method only makes things
	cumbersome.  Also renamed config.h to gstconf.h, so that it can be
	installed without filename clashes.
	* lib/interp.c: Changed verbose execution tracing to print the stack
	top *BEFORE* the bytecode -- the output is easier to follow.  Added
	jump lookahead (see definition of JUMP_LOOKAHEAD).
	* lib/oop.c: Began switching to something resembling a generational
	collector.  Changed GC-tuning variables (spaceGrowRate/growThreshold)
	to be integers -- because they are now checked in allocObj and doubles
	are more expensive in busy code, I think.

1999-04-22  Paolo Bonzini  <bonzini@gnu.org>

	* lib/byte.h: Merged bytecodes 138-139 (push/store outer temp) into a
	single bytecode 138, which can also do a `pop and store outer temp'.
	* lib/byte.c: Same as above. The new bytecode behaves much like bytecode
	126, so the code for that bytecode in the optimizer can be used by the
	new bytecode too.  Added more cases in the peephole optimizer.
	* lib/comp.c: Same as above.
	* lib/interp.c: Same as above. Moved various optimization #define's at
	the top of the file.

1999-04-20  Paolo Bonzini  <bonzini@gnu.org>

	* lib/byte.c: Optimizer in and working.  Fixed challenging cases in
	the flow analyzer which were apparent now because the peephole
	optimizer does some `interesting' changes to the bytecode -- previously
	the changes were not `interesting' enough for these bugs to show up.
	Performance +5-10%, but some interesting optimizations are not there
	yet (e.g. pop-store/push --> store, and push/push --> dup).

1999-04-19  Paolo Bonzini  <bonzini@gnu.org>

	* lib/byte.c: Added to the flow analysis some support for optimizing
	#ifTrue: and #ifFalse: in the common case where their result is
	discarded.  Added a first peephole optimizer in optimizeBasicBlock.
	* lib/byte.h: Added nop bytecode 139
	* lib/comp.c: Changed the compilatation of #ifTrue:/#ifFalse: to one
	which is more optimizable if the result is discarded.  #and:/#or: are
	left as they were because their result is usually kept.  Also ALWAYS
	put a pop bytecode at the end of a statement -- it makes flow analysis
	simpler and is removed by the peephole optimizer if unnecessary.
	* lib/interp.c: Added nop bytecode 139

1999-04-18  Paolo Bonzini  <bonzini@gnu.org>

	* lib/byte.c: The new optimization scheme proved to be easily
	extendable (which is what I wanted). I added jump optimization
	(10 lines of code) and unreachable code elimination (5 lines) -- no
	big speed improvements, but now I have moer experience with
	optimization and will approach peepholing.
	* lib/byte.c: Modified various internal functions to avoid continuous
	reallocation of bytecodes.  For instance, reallocByteCodes uses
	xrealloc() -- it was always malloc-ing everything from scratch --
	and allocByteCodes and reallocByteCodes have a parameter with the
	amount of memory to be allocated.
	* lib/cint.c: Call initDldLib if HAVE_DLD is defined.

1999-04-16  Paolo Bonzini  <bonzini@gnu.org>

	* lib/dld_gst.c: Created from old cxtnsn/dld.c
	* lib/dld_gst.h: Created
	* lib/dld_gnu.c: Created
	* lib/dld_sun.c: Created
	* lib/dld_win32.c: Created
	* lib/byte.c: Changed the algorithm for optimizeByteCodes.  Instead of
	doing a single scan on the bytecodes and fixing up jumps the hard way,
	I'm now dividing the bytecodes into basic blocks, optimizing each of
	them one at a time in optimizeBasicBlock.
	* lib/dict.c: Moved hasBlock to ContextPart, yanked it out from
	BlockContext and MethodContext.
	* lib/interp.c: Moved hasBlock to the fourth position (inside
	MethodContexts and BlockContexts) so that we can put it in ContextPart.
	* lib/lib.c: Load DLD.st from kernel if HAVE_DLD is defined.

1999-04-12  Paolo Bonzini  <bonzini@gnu.org>

	* lib/sysdep.c: Functions handling time_t's now use signed longs.
	* lib/sysdep.c: Stole more portable implementations of adjustTimeZone
	and currentTimeZoneBias from GNU Emacs.  Added support for broken
	versions of localTime(3) that cache the time zone.
	* lib/sysdep.h: Functions handling time_t's now use signed longs.

1999-04-10  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 1.5.beta2 released.
	* lib/cint.c: My_stat now adjusts file times to local times.
	* lib/sysdep.c: Added adjustTimeZone and currentTimeZoneBias.
	* lib/sysdep.h: Added adjustTimeZone and currentTimeZoneBias.

1999-04-09  Paolo Bonzini  <bonzini@gnu.org>

	* lib/cint.c: Fixed my_stat to return times relative to 1/1/2000
	to avoid possible overflows (which would have happened around 2004
	on 32-bit machine, and around 8.000.000.000 AD on 64-bit ones...).

1999-04-08  Paolo Bonzini  <bonzini@gnu.org>

	* lib/interp.c: Fixed bug in sendMessageInternal and sendBlockValue.
	Basically, we now make sure that sp and thisContext->spOffset are
	consistent whenever a GC could happen; otherwise, fixupObjectPointers
	recomputes thisContext->spOffset from sp, storing an erroneous value
	into the former.

1999-03-29  Paolo Bonzini  <bonzini@gnu.org>

	* lib/gst.h: Added definition of WIN32 because Cygwin only defines
	_WIN32, but many programs rely on WIN32 instead.

1999-03-22  Paolo Bonzini  <bonzini@gnu.org>

	* lib/sysdep.c: Fixed Win32 version of Delays, which was buggy if a
	delay had to cancel the previous one.  The new version is also much
	more precise.

1999-03-21  Paolo Bonzini  <bonzini@gnu.org>

	* lib/interp.c: Changed Integer relational operators to not do a
	toInt() (instead we use a simple typecast).

1999-03-15  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 1.5.beta1 released.
	* lib/dict.c: Changed to use setCObjectValueObj and cObjectValueObj.
	* lib/dict.h: Doc fixes for CObject.
	* lib/dict.inl: Added setCObjectValueObj and cObjectValueObj.  Now, the
	address pointed by the CObject is the LAST instance variable (including
	indexed ones), not always the SECOND (which could still be a fixed
	one).  For currently defined CObject subclasses this was not a problem,
	but it could have been a serious one if a CObject subclass declared
	additional instance variables.
	* lib/prims.inl: Changed to use setCObjectValueObj and cObjectValueObj.

1999-03-13  Paolo Bonzini  <bonzini@gnu.org>

	* lib/cint.c: Was crashing if a call-out to a non-existent function
	was attempted.
	* lib/comp.c: Fixed a strange bug I'm not sure I understood well. It
	seems that, if an error occurred in a method with literals, and if an
	immediately following method had literals, the literal array
	contained bogus data and GST would lose.  I don't think it was there
	before my March 3rd change...

1999-03-11  Paolo Bonzini  <bonzini@gnu.org>

	* lib/lib.c: Added --silent as a synonim of --quiet and -q.

1999-03-03  Paolo Bonzini  <bonzini@gnu.org>

	* lib/comp.c: Added stack depth tracing (variables and macros
	containing stackDepth).  Made makeNewMethod public, to avoid lots of
	duplicate code for the C and Smalltalk compiler.
	* lib/prims.inl: Added primitive 79, which maps to makeNewMethod.
	* lib/interp.c: Added support for mixed size contexts. Added
	resetFakeContexts.
	* lib/interp.c: The change above unveiled lots of bugs - especially
	uninitialized pointers here and there. In particular: a) GST would
	core dump when you did a send to super from a class without a
	superclass; b) prepareExecutionEnvironment set the stack pointer of
	the context to 0 instead of -1 so markAnOOPInternal would try to
	mark an additional stack slot.
	* lib/oop.c: In minorGCFlip, call resetFakeContexts at the end instead
	of using deallocFakeContext for every context.

1999-02-28  Paolo Bonzini  <bonzini@gnu.org>

	* lib/comp.c: Modified compileAssignments to use preferrably the
	`storeIndexed' bytecode. This is faster and also makes the task
	of an eventual bytecode optimizer a bit simpler.
	* lib/byte.c: Added truncateByteCodes.  Moved optimizeByteCodes
	here and made it extern (it was a static in lib/comp.c), and added
	it some (working but currently not used) code.
	* lib/byte.h: Added optimizeByteCodes and truncateByteCodes

1999-02-27  Paolo Bonzini  <bonzini@gnu.org>

	* lib/prims.inl: Added primitive 101 (ProcessorScheduler>>
	isTimeoutProgrammed).
	* lib/dict.c: Added DelayProcess and IdleProcess as
	Delay's class variables
	* lib/interp.c: In initProcessSystem, leave the processes the way
	they were unless we get here after a deadlock.

1999-02-26  Paolo Bonzini  <bonzini@gnu.org>

	* lib/interp.c: Changes to have an error-free compile with
	-pedantic.  Also fixed highestPriorityProcess to return the
	active process if it is not waiting on a semaphore (because
	`Processor yield' must not stop execution if the only
	runnable process is the active one).
	* lib/lex.c: Added support for -s command line option in
	isKernelFile.
	* lib/lib.c: Added -s command line option.
	* lib/oop.c: Removed arithmetics on void * in realizeOOPs.

1999-02-23  Paolo Bonzini  <bonzini@gnu.org>

	* lib/gst.y: Added #'abcd' symbols (not in Smalltalk-80,
	but ANSI and common in many commercial Smalltalk
	implementations).

1999-02-22  Paolo Bonzini  <bonzini@gnu.org>

	* lib/lib.c: Moved some initializations *after* parsing the
	command line (obviously *before* loading user files),
	so that parameters on the cmdline can influence the
	initialization process.

1999-02-21  Paolo Bonzini  <bonzini@gnu.org>

	* lib/interp.c: Added printing of what is the erroneous method in
	sendMessageInternal.  Also renamed global SP/IP to outerSP and
	outerIP (which are then #defined to ip and sp in gst.h), so that
	there is no name collision between the local IP/SP and the global
	ones; and eliminating ipAddr/spAddr we get some more speed. But
	remember this when using GDB!!

1999-02-18  Paolo Bonzini  <bonzini@gnu.org>

	* lib/interp.c: Struggled to make the process system work as
	intended; it still has a few bugs but it mostly works (for
	example, philosophers now work).

1999-02-16  Paolo Bonzini  <bonzini@gnu.org>

	* lib/oop.c: Started switching to generational GC!! In short,
	minor GCs only take care of fake contexts and are faster 
	because no sweeping happens; major GCs don't bother of 
	fake contexts (they assume there are none) and deal with 
	removing real unused objects.

1999-02-15  Paolo Bonzini  <bonzini@gnu.org>

	* lib/byte.h: Added bigLiteral bytecode.
	* lib/comp.c: Changed so that methods are normal objects - no
	more variable classes and variable byte classes at
	the same time. Now, the header does not include the
	number of literals, so I also added code to use the
	new 126 bytecode.
	* lib/interp.c: Changed so that methods are normal objects - no more
	variable classes and variable byte classes at the
	same time.
	* lib/interp.inl: Changed so that methods are normal objects - no more
	variable classes and variable byte classes at the
	same time.
	* lib/prims.inl: Now methods are normal objects - no more variable
	classes and variable byte classes at the same time.
	So I removed primitives 68/69/79.
	* lib/save.c: Changed so that methods are normal objects - no more
	variable classes and variable byte classes at the
	same time.

1999-02-14  Paolo Bonzini  <bonzini@gnu.org>

	* lib/oop.c: Experimentally moved markGlobalOOPs at the START
	of the marking phase, so that by the time the other
	objects in the root set are dealt with, many objects
	will have been marked. This might improve a bit GC
	locality of reference.
	* lib/save.c: Experimentally reorganized the global OOPs.
	smalltalkDictionary and the symbols at the END of
	the global OOP table, so that by the time they are
	marked other objects will have been dealt with and
	recursion will be more shallow; this might improve
	a bit GC locality of reference.

1999-02-13  Paolo Bonzini  <bonzini@gnu.org>

	* lib/sysdep.c: Using setSignalHandler() inside signalAfter().

1999-02-12  Paolo Bonzini  <bonzini@gnu.org>

	* lib/sysdep.c: GetCurDirName, now performs special error handling
	when getcwd is used (code stolen from the gettext
	library's source code, by David MacKenzie).

1999-02-09  Paolo Bonzini  <bonzini@gnu.org>

	* lib/gst.h: Moved incubator here from oop.h so that it is public
	* lib/oop.h: Moved incubator to gst.h so that it is public (see
	comment in GST 1.1.5 - "it is likely that this
	interface will be moved..."

1999-02-08  Paolo Bonzini  <bonzini@gnu.org>

	* lib/byte.c: Print new bytecode 126 for many literals, > 64.
	* lib/cint.c: Removed code to print "function not registered"
	message - Smalltalk code handles that now.
	* lib/lib.c: CFuncs.st is now loaded *after* CObject and CType -
	a logical choice since C function declarations could
	use CTypes.  Added PkgLoader.

1999-02-06  Paolo Bonzini  <bonzini@gnu.org>

	* lib/prims.inl: Sped up nextInstance by avoiding to search in the
	unused OOPs.

1999-02-05  Paolo Bonzini  <bonzini@gnu.org>

	* lib/interp.c: Added callbacks #booleanRequired and #interrupt.
	Implemented bytecode 126 for many literals, > 64.
	* lib/prims.inl: Primitive 255 now does not blindly set inCCode to
	false if a C callout made a callin which in turn made
	a callout.

1999-02-04  Paolo Bonzini  <bonzini@gnu.org>

	* lib/lex.c: Modified so that a bang is not part of a binary op.
	It's just a one-char token like [ and #.  Needs
	fixing, though.

1999-02-03  Paolo Bonzini  <bonzini@gnu.org>

	* lib/callin.c: Changed calls to yyparse() to parseStream().
	* lib/comp.c: Changed calls to yyparse() to parseStream().
	* lib/interp.c: Changed calls to yyparse() to parseStream().
	* lib/gst.y: More attempts at simplifying things around:
	now an expression invoking methodsFor: can be
	as complex as desired. In addition I changed
	temporaries and primitive to have a default value,
	so that almost-duplicated rules (e.g. `statements',
	`temporaries primitive statements', `temporaries
	statements', `temporaries primitive') can be put
	into a single one. Alas this causes 4 shift/reduce
	conflicts (2 in state 0, 2 in state 6) but Bison
	gracefully handles them and it makes the grammar more
	readable IMO.
	* lib/lex.c: Moved lex debugging here.  In addition, now
	you can compile this with NO_PARSE so that no parsing
	occurs - only lexical analysis.  To accomplish this, the
	callers need to call a function in lib/lex.c (parseStream)
	instead of yyparse().
	* lib/lib.c: Updated lex debugging and moved it to lex.c

1999-02-02  Paolo Bonzini  <bonzini@gnu.org>

	* lib/alloc.c: Added custom allocator, currently used only under
	Win32.  See comment in the file.
	* lib/alloc.h: Added custom allocator, currently used only under
	Win32.  See comment in the file.
	* lib/sym.c: internCountedString: The symbol OOP is now read only.

1999-02-01  Paolo Bonzini  <bonzini@gnu.org>

	* lib/oop.c: Fix in growMemory. Now it seems to work right -
	previously, it failed if thisContext was not a fake
	and the heap moved.

1999-01-29  Paolo Bonzini  <bonzini@gnu.org>

	* lib/byte.c: Modified isSimpleReturn so that a "return literal[0]"
	method is optimized.
	* lib/comp.c: Modified isSimpleReturn (in byte.c) so that a "return
	literal[0]" method is optimized. The "primitive must
	be executed" case, which was previously identified by
	flags == 3, is now identified by primitiveIndex != 0.

1999-01-28  Paolo Bonzini  <bonzini@gnu.org>

	* lib/comp.c: Moved regressionTesting to lib.c; it seems more
	logical to me.
	* lib/gst.h: fix in incrInt/decrInt: It was not converting the
	OOP to a long before adding 2 - so it was actually
	adding sizeof(OOP)*2 = 16!
	* lib/lib.c: To make -S work when -i was specified too.
	* lib/oop.c: NilOOP, trueOOP and falseOOP are now initialized in
	allocOOPTable(), not initOOPTable(). Actually I can't
	guess why they weren't there in the first place.
	* lib/prims.inl: Added check for already closed file in fileOp: (if
	fileStream->file = nilOOP, fail). Added flushPrim
	and getBytePrim.
	* lib/save.c: Removed experimentally the code that saves and
	restores nil, true, false and the characters:
	why can't we initialize them just like if we were
	initializing the system from scratch, without
	an image?
	* lib/sysdep.c: OpenFile, removed references to BINARY_MODE_NEEDED
	(I had to remove it from the configure script because
	it did not work correctly, at least under Cygnus'
	Win32 port.

1999-01-27  Paolo Bonzini  <bonzini@gnu.org>

	* lib/dict.c: Smalltalk dictionary is now created with a larger
	size than it used to be (see the definition of INITIAL_SMALLTALK_SIZE).
	* lib/interp.c: Made the method cache an array of a struct instead of
	five different arrays.  A "return literal" method is
	optimized like "return self" and "return inst. var".

1999-01-26  Paolo Bonzini  <bonzini@gnu.org>

	* lib/comp.c: Removed code for evaluating (parse last statement as
	return) - not needed since Smalltalk code implements
	evaluate: Also changed references to findVariable to
	prevent assignments into arguments.
	* lib/gst.y: Removed code to parse last statement as return -
	not needed since Smalltalk code implements evaluate:
	* lib/lex.c: Modified to have a variable indicating the name of
	the log file.
	* lib/lib.c: Changed -v to exit after the output, like
	--version. Added -l and -L to log to a file. Added
	long options.
	* lib/sym.c: Modified findVariable and localVarIndex so that
	assignments to arguments are detected.

1999-01-25  Paolo Bonzini  <bonzini@gnu.org>

	* lib/dict.inl: Spiffed it up with a few register clauses.
	Also removed modulus operator (%) when possible.
	This increased performance (especially in message
	sends) only by 5%, but it was so easy I could not
	but do it!

1999-01-24  Paolo Bonzini  <bonzini@gnu.org>

	* lib/alloc.c: Added this banner.
	* lib/alloc.h: Created.
	* lib/lex.c: Fixed lineStamp() so that the format is consistent
	with GCC and other GNU programs: for example,
	"Integer.st:115: parse error")

1999-01-22  Paolo Bonzini  <bonzini@gnu.org>

	* lib/gst.h: Moved SIG_ARG_TYPE from sysdep.c here.  Added paranoic
	checking of memset arguments when bzero is used.
	* lib/interp.c: Moved SIG_ARG_TYPE to gst.h
	* lib/sysdep.c: Moved SIG_ARG_TYPE to gst.h

1999-01-18  Paolo Bonzini  <bonzini@gnu.org>

	* lib/interp.inl: Fixed bug in large integers.  I was not considering
	that the product of the low-order 15 bits could exceed 15 bits!

1999-01-16  Paolo Bonzini  <bonzini@gnu.org>

	* lib/dict.h: Added byteStreamClass.
	* lib/interp.c: Yesterday I removed maxSize instance variable from
	WriteStream, so I had to remove it from the FileStream
	struct, either.
	* lib/lib.c: Added ByteStream.st.
	* lib/save.c: Added byteStreamClass.

1999-01-15  Paolo Bonzini  <bonzini@gnu.org>

	* lib/dict.c: Removed maxSize instance variable from WriteStream.
	Fixed missing isPipe parameter in addSTDIOObject.
	Added ByteStream.  Added CShortSize global.

1999-01-13  Paolo Bonzini  <bonzini@gnu.org>

	* lib/cint.c: Added getArgc and getArgv
	* lib/lib.c: Added ability to get argc/argv from Smalltalk code.
	* lib/sysdep.c: Fixed a small & invisible error, a 'start of comment'
	misplaced for a 'end of comment' (note by Paolo Bonzini  <bonzini@gnu.org>:
	congratulations for your sharp eye!!)

1999-01-11  Paolo Bonzini  <bonzini@gnu.org>

	* lib/dict.c: Yeah! Removed bitfields from InstanceSpec!!
	* lib/dict.h: Yeah! Removed bitfields from InstanceSpec!!
	* lib/dict.inl: Yeah! Removed bitfields from InstanceSpec!!
	* lib/gst.h: Yeah! Removed bitfields from InstanceSpec!!
	* lib/prims.inl: Yeah! Removed bitfields from InstanceSpec!!

1999-01-10  Paolo Bonzini  <bonzini@gnu.org>

	* lib/interp.c: Good!!  First change in 1999!!  Optimized out send to
	super.  I renamed sendMessage to sendMessageInternal
	and created two macros (sendMessage and sendToSuper)
	in interp.inl
	* lib/interp.h: Good!!  First change in 1999!!  Optimized out send to
	super.  I renamed sendMessage to sendMessageInternal
	and created two macros (sendMessage and sendToSuper)
	in interp.inl
	* lib/interp.inl: Good!!  First change in 1999!!  Optimized out send to
	super.  I renamed sendMessage to sendMessageInternal
	in interp.c and created two macros (sendMessage and
	sendToSuper) here.

1998-12-09  Paolo Bonzini  <bonzini@gnu.org>

	* lib/cint.c: Added my_stat for portability
	* lib/oop.c: Moved the code to nil out weak references *before*
	sweeping is done.  This is needed so that finalize
	methods which refer to weak objects already see nils.

1998-12-03  Paolo Bonzini  <bonzini@gnu.org>

	* lib/prims.inl: Added ability to create subclasses of CompiledMethod
	(for now, cannot add instance variables)

1998-11-28  Paolo Bonzini  <bonzini@gnu.org>

	* lib/comp.c: The method cache was not properly updated: test is
	1 to: 5 do: [ :i | Object compile: 'foo ^',
	i printString. (nil foo) printNl]
	Now I'm using invalidateMethodCache instead of updateMethodCache
	(see interp.c).
	* lib/interp.c: fix: Since updateMethodCache did not always work
	I replaced it with invalidateMethodCache, which is not as gentle but
	works (anyway compiles are not so frequent and it takes nothing to
	rebuild a good cache).  Also, thisContext's ip and sp (in sendMessage
	and sendBlockValue) are now updated *after* thisContextOOP is set to
	the newly created context.  The previous implementation caused mess if
	allocFakeContext() triggered a GC.

1998-11-27  Paolo Bonzini  <bonzini@gnu.org>

	* lib/dict.c: Added the Table class variable to Character.
	* lib/gst.h: Added finalization.
	* lib/oop.c: Added finalization.  Also added lastUsedOOP which
	is used to shorten the loops on the OOP table at GC
	time It was needed because the OOP table was scanned
	three times: once to mark dependents of finalizable
	objects, once to reverse pointers (prepareForSweep),
	once to scan for objects to be finalized.  Now the
	whole GC is on average 50% faster than it used to be
	BEFORE having to add all these cycles.
	* lib/oop.inl: Created
	* lib/prims.inl: Added finalization primitives 256-257
	* lib/sym.c: Added finalizeSymbol.
	* lib/sym.h: Added finalizeSymbol

1998-11-26  Paolo Bonzini  <bonzini@gnu.org>

	* lib/interp.inl: Created

1998-11-25  Paolo Bonzini  <bonzini@gnu.org>

	* lib/dict.c: Moved many routines to dict.inl for speed.  Changed
	BlockClosure to a byte-subclass to save eight bytes.
	* lib/dict.h: Moved most things to gst.h, added dict.inl
	* lib/dict.inl: Created
	* lib/interp.c: Added primitive 104 (String hash function), inlined
	many things around.
	* lib/oop.c: Changed the way the marking system works.  Instead of
	two entry points (markAnOOP and markOOPRange) both
	relying on markAnOOPInternal and passing parameters
	to it through the copy stack, I have two macros
	(maybeMarkOOP and markOOPRange) which pass parameters
	to markAnOOPInternal through function arguments.
	markAnOOPInternal does its job calling itself
	recursively, doing everything on the stack without
	expensive mallocs.  This makes the code neater, since
	the whole marking system resides in a single function.
	* lib/prims.inl: Created from interp.c
	* lib/sym.c: Modified hashString to be more effective.

1998-11-24  Paolo Bonzini  <bonzini@gnu.org>

	* lib/lib.c: Added ContextPart.st, changed to try loading .stinit
	and .stpre from the current directory if the HOME
	environment variable is not found (fix for Win32).

1998-11-11  Paolo Bonzini  <bonzini@gnu.org>

	* lib/interp.c: Fixed bug in asObject primitive.  Was erroneously
	using oopAt(arg1-1) instead of oopAt(arg1).

1998-11-10  Paolo Bonzini  <bonzini@gnu.org>

	* lib/lex.c: Fixed so that _ *inside* an identifier is OK.

1998-11-08  Paolo Bonzini  <bonzini@gnu.org>

	* lib/byte.c: Added notNilSymbol and isNilSymbol.
	* lib/byte.h: Added notNilSymbol and isNilSymbol
	* lib/interp.c: Fixed bugs in returnWithValue (they had been there
	since 18 Oct...): contexts were returned to the free
	fake list even if they were not fake anymore (which
	happened if you did a snapshot).  Sooner or later, a
	normal object contended the same heap space with these
	contexts, wreaking havoc on the image. Also turned
	noParentContext to a macro and added notNil/isNil as
	bytecodes 206 and 207; these are optimized out to gain
	speed in some operations (e.g. Sets and Dictionaries).
	* lib/save.c: Added notNilSymbol and isNilSymbol
	* lib/sym.c: Added notNilSymbol and isNilSymbol.
	* lib/sym.h: Added notNilSymbol and isNilSymbol

1998-11-01  Paolo Bonzini  <bonzini@gnu.org>

	* lib/callin.c: Added vmsgSend.  Moved mstMalloc and mstGetCData here.

1998-10-26  Paolo Bonzini  <bonzini@gnu.org>

	* lib/gstpub.h: Added vmsgSend.

1998-10-18  Paolo Bonzini  <bonzini@gnu.org>

	* lib/interp.c: Changed fake OOPs so that they have entries in the
	real OOP table.  This allows me to never realize
	the fake contexts unless a snapshot is being done.
	Less GC = more speed!!
	* lib/oop.c: Fake OOPs are now in the main OOP table.  Changed
	setOOPObject to a macro for SPEED!!
	* lib/oop.h: Added freeOOP(), realizeAllOOPs()

1998-10-16  Paolo Bonzini  <bonzini@gnu.org>

	* lib/cint.c: Added stringOut return type (frees string)

1998-10-15  Paolo Bonzini  <bonzini@gnu.org>

	* lib/interp.c: Added type 9 for CObjects and Memory (smalltalk OOP)

1998-10-12  Paolo Bonzini  <bonzini@gnu.org>

	* lib/dict.c: Added BlockClosure.  Changed BlockContext to reflect
	new architecture.  Changed Float to a variable
	byte class.
	* lib/interp.c: Added support for blocks as closures (partly I wrote
	it, part I stole it from Steve Byrne  <sbb@gnu.org>'s never made public
	1.1.6 version).  Started adding support for fake
	block contexts (see 1   Jan  91)

1998-10-10  Paolo Bonzini  <bonzini@gnu.org>

	* lib/interp.c: Added support for read-only objects (prims 233-234)

1998-09-26  Paolo Bonzini  <bonzini@gnu.org>

	* lib/dict.c: Fixed allocCObject.  Added IdentitySet.

1998-09-25  Paolo Bonzini  <bonzini@gnu.org>

	* lib/interp.c: Added a few register clauses.  Also changed
	implementation of "send ==" so it doesn't actually do
	the message sends, since == should not be overridden.
	* lib/lib.c: Added ValueAdapt.st, File.st, Directory.st,
	IdentitySet.st
	* lib/oop.c: Added a free list to OOP table.  This yielded, in
	general, good performance boosts, up to ten-fold for
	snippets that heavily allocate objects!! (on average,
	the number of bytecodes per second doubled)
	* lib/oop.h: Added refreshOOPFreeList(), to be used by save.c

1998-09-18  Paolo Bonzini  <bonzini@gnu.org>

	* lib/gst.h: Started adding support for read-only objects.
	* lib/interp.c: Removed last vestiges of previous garbage
	collectors. Removing loops that were not optimized
	out by compilers caused a 30% performance increase
	(not joking!).  Y2K change...  Time>>secondClock was
	about to overflow.  Also fixed sendBlockValue to
	check argument count.
	* lib/oop.c: Removed all vestiges of previous GC algorithms.
	This was a pity because it was really instructive
	but I was not able to read anything before ;-).
	* lib/oop.h: Fixed incubator bug (incAddOOP not in braces),
	removed maybeMoveOOP and localMaybeMoveOOP.

1998-09-10  Paolo Bonzini  <bonzini@gnu.org>

	* lib/dict.c: Added LargeIntegers and Fractions.  Tried to make
	nilFill faster.
	* lib/lib.c: Added LargeInteger.st, removed changes.st since its
	changes are incorporated in Fraction.st

1998-09-09  Paolo Bonzini  <bonzini@gnu.org>

	* lib/interp.c: Started adding support for LargeIntegers!!!

1998-09-07  Paolo Bonzini  <bonzini@gnu.org>

	* lib/interp.c: Added Behavior>>#flushCache (primitive 89,
	as in the Blue Book).  Added bounds checking to	spaceGrowRate:
	(between 0 and 500)

1998-09-06  Paolo Bonzini  <bonzini@gnu.org>

	* lib/interp.c: FileStream>>nextPutAll: Primitive was giving access
	violations (!) if Integers were passed... definitely
	too greedy!  I've updated the Smalltalk code too, so
	that it handles the case, but anyway now the primitive
	fails.  On 3 Sep 98 I had broken Floats; fixed.

1998-09-03  Paolo Bonzini  <bonzini@gnu.org>

	* lib/dict.c: Added extensions to Date, modified Collection and
	SequenceableCollection so they are not indexable.
	Removed LookupKey.
	* lib/interp.c: Switched to openFile; corrected bug in floating point
	arithmetic primitives which never failed.  basicPrint
	doesn't output new-line.  Also corrected so that,
	when aborting execution, dead contexts are ignored
	and don't cause "Block returning to non-existent
	method context" errors.
	* lib/lib.c: Modified to use openFile, added a few loaded modules.

1998-09-02  Paolo Bonzini  <bonzini@gnu.org>

	*** Began development of version 1.6
	* lib/save.c: Switched to using openFile to open files
	* lib/sysdep.c: Added openFile, support for Cygnus Win32 added. A
	note on this is important.  Reluctantly I used Win32
	functions here and there.  I was not happy about that,
	but since it's the only way to do some things in
	an environment that does not fully comply to POSIX,
	I had to.

1995-12-16  Steve Byrne  <sbb@gnu.org>

	* lib/comp.c: Changed name to blockCopyColonTemporariesColonSymbol.
	* lib/sym.c: Changed name to blockCopyColonTemporariesColonSymbol.
	* lib/sym.h: Changed name to blockCopyColonTemporariesColonSymbol.

1995-11-04  Steve Byrne  <sbb@gnu.org>

	* lib/oop.c: Fixed allocObj to have what I think is the *right*
	algorithm -- simple, grows when needed.

1995-11-02  Steve Byrne  <sbb@gnu.org>

	* lib/oop.c: Fixed allocObj to properly grow when not enough
	space is required, and to terminate if the allocation
	cannot succeed.

1995-10-15  Steve Byrne  <sbb@gnu.org>

	* lib/byte.h: Added pushOuterTempVariable and storeOuterTempVariable
	byte codes.
	* lib/sym.c: Converted to the new architecture; introduced the
	notion of scopes.
	* lib/sym.h: Converted to new architecture; introduced the notion
	of scopes.

1995-10-14  Steve Byrne  <sbb@gnu.org>

	* lib/gst.y: Began adding block temporary syntax.
	* lib/tree.c: Added support for block node type for new
	architecture.
	* lib/tree.h: Added block node type for new architecture support.

1995-09-30  Steve Byrne  <sbb@gnu.org>

	*** Version 1.1.5 released.

1995-09-16  Steve Byrne  <sbb@gnu.org>

	* lib/interp.c: Moved lots of system dependent functions out to
	sysdep.
	* lib/sysdep.h: Added openPipe, closePipe, getOpenFileSize.

1995-09-10  Steve Byrne  <sbb@gnu.org>

	* lib/interp.c: Switched to fileIsReadable sysdep routine.
	* lib/lib.c: Added -g command line flag to suppress printing of
	GC messages.
	* lib/oop.c: Added GC torture test.  Heh heh heh!
	* lib/sym.c: Added incubator usage.
	* lib/sysdep.c: Added fileIsReadable, also setSignalHandler, and
	initSysdep.

1995-09-09  Steve Byrne  <sbb@gnu.org>

	* lib/callin.c: Added incubator usage.
	* lib/cint.c: Added incubator support for created objects.
	* lib/cint.c: Removed Sun Windows hacks from the file.
	* lib/interp.c: Added code to use the object incubator support.
	* lib/interp.c: Experimentally tried to next jmp_bufs so enable proper
	handling of reentering the interpreter from C callout
	code and then calling out to more C code.

1995-09-08  Steve Byrne  <sbb@gnu.org>

	* lib/dict.c: Added incubator support for newly created objects.

1995-09-07  Steve Byrne  <sbb@gnu.org>

	* lib/comp.c: Added usage of OOP incubator.
	* lib/oop.c: Added incubator support.
	* lib/oop.h: Added incubator support.

1995-08-30  Steve Byrne  <sbb@gnu.org>

	* lib/gst.h: Merged in Visual C++ changes.
	* lib/oop.c: Merged NT changes back in.  Code now contains some
	unnecessary casting and unrolled expressions (*=
	becomes = *) to shut the Visual C++ compiler's
	warnings off.

1995-08-26  Steve Byrne  <sbb@gnu.org>

	* lib/comp.c: Merged Brad Diller's changes for dealing with parsing
	specially in the browser.
	* lib/dict.c: Added kernel and image file paths as Smalltalk
	accessible variables.
	* lib/lib.h: Added kernelFileDefaultPath and imageFileDefaultPath
	as exported symbols.
	* lib/sysdep.c: Fixed to have the __cursigmask definition be
	conditional on HAVE_SIGHOLD.

1995-08-20  Steve Byrne  <sbb@gnu.org>

	* lib/oop.c: Added growMemoryTo(); it's a variant of growTo which
	does not involve the garbage collector.
	* lib/oop.c: Fixed alignSize to not double align (we don't
	preserve that property during GC anymore anyway,
	and the floating point accessing functions in dict.c
	which were the initial reason for having it are now
	sensitive to whether aligned access to doubles is
	required by the hardware or not.
	* lib/oop.h: Added growMemoryTo().
	* lib/save.c: Switched to using growMemoryTo in loadFromFile so
	that if the saved image space is larger than the
	normal memory space, the space is grown to fit.

1995-07-26  Steve Byrne  <sbb@gnu.org>

	* lib/cint.c: Fixed the makeDescriptor function to issue an error if
	it cannot find a named C function.  Already located
	some bugs in UnixStream.st which have been there
	since it's inception.

1995-07-23  Steve Byrne  <sbb@gnu.org>

	* lib/comp.c: Removed apostrophes in comments -- OS/2 doesnt
	like them (incredible!).
	* lib/dict.c: Added CIntSize so that C struct can understand
	int size.
	* lib/gst.h: Removed mstconfig.h!!! Code is now not conditional
	on the presence of config.h.
	* lib/interp.c: Merged in OS/2 diffs, and removed apostrophes from
	preprocessed-out code (OS/2's preprocessor doesn't
	understand backslash quoting.
	* lib/oop.c: Fixed #ifdefed out code to not have apostrophes
	(OS/2 doesn't understand).
	* lib/save.c: Removed extra stdio.h include

1995-07-13  Steve Byrne  <sbb@gnu.org>

	* lib/comp.c: Removed HAVE_ALLOCA_H.
	* lib/save.c: Removed HAVE_ALLOCA_H include of alloca.h (done in
	gst.h now).
	* lib/sym.c: Removed HAVE_ALLOCA_H.

1995-07-11  Steve Byrne  <sbb@gnu.org>

	* lib/cint.c: Added John Stanhope (jehu@vt.edu)'s changes for
	Objective-C calling (Thanks John!!!)
	* lib/gstpub.h: Added defineCFunc.
	* lib/save.c: Added John Stanhope (jehu@vt.edu)'s changes for
	Objective-C calling (Thanks John!!!)
	* lib/sym.c: Added John Stanhope (jehu@vt.edu)'s changes for
	Objective-C calling (Thanks John!!!)
	* lib/sym.h: Added John Stanhope (jehu@vt.edu)'s changes for
	Objective-C calling (Thanks John!!!)

1995-07-09  Steve Byrne  <sbb@gnu.org>

	* lib/byte.c: Fixed to include proper headers.
	* lib/callin.c: Fixed to include correct header files.
	* lib/comp.c: Fixed to include proper headers and have explicit
	declarations.
	* lib/dict.c: Fixed to explictly declare functions and include
	proper files.
	* lib/interp.c: Fixed to have explicit function declarations and
	correct include files.
	* lib/lex.c: Fixed to include proper headers and have functions
	declared explictly.
	* lib/oop.h: Added lots of new externs.
	* lib/save.c: Fixed to have proper inclues and explicit function
	declarations.
	* lib/tree.c: Fixed to include correct files.

1995-07-08  Steve Byrne  <sbb@gnu.org>

	* lib/lib.c: Fixed a bunch of declarations and includes so that
	functions are now explictly declared always.

1995-06-29  Steve Byrne  <sbb@gnu.org>

	* lib/sym.c: Fixed pool dictionary allocation to not allocate a
	large number of immediately thrown away arrays.

1995-06-26  Steve Byrne  <sbb@gnu.org>

	* lib/gst.h: Switched EMPTY_BYTES to be 8 byte into the word
	instead of the low bytes to make the low bytes unused
	for use with the mark/sweep GC.

1995-06-23  Steve Byrne  <sbb@gnu.org>

	* lib/cint.h: Switched guard prefix to GST
	* lib/comp.h: Switched to GST guard prefix
	* lib/dict.h: Switched to GST guard prefix
	* lib/gst.h: Switched to GST header guard.
	* lib/gstpaths.h: Switched to GST header guard prefix.
	* lib/gstpub.h: Switched to GST header guard prefix.
	* lib/id.h: Switched to GST header guard prefix.
	* lib/interp.h: Switched to GST header guard prefix.
	* lib/lex.h: Switched to GST header guard prefix.
	* lib/lib.h: Switched to GST header guard prefix.
	* lib/oop.h: Switched to GST header guard prefix.
	* lib/save.h: Switched to GST header guard prefix.
	* lib/str.h: Switched to GST header guard prefix.
	* lib/sym.h: Switched to GST header guard prefix.
	* lib/sysdep.h: Switched to GST header guard prefix.
	* lib/tree.h: Switched to GST header guard prefix.

1995-06-15  Brad Diller  <bdiller@docent.com>

	* lib/comp.c: Modified executeStatements() to support browser
	expression evaluation.  Added getByteCodeForSpecialSelector() to
	support some browser operations.
	* lib/comp.c: Store in memory the source code derived from .st
	files loaded outside the kernel directory.
	* lib/comp.h: Added getByteCodeForSpecialSelector() to support some
	browser operations.
	* lib/lex.c: Added isKernelFile() and getMethodSourceFromCurFile().
	These routines were provided to solve certain data
	integrity problem caused by accessing the source code
	indirectly from saved file information.
	* lib/lex.h: Added isKernelFile() and getMethodSourceFromCurFile().

1995-06-09  Steve Byrne  <sbb@gnu.org>

	* lib/oop.c: Began switching to compacting mark & sweep gc.
	* lib/oop.h: Began the conversion to single GC space.

1995-06-06  Steve Byrne  <sbb@gnu.org>

	* lib/byte.c: Switched to new file naming scheme.
	* lib/callin.c: Switched to new file naming scheme.
	* lib/cfuncs.c: Switched to new file naming scheme.
	* lib/cint.c: Switched to new file naming scheme.
	* lib/comp.c: Switched to new naming scheme.
	* lib/comp.h: Switched to new file naming scheme.
	* lib/dict.c: Switched to new file naming scheme.
	* lib/gstpub.h: Switched to new file naming scheme.
	* lib/id.c: Switched to new file naming scheme.
	* lib/interp.c: Switched to new file naming scheme.
	* lib/lex.c: Switched to new file naming scheme.
	* lib/lib.c: Switched to new naming scheme.
	* lib/lib.h: Switched to new file naming scheme.
	* lib/oop.c: Switched to new file naming scheme.
	* lib/save.c: Switched to new file naming scheme.
	* lib/str.c: Switched to new file naming scheme.
	* lib/sym.c: Switched to new file naming scheme.
	* lib/sysdep.c: Switched to new file naming scheme.
	* lib/tree.c: Switched to new file naming scheme.

1995-06-05  Steve Byrne  <sbb@gnu.org>

	* lib/mstpub.h: Merged in Brad Diller's changes.

1995-05-31  Steve Byrne  <sbb@gnu.org>

	* lib/mstcint.c: Fixed cFuncInfo to grow dynamically.
	* lib/mst.h: Boolean replaced with mst_Boolean, objectClass =>
	mst_objectClass, Object => gst_object.  This thanks
	to the foresightful guys at the X consortium.
	Thanks guys for wantonly chewing up name space.
	* lib/mst.h: Removed the old sysVersionMajor etc definitions --
	they are now defined in configure.in.

1995-05-30  Steve Byrne  <sbb@gnu.org>

	* lib/mstcomp.c: Replaced objectClass with mst_objectClass.  Boolean =>
	mst_Boolean.
	* lib/mstcomp.h: Boolean switched to mst_Boolean.
	* lib/mstdict.c: Replaced objectClass with mst_objectClass to avoid
	conflicts with X (grrr!).  Boolean replaced with
	mst_Boolean.  Object replaced with gst_object.
	* lib/mstdict.h: Replaced objectClass with mst_objectClass to avoid
	conflicts with X.  Boolean => mst_Boolean. Object =>
	gst_object.
	* lib/mstinterp.c: Replaced objectClass with mst_objectClass.  Boolean =>
	mst_Boolean.
	* lib/mstinterp.h: Boolean => mst_Boolean.
	* lib/mstlex.c: Boolean => mst_Boolean.
	* lib/mstlex.h: Boolean => mst_Boolean (darn X!).
	* lib/mstlib.c: Boolean => mst_Boolean.
	* lib/mstlib.h: Boolean renamed to mst_Boolean.
	* lib/mstoop.c: Boolean => mst_Boolean.
	* lib/mstoop.h: Boolean => mst_Boolean.  Object => gst_object.
	* lib/mstsave.c: Boolean => mst_Boolean.  Object => gst_object.
	* lib/mstsave.h: Boolean => mst_Boolean.
	* lib/mstsym.c: Boolean => mst_Boolean.
	* lib/msttree.h: Boolean => mst_Boolean.

1995-05-28  Steve Byrne  <sbb@gnu.org>

	* lib/mstdict.c: Finally hacked floatNew to deal properly on
	architectures where double alignment requirements
	are different from those of long.
	* lib/mstsysdep.c: Added getdtablesize for those systems such as HP
	which do not have this useful function.
	* lib/mstsysdep.c: Fixed getCurDirName to selectively use getwd or getcwd
	depending on what is supported.

1995-05-15  Brad Diller  <bdiller@docent.com>

	* lib/mstinterp.c: Added primitives 256-264 to support expression
	evaluation and other functions for the class browser.

1995-05-07  Steve Byrne  <sbb@gnu.org>

	* lib/mstdict.c: Added more machine specific datatype constants (size
	and alignment).
	* lib/msttree.h: Removed trailing comma from NodeType enum literals
	list -- some compilers are picky.

1995-04-29  Steve Byrne  <sbb@gnu.org>

	* lib/mstdict.c: Added CDoubleAlignment as a 'global' value for the
	required alignment of C type 'double'.
	* lib/mstlib.c: Moved CType to after CObject in the load order to
	better reflect the type (and symbol definition)
	dependencies.

1995-03-31  Steve Byrne  <sbb@gnu.org>

	* lib/mstcomp.c: Compiler now uses the initEmptyBytes macro to set
	the empty bytes of the byte code length of a method.
	* lib/mst.h: Adjusted EMPTY_BYTES related constants to vary with
	hardware architecture.
	* lib/mstinterp.c: Fixed branching backward to use signed arithmetic it
	was doing the computation as unsigned ints without
	sign extension when it was added ot a 64 bit pointer.
	* lib/mstoop.c: Added fflush(stdout) to some debugging funcs
	* lib/mstsym.c: Adjusted a reference to the empty bytes to use the
	new, architecture independent macro definitions.

1995-03-19  Brad Diller  <bdiller@docent.com>

	* lib/mstcint.c: Conditionally enable GC of Smalltalk objects
	referenced in callouts.

1995-03-15  Brad Diller  <bdiller@docent.com>

	* lib/mstdict.c: Added mstMalloc mstGetCData.

1995-03-01  Steve Byrne  <sbb@gnu.org>

	* lib/mstcomp.c: Fixed makeConstantOOP to handle NIL which is passed
	in from empty array literals.

1995-01-21  Steve Byrne  <sbb@gnu.org>

	* lib/mstlex.c: Some changes for architectural independence (64 bit).

1995-01-20  Steve Byrne  <sbb@gnu.org>

	* lib/mstdict.h: Added 64 bit support.
	* lib/mst.h: More changes for DEC Alpha 64bit architecture.
	* lib/mstinterp.c: Adjusted for DEC Alpha 64bit architecture.
	* lib/mstinterp.h: Added padding for 64bit architectures.

1995-01-14  Steve Byrne  <sbb@gnu.org>

	* cxtnsn/dld.c: Changed the name from DLD to USE_DLD to avoid
	conflicts with symbols defined by the DLD package in the future.

1995-01-05  Steve Byrne  <sbb@gnu.org>

	* lib/mstinterp.c: Fixed a bug when copying a fake method context
	(ip wasn't being updated, and so was pointing to
	dead storage).

1995-01-02  Steve Byrne  <sbb@gnu.org>

	* lib/mstdict.c: Fixed CType to use the new type model.
	* lib/mstdict.h: Switched to the new CType model.
	* lib/mstinterp.c: Removed primitives 147 & 148 -- they were obsolete
	anyway, and now with the new CType model they no
	longer function.

1994-12-03  Steve Byrne  <sbb@gnu.org>

	* lib/mstinterp.c: Added code stubs for asCData: Primitives.

1994-11-16  Steve Byrne  <sbb@gnu.org>

	* lib/mstinterp.c: Finally tracked down some problems with prims 183-185
	-- they were using the wrong variable to access the
	contents of the cobject, and it was just luck that
	it worked on Linux.

1994-10-08  Steve Byrne  <sbb@gnu.org>

	* lib/mstcomp.c: Fixed some bugs related to getting a GC during
	compilation (literals during compilation are part of
	the root set, etc.).
	* lib/mstinterp.c: Added SystemDictionary>>growTo: And moved a few
	builtins around.
	* lib/mstsym.c: Fixed the internCountedString bug by deferring OOP
	allocation until all instances have ben allocated.

1994-10-02  Steve Byrne  <sbb@gnu.org>

	* lib/mstoop.c: Made sure to turn off the free bit in moveOOP (no
	sense in moving an object that's freed, and moveOOP
	will not be called on a truly freed object; this
	change "repairs the damage" in cases where there is
	an accidental freeing occurring.
	* lib/mstsym.c: Fixed a bug in internCountedString that occurs other
	places where there is the possibility of doing a
	garbage collection just after a newly allocated object
	which has not been added to a root-set-reachable
	object.  The GC sees that there are no references
	to the new object, and marks its oop free and does
	not copy the just allocated object into the new
	current semispace.  This problem can occur anywhere
	these conditions occur.  Given that allocOOP moves the
	object to the current space if it's not already there,
	for this case to really occur, you have to have done
	the allocOOP before you call the second instantiate
	or other allocation primitive.

1994-09-20  Steve Byrne  <sbb@gnu.org>

	* lib/mstinterp.c: Added empty statement to the tail of a case statement.

1994-09-15  Steve Byrne  <sbb@gnu.org>

	*** Version 1.2.alpha1 released.

1994-09-04  Steve Byrne  <sbb@gnu.org>

	* lib/mstcomp.c: Fixed some of the printing at the end of
	executeStatements to avoid dividing by zero.
	* lib/mstdict.c: Switched out last bzero call.
	* lib/mst.h: More changes -- removed some old bcopy macro
	definitions, and switched more towards the autoconf
	based implementation.

1994-09-03  Steve Byrne  <sbb@gnu.org>

	* lib/cfuncs.c: Created.
	* lib/cfuncs.c: This is the first file in the distribution to not
	start with "mst".  This is the precursor to having
	short file names so that primitive operating systems
	can deal with an advanced system like Smalltalk :-) :-) :-).
	* lib/mstcint.c: Factored out initUserCFuncs to enable easier extension
	by developers.
	* lib/mstcint.c: Yanked out DLD -- it's now in the parent directory.
	* lib/mst.h: Switched double size out, switched to use RETSIGTYPE,
	and WORDS_BIGENDIAN.
	* lib/mst.h: Switched to having version defines coming from the
	config.h file, and added the edit prefix string.

1994-08-31  Steve Byrne  <sbb@gnu.org>

	* lib/mst.h: Began switching to autoconf based approach.

1994-08-24  Steve Byrne  <sbb@gnu.org>

	* lib/mst.h: Added symbolic constants for max and min integer
	values representable in a Smalltalk Integer object.
	* lib/mstinterp.c: Fixed Float>>truncated to do range checking and fail
	if converting a number that is outside the range
	of integers.

1994-08-21  Steve Byrne  <sbb@gnu.org>

	* lib/mstcomp.h: Switched to using low bit int marking.
	* lib/mstdict.h: Switched to low order bit for int flagging.
	* lib/mst.h: Switched to low order bit for int flagging.

1994-07-10  Steve Byrne  <sbb@gnu.org>

	* lib/mstlex.c: Reinstated the use of changes (it was dyked out)
	as an optional mechanism.

1994-07-09  Steve Byrne  <sbb@gnu.org>

	* lib/mstdict.c: Fixed findKey to check all elements even when the
	dictionary is full.  Previously it would check all but
	the last one, which caused some bizarre compilation
	behavior (the last class declared didn't seem to be
	there as far as the compiler was concerned).

1994-06-22  Steve Byrne  <sbb@gnu.org>

	* lib/mstcint.c: Added support for cObjectPtr type, to allow for
	passing CObject parameters by reference.  It is up
	to the client to ensure that the passed CObject type
	corresponds to the desired C datatype.

1994-06-20  Steve Byrne  <sbb@gnu.org>

	* lib/mstcint.c: Fixed stringInfo to be local to the call stack,
	instead of using a static, to allow recursive
	invocations.

1994-06-11  Steve Byrne  <sbb@gnu.org>

	* lib/mstinterp.c: Added new-style CObject accessors functions, currently
	in the range 182 -- 189.
	* lib/mstsym.c: Added cObjectPtrSymbol for new call by value parameter
	passing mode.
	* lib/mstsym.h: Added cObjectPtrSymbol.

1994-04-30  Steve Byrne  <sbb@gnu.org>

	* lib/mstinterp.c: Added CPtr incrBy:

1994-03-19  Steve Byrne  <sbb@gnu.org>

	* lib/mstcallin.c: Added %t and %T for more direct control over
	types. Also, added typeNameToOOP for mapping string
	type names to actual CType subclass instances.

1993-10-16  Steve Byrne  <sbb@gnu.org>

	* lib/mstinterp.h: Changed to have 9 priority levels, as part of the
	fix for ProcessorScheduler>>yield.

1993-10-10  Steve Byrne  <sbb@gnu.org>

	* lib/mstinterp.c: Doing some experimental hacks on the process system
	to try to recover from the case where there are no
	runnable processes.
	* lib/mstinterp.h: Fixed definition of initProcessSystem.

1993-04-04  Steve Byrne  <sbb@gnu.org>

	* lib/mstdict.c: Made printAssociationKey more bullet-proof when passed
	a non-association.

1992-11-22  Steve Byrne  <sbb@gnu.org>

	* lib/mstdict.c: Added isPipe member to FileStream.
	* lib/mstinterp.c: Fixed FileStream to have a buffer instance variable,
	and added knowledge of whether the file stream was
	a regular file or a pipe, so FileStream>>close could
	do the right thing.

1992-07-18  Steve Byrne  <sbb@gnu.org>

	* lib/mstdict.c: Added byteArrayNew.
	* lib/mstdict.c: Added countedStringNew.

1992-07-16  Steve Byrne  <sbb@gnu.org>

	* lib/mstdict.c: Added freeCObject.

1992-05-25  Steve Byrne  <sbb@gnu.org>

	* lib/mstdict.c: Added support for Emacs caching class names.
	* lib/mstinterp.c: Made system interruptable when non-interactive
	(interrupts work, that is).

1992-02-23  Steve Byrne  <sbb@gnu.org>

	* lib/mstcint.c: Added support for reading and writing scalar types.

1992-01-01  Steve Byrne  <sbb@gnu.org>

	* lib/mstcallin.c: Fixed to auto-initialize Smalltalk when the public
	routines are invoked.
	* lib/mstpub.h: Created.
	* lib/mstlib.c: Converted to be callable as a library.
	* lib/mstlib.h: Renamed from mstmain.h
	* main.c: Created from old mstmain.c (now mstlib.c)

1991-12-31  Steve Byrne  <sbb@gnu.org>

	* mstcallin.c: Created.
	* mstcallin.h: Created.
	* mstlex.c: Began adding support for having a changes file and
	pointing methods to that instead of the actual source
	file (which can get out of sync, and cause recompiles
	to lose).
	* mstoop.c: Added registered oops to root set.
	* mstoop.c: OopTable now allocated from memory instead of being
	stored as part of the executable.

1991-12-29  Steve Byrne  <sbb@gnu.org>

	* mstlex.c: Added support for readline's conditional .inputrc
	definitions, keyed off of "Smalltalk".

1991-12-22  P. Lecoanet

	* mstbyte.c: Fixed byteCodeLength failing to return 0

1991-12-08  Steve Byrne  <sbb@gnu.org>

	* mstoop.c: Changed oopValid to only check the FREE bit, instead
	of worrying about the even odd flags, which may not
	be valid.

1991-11-29  Steve Byrne  <sbb@gnu.org>

	* mstlex.c: Added fileNameOOP to hold full path name for files,
	so that all methods share the same file name string.
	Also, adjusted getCurFileName to return the full
	path name.

1991-11-28  Steve Byrne  <sbb@gnu.org>

	* mstinterp.c: Added SystemDictionary byteCodeCounter primitive.
	* mstsysdep.c: Added getCurDirName() for allowing compiler to record
	the full file name that is used.

1991-11-24  Steve Byrne  <sbb@gnu.org>

	* mstinterp.h: Context size increased to 64 (still not enough),
	to prevent inadvertent stomping of memory past the
	end of the stack.

1991-11-09  Steve Byrne  <sbb@gnu.org>

	* mstinterp.c: Fixed new: To indicate failure when failure occurs.

1991-11-02  Steve Byrne  <sbb@gnu.org>

	* mstinterp.c: Altered the logic in the primitive replace from code
	-- I don't think it was really wrong, but it wasn't
	as clear as it might have been.
	* mstinterp.c: Fixed instVarAt: To obey real stack conventions
	(was pushing instead of setting the stack top).

1991-10-20  Steve Byrne  <sbb@gnu.org>

	* mstinterp.c: Added support for user level control of memory space
	growth rate parameters.
	* mstoop.c: Support for growing now fully operational (and no,
	it hasn't taken me over a month to track down the
	problems; free time has been nil).  Also removed more
	vestiges of the incremental GC.

1991-09-15  Steve Byrne  <sbb@gnu.org>

	* mstdict.c: Fixed dictionaryAssociationAt: To not loop when the
	dictionary is full.  Thanks to Michael Richardson
	for the fix!
	* mstinterp.c: Added quitPrimitive: To allow for non-zero exit
	statuses.
	* mstoop.c: Added support for loading larger semispaces from
	saved images.

1991-09-14  Steve Byrne  <sbb@gnu.org>

	* mstdict.c: Switched to global version string.
	* mst.h: Added edit version support.
	* mstinterp.h: Increased number of literals to 256, number of
	temporaries to 64, and number of allowable primitives
	to 1024 (overkill?)
	* mstmain.c: Added edit version support.
	* mstmain.h: Added edit version support.
	* mstsave.c: Added support for edit version.

1991-09-12  Steve Byrne  <sbb@gnu.org>

	* mstmain.c: Fixed -I argument parsing code to properly gobble up
	the file name.

1991-08-04  Steve Byrne  <sbb@gnu.org>

	* mstoop.c: Removed more vestiges of the incremental GC, began
	switchover to automatically growing semi-spaces.

1991-07-19  Steve Byrne  <sbb@gnu.org>

	* mstcint.c: Started adding support for the DLD package.
	* mstmain.c: Started adding conditional support for the DLD
	package.

1991-07-06  Steve Byrne  <sbb@gnu.org>

	* mstdict.c: Added newString (create uninitialized string of a
	given length).

1991-07-05  Steve Byrne  <sbb@gnu.org>

	* mstinterp.c: Added primitive 248: `FileStream fileInLine: LineNum
	fileName: aString at: charPosInt'; this helps improve
	things for the emacs interface by making recorded
	information accurate, and making error locations also
	be accurate.
	* mstinterp.c: Added support for primitive 105, which is the basic
	fast support for doing replacement within strings.
	* mstlex.c: Added setStreamInfo so that stuff filed in from Emacs
	can have more accurate information such as the line
	number in the buffer instead of the line number in
	the temporary file.

1991-07-02  Steve Byrne  <sbb@gnu.org>

	* mstinterp.c: Fixed handling of jump true and jump false opcodes:
	they now issue an error if invoked with non trueOOP
	or falseOOP.

1991-04-19  Steve Byrne  <sbb@gnu.org>

	* mstcomp.c: Added skipCompilation boolean, for conditional
	compilation.
	* mstinterp.c: Added primitive to support conditional compilation.

1991-04-13  Steve Byrne  <sbb@gnu.org>

	* mstdict.c: Added Features global variable.  This allows for
	conditional execution based on operating system or
	machine architecture, and at some point, conditional
	compilation.

1991-03-25  Steve Byrne  <sbb@gnu.org>

	* mstlex.c: Added -> operator.

1991-03-24  Steve Byrne  <sbb@gnu.org>

	* mstdict.c: Float's class definition said that it was not
	pointers, not words, and not indexable.  When new
	instances were created, they were 2 BYTES large,
	instead of 2 words.  Changed to have the words flag
	* mstlex.c: Fixed lexing of foo:= to be seen as foo :=.
	* mstmain.c: Added loading of changes.st

1991-03-23  Steve Byrne  <sbb@gnu.org>

	* mstinterp.c: Fixed a bug with process switching: You can't depend
	on objects gotten with oopToObj after a prepareToStore
	into the parent object: it may have moved, and you're
	storing into dead storage.
	* mstinterp.c: Improved speed another 50% by "inlining" many of the
	special selectors that the compiler uses.

1991-03-17  Steve Byrne  <sbb@gnu.org>

	* mstinterp.c: Added support for C-style interrupts (signals) and
	timed interrupts to help with time slicing.

1991-02-16  Steve Byrne  <sbb@gnu.org>

	* mstcomp.c: Recursive calls to equalConstant had the arguments
	reversed.

1991-01-27  Steve Byrne  <sbb@gnu.org>

	* mstinterp.c: Modified the definition of the inline-controlling
	macro so that inlining is always selected when compiling for
	debugging.
	* mstoop.h: Force ACCESSOR_DEBUGGING off when optimizing.

1991-01-22  Steve Byrne  <sbb@gnu.org>

	* mstcint.c: Added putenv().

1991-01-05  Steve Byrne  <sbb@gnu.org>

	* mstinterp.c: Converted executePrimitiveOperation to do returns as
	soon as possible, to not use the failed variable,
	and to not do double switching on int and float
	operations.  This simple change increased performance
	from ~130K bytecodes/sec (SS1+ optim) to > 200k
	bytecodes/sec (simple code, builtins and primitives
	only, no real method invocation).
	* mstsysdep.c: Added getMilliTime().

1991-01-01  Steve Byrne  <sbb@gnu.org>

	* mstinterp.c: Switched to not creating MethodContexts always...just
	use a cache of pre-made fake method contexts and only
	create real method contexts when someone will get a
	reference to one of the method contexts.

1990-11-26  Steve Byrne  <sbb@gnu.org>

	* mstcomp.c: Fixed whileTrue: and whileFalse: To loop only if the
	value returned by the receiver is the expected one,
	instead of if it's the boolean not of the expected
	value.

1990-11-24  Steve Byrne  <sbb@gnu.org>

	* mstmain.c: Fixed to set quietExecution using || instead of |
	(HP doesn't like it otherwise).

1990-11-17  Steve Byrne  <sbb@gnu.org>

	* mstcint.c: Added support for UnixStream primitives.
	* mstmain.c: Added UnixStream and IOCtl to kernel files.

1990-11-10  Steve Byrne  <sbb@gnu.org>

	* mstcomp.c: Added support for retaining the latest compiled method
	so the interpreter can return it from the compile:
	primitive.
	* mstcomp.h: Added latestCompiledMethod, so that some of the
	compile methods can get the method that they just
	compiled and set its category.

1990-11-06  Steve Byrne  <sbb@gnu.org>

	* mstmain.c: Added the per-user pre-image file...this may turn
	into a kind of site defaults thing, but this is what
	I've wanted for a while.

1990-10-13  Steve Byrne  <sbb@gnu.org>

	* mstoop.c: Converted to use bit masks instead of bit fields,
	hoping to improve performance somewhat.

1990-10-02  Steve Byrne  <sbb@gnu.org>

	* mstmain.c: Fixed okToLoadBinary so that it returns false if
	there is a Smalltalk file found locally, but there
	is no image file locally (the stix problem).
	* mstmain.h: FindImageFile was changed to return Boolean.

1990-09-21  Steve Byrne  <sbb@gnu.org>

	* mstcomp.c: Fixed so that a block that contains no statements
	properly returns nil.

1990-08-21  Steve Byrne  <sbb@gnu.org>

	* mstinterp.c: Added support for subtypes of CObject to provide
	direct access to C data.

1990-08-11  Steve Byrne  <sbb@gnu.org>

	* mstcint.c: Added knowledge of byteArrayOut type.

1990-08-03  Steve Byrne  <sbb@gnu.org>

	* mstdict.c: Added allocCObject.
	* mstinterp.c: Added support for primitive C object allocation
	routine.

1990-05-22  Steve Byrne  <sbb@gnu.org>

	*** Version 1.1.1 released (I think. I added this on May 10th, 1999... --- pb)
	* mstmain.c: Improved on Doug's mapping with macro to improve
	readability.
	* mstmain.c: Short name stuff added, thanks to Doug McCallum.

1990-05-20  Steve Byrne  <sbb@gnu.org>

	* mstcomp.c: Improved error handling...compiler errors set a flag,
	and execution does not occur if the expression to be
	executed has compilation errors.
	* mstinterp.c: Improved error handling when error: Or
	doesNotUnderstand: occurs.  Also, added ^C handling
	to abort execution.

1990-05-17  Steve Byrne  <sbb@gnu.org>

	* mstsysdep.c: Added enableInterrupts and disableInterrupts.
	System V.3 code signal support from Doug McCallum
	(thanks, Doug!).

1990-05-16  Steve Byrne  <sbb@gnu.org>

	* mstcomp.c: Added usage of emacsProcess.
	* mstsym.c: Changed usages of "entry" to "ent" to prevent
	collisions with C compilers which have this identifier
	as a reserved word.
	* mstsysdep.c: Created.
	* mstsysdep.h: Created.

1990-04-24  Steve Byrne  <sbb@gnu.org>

	* mstinterp.c: Improved error handling for fopen/popen primitives.
	* mstlex.c: Error checking for integers too large.

1990-04-21  Steve Byrne  <sbb@gnu.org>

	* mstdict.c: Added toByteArray.
	* mstsym.c: Addded byteArraySymbol.

1990-04-20  Steve Byrne  <sbb@gnu.org>

	* mstbyte.c: Added initByteCodes to fix a robustness issue with
	the compiler.
	* mstcomp.c: Fixed compiler to reset the byte code system before
	using it.  The problem was if an error occurred, the
	old byte code stream was still in use, and further
	compilations were losing in a big way.
	* mstinterp.c: Make fileIn not close the stream that it's reading
	from; this is taken care of by the caller, and causes
	very strange behavior if we try to close it twice!
	* mstlex.c: Added the closeIt argument to popStream so that the
	closing behavior could be separated from the popping
	behavior (in particular, for fileIn).

1990-04-17  Steve Byrne  <sbb@gnu.org>

	* mstsave.c: Fixing binary save to save only to the maximum used
	OOP slot, instead of saving the entire OOP table. This
	should improve load time and decrease disk storage
	requirements.

1990-04-08  Steve Byrne  <sbb@gnu.org>

	* mstoop.c: Changed oopFree to oopValid to fix the bug with
	someInstance losing after GC's due to objects that
	have non-free OOP table entries, but point to freed
	objects.
	* mstoop.h: Changed oopFree to oopValid to better reflect the
	semantics.

1990-04-07  Steve Byrne  <sbb@gnu.org>

	* mstinterp.c: Added declaration tracing primitive.
	* mstinterp.c: Fixed fileIn: To check for existence of the file
	before trying to open it.  Returns failure if the
	file cannot be accessed.
	* mstlex.c: Character lexing routines (such as nextChar) now
	return ints to get around problems on implementations
	that don't sign extend characters by default.
	* mstoop.c: Increased mem space size to 4M.  This can be decreased
	as necessary.

1990-03-25  Steve Byrne  <sbb@gnu.org>

	* mstcomp.c: Changed cache hit ratio reporting to check for divide
	by zero, and to cast the byte counter to double
	(it was casting to float and relying on promotion).
	* mstinterp.c: Minor change for AtariSt: Decrease size of ASYNC
	queue size.
	* mstmain.c: ProcessorScheduler is too long of a name for the
	Atari; there are uniqueness problems.  Shortened to
	ProcScheduler.  Also, fixed quietExecution; wasn't
	set when reading from the terminal; should have been
	set to false (since the loading of the quiet things
	is over).

1990-02-24  Steve Byrne  <sbb@gnu.org>

	* mstoop.c: Update to change log: There are no longer any
	explicitly allocated OOPs due to the new symbol table
	structure; the September 20th, 1989 comment below is now a noop.

1990-02-15  Steve Byrne  <sbb@gnu.org>

	* mstlex.c: Added support for := as alternative assignment
	operator.

1990-02-11  Steve Byrne  <sbb@gnu.org>

	* mstsave.c: Changed the header to record the size of the oop
	table, since trying to load back into a system with
	a different sized oop table loses bigtime.

1990-01-13  Steve Byrne  <sbb@gnu.org>

	* mstcomp.c: Added support for "thisContext" as a compiler built-in
	variable.
	* mstsym.c: Added thisContextSymbol.
	* mstsym.h: Added thisContextSymbol.

1990-01-07  Steve Byrne  <sbb@gnu.org>

	* mstdict.c: Added more commentary to classes, added new global
	Smalltalk variable: Bigendian, which allows code to
	be conditional based on the architecture type.

1989-12-28  Steve Byrne  <sbb@gnu.org>

	* mstcomp.c: Compiled methods now record their exact number of
	byte codes.  Previously, if the byte codes didn't
	exactly fill to a word-boundary, there was no way
	to distinguish that case.  Now, with the advent of
	dumping byte codes from within Smalltalk, this has
	become a necessity.

1989-12-27  Steve Byrne  <sbb@gnu.org>

	* mstcomp.c: Realloc literal vec wasn't reallocing in units of
	sizeof(OOP), so after a while, the literal vector
	wasn't big enough.  Typically most methods don't have
	a lot of literals, so this was not a problem.

1989-12-19  Steve Byrne  <sbb@gnu.org>

	* mstinterp.c: Added suport for primitive filein (for use with
	autoload -- "12 gauge autoloader", A. Swartzenegger,
	The Terminator)
	* mstsym.c: Rebuilt symbol table.  Used to use the main OOP table
	as a symbol table, due to issues involving initial
	bootstrapping of the system.  Now using open hash
	table built of arrays and linked lists, so that no
	special precautions need be taken by the GC system
	or the image save/restore facility.

1989-10-15  Steve Byrne  <sbb@gnu.org>

	* mstpaths.h: Created.
	* mstmain.c: Added support for creating an "installed" version
	of Smalltalk.  There is now an include file that the
	installer can customize for his site that provides
	default locations to be checked for the kernel .st
	files and the binary image file, but these can be
	overidden in two ways: a) by a file of the same name
	in the user's current directory, or b) environment
	variables SMALLTALK_KERNEL and SMALLTALK_IMAGE.

1989-10-02  Steve Byrne  <sbb@gnu.org>

	* mstcomp.c: Fixed a bug with compilation of cascaded messages. see
	HACK ALERT in the file.

1989-09-23  Steve Byrne  <sbb@gnu.org>

	* mst.h: Modifications to support operation on a DECstation 3100.

1989-09-21  Steve Byrne  <sbb@gnu.org>

	* mstcomp.c: Made compilation of methods from strings record the
	source string.

1989-09-20  Steve Byrne  <sbb@gnu.org>

	* mstoop.c: Added oop table slot GC'ing.  I'm not dealing with oop
	table slots that are explictly allocated; I believe
	that most OOP slots are not explicitly chosen and so
	not running the incremental reclaimer for that case
	shouldn't hurt us.

1989-09-13  Steve Byrne  <sbb@gnu.org>

	* mstcomp.c: Various changes for garbage collector.
	* mst.h: Sigh!!! modified pushOOP and setStackTop to move
	the objects that they refer to to toSpace...good
	bye performance!

1989-09-12  Steve Byrne  <sbb@gnu.org>

	* mstoop.c: Much of the garbage collector's operation depends on
	the fact that only 1 flip will occur between any two
	operations (such as a compilation, or a byte-code).
	The code would be much more complex if this were not
	the case, and I'm not sure that things would even be
	possible if this were not the case.  Anyway, there
	is code in this routine to check for that eventuality
	and to halt the system if it occurs.

1989-09-07  Steve Byrne  <sbb@gnu.org>

	* mstdict.c: Started adding garbage collection support.

1989-09-06  Steve Byrne  <sbb@gnu.org>

	* mstoop.c: Started implementing the garbage collector (YAY!!!)

1989-09-03  Steve Byrne  <sbb@gnu.org>

	* mstlex.c: Added getCurFileName
	* mstlex.h: Added getCurFileName

1989-09-02  Steve Byrne  <sbb@gnu.org>

	* mstcomp.c: Began adding support for the method descriptor
	instance variable.
	* mstcomp.h: Moved common compiled method structure definition
	here, so that the interpeter could share.
	* mstcomp.h: Added descriptor support
	* mstinterp.c: Process primitives in and working...starting to switch
	to compiled methods with descriptor instance variable
	in addition to header.

1989-08-30  Steve Byrne  <sbb@gnu.org>

	* mstlex.c: Fixed a bug in parseIdent which was parsing foo:2 note
	no space) not as foo: and 2, but as a mixed up token.

1989-08-09  Steve Byrne  <sbb@gnu.org>

	* mstinterp.c: Conversion completed.  Performance now 40k
	bytecodes/sec; was 43k bytecodes/sec.

1989-07-25  Steve Byrne  <sbb@gnu.org>

	* mstsym.c: Changed undeclareName to take a parameter that
	controls whether the frame index is decremented
	or not.  It appears that each block gets its own,
	non-shared temporaries/arguments, so that if the
	block is used in a process, other blocks won't have
	strange things happening to their arguments.

1989-07-18  Steve Byrne  <sbb@gnu.org>

	* mstinterp.c: Began conversion from stack based method contexts and
	blocks to more traditional method contexts and blocks.
	This change was done 1) to make call in from C easier,
	2) to make processs possible (they could have been
	implemented using stack based contexts, but somewhat
	space-wastefully), and 3) to conform with the more
	traditional definition of method contexts and block
	contexts.

1989-07-08  Steve Byrne  <sbb@gnu.org>

	* mstlex.c: Added prompt when input is a terminal.  This should
	help Emacs's shell mode determine what has been typed
	as input to the system.

1989-07-04  Steve Byrne  <sbb@gnu.org>

	* mstmain.c: Added support for user init files (in ~/.stinit),
	which are invoked on every startup.  Also, added
	support for initBlocks, which are blocks that are
	stored in the system and invoked on each startup
	(these could be used, for example, as an interim
	measure for declaring C callouts until the callout
	descriptor is converted to a Smalltalk object).

1989-06-04  Steve Byrne  <sbb@gnu.org>

	* mstcint.c: Added Smalltalk data conversion type.

1989-05-29  Steve Byrne  <sbb@gnu.org>

	* mstcint.c: Created.
	* mstcint.h: Created.
	* mstdict.c: Added the memory classes.  Added the FileStream about
	a week ago.

1989-05-26  Steve Byrne  <sbb@gnu.org>

	* mstinterp.c: Added method cache!  Why didn't I spend the 1/2
	hour sooner?

1989-05-14  Steve Byrne  <sbb@gnu.org>

	* mstlex.h: Created.

1989-04-29  Steve Byrne  <sbb@gnu.org>

	* mstdict.c: Author changed from single to married.

1989-04-05  Steve Byrne  <sbb@gnu.org>

	* mstdict.c: Restructured Class and Metaclass creation.  Is now
	table driven, and metaclasses are created containing
	the proper information.
	* mstsave.c: Modified to reflect change in classes: Now their name
	is a Smalltalk string; before, it was a C string that
	had to be saved specially.

1989-03-29  Steve Byrne  <sbb@gnu.org>

	* mstdict.c: Removed MethodDictionary as a separate type; it is
	an IdentityDictionary.

1989-03-11  Steve Byrne  <sbb@gnu.org>

	* mstdict.c: Smalltalk is now an instance of SystemDictionary.

1989-03-10  Steve Byrne  <sbb@gnu.org>

	* mstmain.c: Added support for automatically loading image file
	if it's newer than and of the system source files.

1989-03-04  Steve Byrne  <sbb@gnu.org>

	* mstmain.h: Created.
	* mstsave.c: Created.
	* mstsave.h: Created.

1989-01-24  Steve Byrne  <sbb@gnu.org>

	* mstlex.c: Added 2 chars of push back, because 3. needs to look
	ahead one more character to see if its 3.DIGIT or
	3. next statement.

1989-01-13  Steve Byrne  <sbb@gnu.org>

	* mstdict.c: Created.
	* mstdict.h: Created.
	* mstoop.c: Created.
	* mstoop.h: Created.

1989-01-07  Steve Byrne  <sbb@gnu.org>

	* mstinterp.c: Created.
	* mstinterp.h: Created.

1989-01-05  Steve Byrne  <sbb@gnu.org>

	* mstsym.c: Created.

1989-01-02  Steve Byrne  <sbb@gnu.org>

	* mstbyte.h: Created.

1989-01-01  Steve Byrne  <sbb@gnu.org>

	* mstcomp.c: Created.
	* mstcomp.h: Created.
	* mstsym.h: Created.

1988-12-30  Steve Byrne  <sbb@gnu.org>

	* msttree.c: Created.
	* msttree.h: Created.

1988-12-29  Steve Byrne  <sbb@gnu.org>

	* mst.h: Created.

1988-12-27  Steve Byrne  <sbb@gnu.org>

	* mstbyte.c: Created.
	* mstid.c: Created.
	* mstid.h: Created.
	* mstlex.c: Created.
	* mstmain.c: Created.
	* mststr.c: Created.
	* mststr.h: Created.


