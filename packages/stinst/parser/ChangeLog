2013-09-26  Holger Hans Peter Freyther  <holger@freyther.de>

	* GSTParser.st: Move the emptySeq variable into the block it is
	used.

2013-08-19  Holger Hans Peter Freyther  <holger@freyther.de>

	* RewriteTests.st: Add TestRewrite>>#testOldSyntaxSymbolParsing.
	* SqueakParser.st: Add SqueakFileInScanner>>#scanBinary:.

2013-08-18  Holger Hans Peter Freyther  <holger@moiji-mobile.com>

	* STLoaderObjs.st: Add LoadedMethod>>#methodRecompilationSourceString.

2013-09-11  Holger Hans Peter Freyther  <holger@freyther.de>

	* STLoaderObjsTests.st: Fix the test method and test.

2013-09-10  Gwenael Casaccio <gwenael.casaccio@gmail.com>

	* GSTParser.st: Make STInST and gst-parse.c consistent about '.'
	at the end of the class definition.
	* GSTParserTests.st: Add testcase for trailing consistency.

2013-08-10  Gwenael Casaccio <gwenael.casaccio@gmail.com>

	* STLoaderObjs.st: Fix ProxyNamespace>>#printOn: and add ProxyNamespace>>#examineOn:.
	* STLoaderObjsTests.st: Add testcase for ProxyNamespace>>#printOn:.

2013-08-10  Gwenael Casaccio <gwenael.casaccio@gmail.com>

	* RBParser.st: Fix RBScanner>>#scanNumberValue.
	* RewriteTests.st: Add testcase for number and array literal parsing.

2013-07-16  Gwenael Casaccio <gwenael.casaccio@gmail.com>

	* DebugInformationTests.st: Add a debug information test case.
	* STCompiler.st: Add  DebugInformation support.
	* package.xml: Add the new test case

2013-03-31  Holger Hans Peter Freyther  <holger@freyther.de>

	* STLoaderObjs.st: Change ProxyNamespace>>#printOn to avoid
	recursion into self.

2013-02-23  Holger Hans Peter Freyther  <holger@freyther.de>

	* RBParser.st: Fix RBParser>>#parsedNegatedNumber.
	* RBToken.st: Add RBNumberLiteralToken>>#makeNegative.
	* RewriteTests.st: Add testcase for RBParser>>#parseNegatedNumber.

2013-02-17  Holger Hans Peter Freyther  <holger@freyther.de>

	* RBParser.st: Fix RBScanner>>#scanNumber.
	* RewriteTests.st: Add testcase for RBScanner>>#scanNumber.
	* package.xml: Add the new test to the testsuite.

2013-02-10  Holger Hans Peter Freyther  <holger@freyther.de>

	* OldSyntaxExporter.st: Reformat the method node in
	OldSyntaxExporter>>#oldSyntaxSourceCodeFor:.
	* RewriteTests.st: Add the TestRewrite class.
	* package.xml: Add the TestRewrite test to the testsuite.

2013-02-08  Holger Hans Peter Freyther  <holger@freyther.de>

	* RBFormatter.st: Use the RBToken>>#storeOn: for writing.
	* RBParser.st: Create a RBNumberLiteralToken for number literals.
	* RBToken.st: Create the RBNumberLiteralToken class.
	* RewriteTests.st: Add test for the number literal parsing
	* package.xml: Add the new test to the testsuite.

2013-01-23  Gwenael Casaccio  <gwenael.casaccio@gmail.com>

	* STSymTable.st: Remove security checks.

2013-01-29  Holger Hans Peter Freyther  <holger@freyther.de>

	* STLoaderObjs.st: Put class variables into the classVars array.

2013-01-29  Holger Hans Peter Freyther  <holger@freyther.de>

	* Exporter.st: Add FileOutExporter class>>#fileOutComment:to:.
	* SqueakExporter.st: Re-implement the
	SqueakSyntaxExporter class>>#fileOutComment:to: using chunks.

2012-10-06  Holger Freyther  <holger@freyther.de>

	* SqueakExporter.st: Use 'as yet unclassified' as category string
	if it is nil.

2012-10-02  Holger Freyther  <holger@freyther.de>

	* GSTParser.st: Change GSTFileInParser>>#parseClassTag to parse
	more complicated pragmas.

2012-09-29  Holger Freyther  <holger@freyther.de>

	* RBParser.st: Add RBScanner>>#digitValue:.
	* SqueakParser.st: Reimplement SqueakFileInScanner>>#digitValue:,
	SqueakFileInScanner>>#isDigit:base:. Parsing of 16rff is now
	possible.

2012-09-09  Holger Freyther  <holger@freyther.de>

	* STLoaderObjs.st: Add LoadedBehavior>>#article.

2011-11-10  Gwenael Casaccio  <mrgwen@gmail.com>
            Paolo Bonzini  <bonzini@gnu.org>

	* STSymTable.st: Use #scopeDictionary.

2011-09-26  Paolo Bonzini  <bonzini@gnu.org>

	* GSTParser.st: Do not shortcut evaluation of class tags to
	#evaluateMessageOn:selector:arguments:.

2011-09-24  Holger Hans Peter Freyther  <holger@freyther.de>

	* STCompiler.st: Do not attempt inlining of #to:do: if the
	block argument is not a literal.

2011-09-24  Paolo Bonzini  <bonzini@gnu.org>

	* STCompiler.st: Do not attempt inlining of boolean methods if
	the arguments are not literal blocks.  Reported by Holger
	Freyther.

2011-06-28  Gwenael Casaccio <mrgwen@gmail.com>

	* ParseTreeSearcher.st: Remove #beConsistent.
	* STSymTable.st: Remove #beConsistent.

2011-04-21  Paolo Bonzini  <bonzini@gnu.org>

	* STCompiler.st: Compile nil, true and false using short sequences.
	This also avoids that nil is entered in the literals table,
	for example when compiling "x := nil".

2011-04-21  Paolo Bonzini  <bonzini@gnu.org>

	* STCompiler.st: Fix detection of return at the end of a "then"
	branch.

2011-04-21  Paolo Bonzini  <bonzini@gnu.org>

	* STCompiler.st: Fix and extract inlining of #repeat.
	* STCompLit.st: Enable it.

2011-04-21  Paolo Bonzini  <bonzini@gnu.org>

	* STSymTable.st: Add and use LiteralDictionary.

2011-02-06  Holger Hans Peter Freyther  <holger@freyther.de>

	* STLoader.st: Look through the return statement.

2011-02-03  Paolo Bonzini  <bonzini@gnu.org>

	* GSTParser.st: Fix previous commit.  Reported by
	Dmitry Matveev.

2011-01-24  Paolo Bonzini  <bonzini@gnu.org>

	* GSTParser.st: Use #subclass:environment:.

2011-01-24  Paolo Bonzini  <bonzini@gnu.org>

	* STLoader.st: Intercept #subclass:environment:.
	* STLoaderObjs.st: Add #subclass:environment:.

2010-12-13  Paolo Bonzini  <bonzini@gnu.org>

	* STFileParser.st: Add return tag to doits, thus fixing
	Behavior>>#evaluate: when using the STInST compiler.
	* GSTParser.st: Look beyond return tag.
	* SIFParser.st: Look beyond return tag.
	* SqueakParser.st: Look beyond return tag.

2010-12-04  Paolo Bonzini  <bonzini@gnu.org>

	* package.xml: Remove now superfluous <file> tags.

2010-10-16  Paolo Bonzini <bonzini@gnu.org>

	* STLoaderObjs.st: Add UndefinedClassWarning and use it to return
	a (not quite) reasonable value from UndefinedClass>>#superclass.

2010-09-13  Holger Hans Peter Freyther  <zecke@selfish.org>

	* GSTParser.st: GSTFileInParser>>parseClassTag pass the argument
	as a Smalltalk object.

2010-08-26  Paolo Bonzini  <bonzini@gnu.org>

	* STLoader.st: Resolve PPFailure classSide properly. #classSide was
	added in to Squeak in 2004 and is used in packages like PetitParser
	and Magritte.

2010-08-26  Holger Hans Peter Freyther  <zecke@selfish.org>

	* SqueakParser.st: Handle binary selector with more than two
	charachters. This is required for ANSI Smalltalk and will allow
	to import PetitParser.

2010-06-22  Gwenael Casaccio  <mrgwen@gmail.com>

	* RBParser.st: Accept non-decimal floats.

2010-06-22  Paolo Bonzini  <bonzini@gnu.org>

	* STEvaluationDriver.st: New, moved from Compiler package.

2010-06-17  Paolo Bonzini  <bonzini@gnu.org>

	* RBToken.st: Add #isValue.
	* RBParser.st: Use it.

2010-03-01  Gwenael Casaccio  <mrgwen@gmail.com>

	* STDecompiler.st: Fix some errors.

2010-01-01  Paolo Bonzini  <bonzini@gnu.org>

	* Update copyright years.

2009-10-27  Lee Duhem  <lee.duhem@gmail.com>
	    Paolo Bonzini  <bonzini@gnu.org>

	* Extensions.st: Add #formattedSourceStringAt:ifAbsent:.

2009-10-02  Paolo Bonzini  <bonzini@gnu.org>

	* OldSyntaxExporter.st: Fix emission of nil categories.

2009-09-13  Paolo Bonzini  <bonzini@gnu.org>

	* STLoaderObjs.st: Implement #inheritShape and #kindOfSubclass.
	Implement #shape for proxy classes, default it to nil.

2009-09-10  Paolo Bonzini  <bonzini@gnu.org>

	* OldSyntaxExporter.st: Remove category pragmas.

2009-09-10  Paolo Bonzini  <bonzini@gnu.org>

	* SqueakExporter.st: Fix filing out uncommented classes.

2009-09-10  Paolo Bonzini  <bonzini@gnu.org>

	* NewSyntaxExporter.st: Remove #fileOutHeader calls.
	* OldSyntaxExporter.st: Remove #fileOutHeader calls.

2009-09-07  Paolo Bonzini  <bonzini@gnu.org>

	* Extensions.st: Fix pasto.

2009-09-07  Paolo Bonzini  <bonzini@gnu.org>

	* Exporter.st: Remove #fileOutHeader.
	* Extensions.st: Place the header here.

2009-09-07  Paolo Bonzini  <bonzini@gnu.org>

	* NewSyntaxExporter.st: Do not write useless shape pragmas.

2009-07-27  Paolo Bonzini  <bonzini@gnu.org>

	* SqueakExporter.st: New.

2009-07-27  Paolo Bonzini  <bonzini@gnu.org>

	* OldSyntaxExporter.st: Group methods by category.

2009-07-27  Paolo Bonzini  <bonzini@gnu.org>

	* STLoaderObjs.st: Implement #isOldSyntax.

2009-07-27  Paolo Bonzini  <bonzini@gnu.org>

	* NewSyntaxExporter.st: Do not disable #initialize in
	FormattingExporter.

2009-07-27  Paolo Bonzini  <bonzini@gnu.org>

	* OldSyntaxExporter.st: New.

2009-07-27  Paolo Bonzini  <bonzini@gnu.org>

	* Exporter.st: Extract parts to...
	* NewSyntaxExporter.st: ... here
	* Extensions.st: ... and here.
	* package.xml: Update.

2009-07-07  Paolo Bonzini  <bonzini@gnu.org>

	* STCompiler.st: Fix new syntax categories, reported by Stefan
	Schmiedl.

2009-06-07  Paolo Bonzini  <bonzini@gnu.org>

	* STCompiler.st: Send #asSourceCode to the method's source code.
	* STFileParser.st: Define a MappedSourceCode class and use it instead
	of MappedCollection.  Define #segmentFrom:to: for Stream.
	Define #asSourceCode for any object.
	* STLoaderObjs.st: Remove #methodSourceString hack involving
	MappedCollection.

2009-06-07  Paolo Bonzini  <bonzini@gnu.org>

	* GSTParser.st: Fix compilation of class variables.

2009-06-07  Paolo Bonzini  <bonzini@gnu.org>

	* GSTParser.st: Accept no period at end of class variable if before ].

2008-08-13  Paolo Bonzini  <bonzini@gnu.org>

	* STLoaderObjs.st: Add more functionality to UndefinedMetaclass.

2008-07-28  Paolo Bonzini  <bonzini@gnu.org>

	* RBParser.st: Parse negative numbers as unary minus + number.
	Simplify RBScanner>>#scanNumberValue; fix bugs in ScaledDecimals.

2008-05-18  Stephen Compall  <scompall@nocandysw.com>

	* GSTParser.st: Support namespace pragmas.

2008-05-17  Stephen Compall  <scompall@nocandysw.com>

	* PoolResolutionTests.st: Test for namespace shared pools.

2008-04-27  Stephen Compall  <scompall@nocandysw.com>

	* STSymTable.st: Create VariableBindings directly to add to
	Undeclared; don't rely on it to convert plain Associations.

2008-04-25  Paolo Bonzini  <bonzini@gnu.org>

	* STFileParser.st: Create FileSegments with Files in it.

2008-04-25  Stephen Compall  <scompall@nocandysw.com>

	* PoolResolutionTests.st: Test the importation of shared pools and
	class pools from superclasses, as well as that only the direct
	superclass's namespaces are eliminated from the namespace walk.
	* STSymTable.st: Factor pool binding search into a separate class
	hierarchy, allowing global and class-by-class setting.  By
	default, use newly-created semantics for pool search.
	* PoolResolutionTests.st: New file, testing the above.

2008-02-08  Stephen Compall  <scompall@nocandysw.com>

	* GSTParser.st: Always reverse a #methodsFor: with an
	#endMethodList when compiling new-syntax methods.

2008-02-05  Paolo Bonzini  <bonzini@gnu.org>

	* SqueakParser.st: Fix parsing of binary message at end of chunk.

2008-02-05  Paolo Bonzini  <bonzini@gnu.org>

	* STLoaderObjs.st: Add missing method #methodFormattedSourceString
	for polymorphism with CompiledMethod.

2008-01-27  Stephen Compall  <scompall@nocandysw.com>

        * Exporter.st: Comment or private-ize uncommented methods.

2008-01-18  Paolo Bonzini  <bonzini@gnu.org>

	* GSTParser.st: Don't add an existing namespace when parsing
	"Namespace current: ... [ ]".

2008-01-18  Paolo Bonzini  <bonzini@gnu.org>

	* STLoader.st: Add #fullyDefinedLoadedClasses.
	* STLoaderObjs.st: Add #fullyDefinedLoadedClasses.

2007-10-21  Paolo Bonzini  <bonzini@gnu.org>

	* Exporter.st: Add #methodFormattedSourceString and use it.
	Add #parserClass.
	* GSTParser.st: Support adding more instance variables to a class.
	* RBParser.st: Add RBBracketedMethodParser.
	* SIFParser.st: Send #noteOldSyntax to compiled methods.
	* STFileParser.st: Return compiled methods from #compile:.  Add
	#resolveClass:.  Send #noteOldSyntax to compiled methods.
	* STLoader.st: Return compiled methods from #compile:.
	* STLoaderObjs.st: Add dummy #noteOldSyntax method to LoadedMethod.

2007-10-13  Paolo Bonzini  <bonzini@gnu.org>

	* GSTParser.st: Invert true/false in previous checkin.
	* STLoaderObjs.st: Extract category from parsed methods.

2007-10-12  Paolo Bonzini  <bonzini@gnu.org>

	* GSTParser.st: Don't replace instance variables except
	in the first declaration inside a subclass declaration.

2007-10-08  Paolo Bonzini  <bonzini@gnu.org>

	* STFileParser.st: Look for EOF in #parseSmalltalk.
	* GSTParser.st: Use #parseDoits instead of #parseSmalltalk.  Leave
	#parseDoits if looking at a close bracket.

2007-10-08  Paolo Bonzini  <bonzini@gnu.org>

	* GSTParser.st: Look for class extensions before "Namespace" blocks.

2007-10-05  Paolo Bonzini  <bonzini@gnu.org>

	* STLoader.st: Add no-category class creation methods.
	* STLoaderObjs.st: Fix override of non-existent method in
	UndefinedClass.  Add no-category class creation methods.

2007-09-02  Stephen Compall <scompall@nocandysw.com>

	* STCompiler.st: Jump past #true bytes after ifFalse: branch in
	#ifFalse:ifTrue:, not #false bytes.

2007-08-20  Paolo Bonzini  <bonzini@gnu.org>

	* STCompiler.st: User store+pop+push sequence for pushing literal
	variables.

2007-08-13  Paolo Bonzini  <bonzini@gnu.org>

	* STLoader.st: Create undefined namespaces.
	* STLoaderObjs.st: Support creating undefined classes in arbitrary
	namespaces.

2007-08-13  Paolo Bonzini  <bonzini@gnu.org>

	* STLoaderObjs.st: Add one more #classPragmas implementation.

2007-08-12  Paolo Bonzini  <bonzini@gnu.org>

	* Exporter.st: Use #classPragmas to emit class metadata.
	* RBFormatter.st: Use #storeLiteralOn:.
	* STLoader.st: Support the CStruct creation method.
	* STLoaderObjs.st: Likewise, and add #classPragmas.

2007-08-10  Paolo Bonzini  <bonzini@gnu.org>

	* RBParser.st: Convert to FloatD if there is no exponent.

2007-08-09  Paolo Bonzini  <bonzini@gnu.org>

	* STFileParser.st: Change #parseDoit: to #parseDoit, change
	#parseStatements to include only the block it had inside, localize
	MappedCollection hack in a single place.
	* SIFParser.st: Change #parseStatements to #parseDoit.
	* GSTParser.st: Override #evaluate: to include comments.  Don't
	create MappedCollection here.  Split part of #parseStatements into
	a #parseDoit override.

2007-08-08  Daniele Sciascia  <daniele.sciascia@lu.unisi.ch>

	* RBParser.st: Add #parseMethodInto:.
	* STFileParser.st: Support "self evaluate: nil".  Only skip "!"
	after evaluating.  Add #currentNamespace.
	* STLoader.st: Handle #addClassVarName:value:.
	* STLoaderObjs.st: Add #collectCategories.
	* GSTParser.st: New.

2007-08-08  Paolo Bonzini  <bonzini@gnu.org>

	* STLoaderObjs.st: Override #isMetaclass together with #isClass.

2007-08-06  Paolo Bonzini  <bonzini@gnu.org>

	* STLoader.st: Accept a non-proxy namespace in #currentNamespace:.
	Add #loadedClasses.
	* STLoaderObjs.st: Ensure #nameIn: returns a string.

2007-07-18  Stephen Compall  <scompall@nocandysw.com>

	* STCompiler.st: Rename #compileString: et al to #primCompile:,
	and change uses accordingly.

2007-07-17  Stephen Compall  <scompall@nocandysw.com>

	* STCompiler.st: Add #canCompile: to STCompiler class.
	(#compileBoolean:) Don't put receiver's bytecodes if refusing to
	optimize the given message send.
	(#compileTimesRepeat:, #compileLoop:): Likewise.

2007-07-13  Paolo Bonzini  <bonzini@gnu.org>

	* STFileParser.st: Don't call #step before evaluating.
	* SqueakParser.st: Refine ! parsing.
	* STLoaderObjs.st: Add more methods required by converter.

2007-07-13  Paolo Bonzini  <bonzini@gnu.org>

	* STLoaderObjs.st: Fix PseudoBehavior>>#subclasses.

2007-07-12  Paolo Bonzini  <bonzini@gnu.org>

	* Exporter.st: Do not call #environment when not filing out the
	complete class.  Indentation fixes.
	* STLoader.st: Create an UndefinedClass object if there is no
	namespace and the class is not found in the current namespace.
	* STLoaderObjs.st: Move methods variable up to PseudoBehavior.
	Make metaclass of ProxyClass a ProxyClass itself.  Add
	UndefinedClass and UndefinedMetaclass.  Turn subclasses of
	PseudoBehavior into an OrderedCollection.

2007-07-12  Paolo Bonzini  <bonzini@gnu.org>

	* SqueakParser.st: Fix parsing of comments.

2007-06-27  Paolo Bonzini  <bonzini@gnu.org>

	* SIFParser.st: New.
	* SqueakParser.st: Use super.
	* STFileParser.st: Split part of #parseMethodDefinitionList
	into a separate method.
	* Exporter.st: Fix indentation of class-instance variables.
	Don't emit form feed character.

2007-06-25  Paolo Bonzini  <bonzini@gnu.org>

	* STFileParser.st: Use #%.

2007-06-23  Stephen Compall  <scompall@nocandysw.com>

	* RBParseNodes.st (RBMethodNode>>#primitiveSources):
	Handle MappedCollections as source instead of FileSegments.
	* StartCompiler.st (STParserScanner): New class.  Use it
	to allow other parsers to rescan tokens from some parser.
	(STEvaluationDriver>>#methodsFor:parsingWith:compiler:class:): Add
	parsingWith: argument and handle separation of evaluate:/compile:
	driver and parser.
	(Behavior>>#methodsFor:ifTrue:): Send to the driver, not the parser.

2007-06-20  Paolo Bonzini  <bonzini@gnu.org>

	* STFileParser.st: Refactor part of #parseDoits into the
	superclass.

2007-06-09  Paolo Bonzini  <bonzini@gnu.org>

	* Exporter.st: Use #parseNodeAt: to access the method
	parse tree.  Define it for Behavior and #methodParseNode for
	CompiledMethod.
	* STFileParser.st: Use MappedCollection trick for method
	source too.  Look at the token type to distinguish '!' from other
	tokens.
	* STLoaderObjs.st: Store an RBMethodNode in LoadedMethod
	objects.
	* STLoaer.st: Adjust for above change to LoadedMethod.
	* SqueakParser.st: New.
	
2007-06-08  Paolo Bonzini  <bonzini@gnu.org>

	* RBParser.st: Move file-in related stuff...
	* STFileParser.st: ... here.  Add STParsingDriver hierarchy.
	* STLoader.st: Make STInterpreter an STParsingDriver.
	* StartCompiler.st: Rename STFileInParser to STEvaluationDriver
	and make it a subclass of STParsingDriver.

2007-06-08  Paolo Bonzini  <bonzini@gnu.org>

	* Exporter.st: emit superclass name relative to namespace
	of the current class.
	* STLoader.st: track defaultNamespace as a proxy which is
	set up at the *beginning* of the processing.
	* STLoaderObjs.st: redefine PseudoBehavior>>#nameIn: as it is
	done for PseudoNamespace.

2007-06-07  Paolo Bonzini  <bonzini@gnu.org>
	
	* RBParser.st: Really fix doit parsing.

2007-06-07  Paolo Bonzini  <bonzini@gnu.org>

        * RBFormatter.st: Add #formatAll:.
        * RBParser.st: Fixes to doit parsing.

2007-05-25  Paolo Bonzini  <bonzini@gnu.org>

        * Exporter.st: Fix output spacing.

2007-05-25  Daniele Sciascia  <sciascid@lu.unisi.ch>

	* Exporter.st: New.
	* STLoaderObjs.st: Eliminate file-out code.

2007-05-25  Daniele Sciascia  <sciascid@lu.unisi.ch>

	* RBFormatter.st: fix various bugs.  Reformat method comments.
	Support varying the overall indentation.
	* RBParseNodes.st: store category in RBMethodNode.
	* RBParser.st: support storing a method category.  Rewrite
	parseDoits to deal with comments correctly (almost).
	* RBToken.st: fix bug in handling of #{...}.
	* STLoader.st: Replace #unknownTo:selector:arguments:
	with #unknown:.  Store a proxy for the nil superclass.  Add various
	methods used by the converter.
	* STLoaderObjs.st: Add ProxyNilClass.  Store selector in
	LoadedMethod.  Add various #copyEmpty: methods.

2007-05-24  Paolo Bonzini  <bonzini@gnu.org>

	* ParseTreeSearcher.st: Add #capacity to RBSmallDictionary.

2007-05-24  Paolo Bonzini  <bonzini@gnu.org>

	* RBParseNodes.st: Wasn't thinking straight when I made
	the last change.

2007-05-23  Paolo Bonzini  <bonzini@gnu.org>

	* STLoaderObjs.st: Don't use TokenStream.

2007-05-23  Paolo Bonzini  <bonzini@gnu.org>

	* RBParseNodes.st: Add #deepCopy.  Our #copy is as deep
	as it needs to be.

2007-05-22  Stephen Compall  <scompall@nocandysw.com>
	    Paolo Bonzini  <bonzini@gnu.org>

	* RewriteTests.st: New.
	* ParseTreeSearcher.st: Fix two bugs.

2007-05-14  Paolo Bonzini  <bonzini@gnu.org>

	* STLoader.st: Update for class shapes, add new methods.
	* STLoaderObjs.st: Update for class shapes, add new methods.

2007-04-16  Stephen Compall  <scompall@nocandysw.com>
	    Paolo Bonzini  <bonzini@gnu.org>

	* OrderedSet.st: Added (by Stephen Compall).
	* STSymTable.st: Use it.

2007-04-08  Stephen Compall  <scompall@nocandysw.com>

	* STSymTable.st: Add superclass environments and shared
	pools to global variable search.

	* RBParser.st: Reset `tags' instance variable before each
	method parse in a method definition list.

2007-03-19  Paolo Bonzini  <bonzini@gnu.org>

	* STCompiler.st: Remove unused class variable.
	* STLoader.st: Likewise.
	* STSymTable.st: Likewise.

2007-02-18  Stephen Compall  <scompall@nocandysw.com>

	* RBParseNodes.st: Fix off-by-one in
	RBMethodNode>>#primitiveSources when source is a FileSegment.

2007-01-31  Paolo Bonzini  <bonzini@gnu.org>

	* STCompiler.st: Avoid that #compileAttribute: shadows
	an instance variable with a temporary.

2007-01-12  Stephen Compall  <scompall@nocandysw.com>

	* ParseTreeSearcher.st: Use the visit*:onMatch: variants
	of visit*: in accept*Node: methods of ParseTreeRewriter.  Add
	visitNode:onMatch:.

2007-01-11  Paolo Bonzini  <bonzini@gnu.org>

	* ParseTreeSearcher.st: Refine the previous refactoring.

2007-01-11  Paolo Bonzini  <bonzini@gnu.org>
	    Stephen Compall  <s11@member.fsf.org>

	* ParseTreeSearcher.st: Refactor in order to not modify
	the parse trees when nothing changes.

2007-01-10  Paolo Bonzini  <bonzini@gnu.org>

	* ParseTreeSearcher.st: Port RBSmallDictionary to GNU
	Smalltalk.  #copy and causing the dictionary to grow failed.
	Reported by Stephen Compall.

2007-01-02  Paolo Bonzini  <bonzini@gnu.org>
	    Stephen Compall  <s11@member.fsf.org>

	* RBParseNodes.st: Fix for stream-based compilation, where
	a method's start offset is >1.
	* RBParser.st: Add #currentToken accessor, and
	the #parseBinaryMessageNoGreater hack.
	* STCompiler.st: Compile method attributes.

2007-01-02  Stephen Compall  <s11@member.fsf.org>

	* STSymTable.st: Warn for shadowing variable, fix
	"duplicate variable name" warning and turn it into an error.

2006-12-31  Paolo Bonzini  <bonzini@gnu.org>
	    Stephen Compall  <s11@member.fsf.org>

	* STSymTable.st: Handle undeclared variables without a
	path.  Fix order of instance variables.
	* STCompiler.st: Fix off-by-one error in compiling
	RBArrayConstructorNodes.
	* ParseTreeSearcher.st: Rename acceptArrayNode: to
	acceptArrayConstructorNode:.
	* RBFormatter.st: Likewise.
	* RBParseNodes.st: Likewise.

2006-12-31  Paolo Bonzini  <bonzini@gnu.org>

        * STCompLit.st: Don't use "nil" slots from VMSpecialMethods.
        * STCompiler.st: Remove dupReceiver.  Adjust for above change.
        Compile receiver in compileTimesRepeat: and compileLoop:, test for
        receiver being a block in compileWhileLoop:.  Extract part of
        acceptMessageNode: to compileMessage:.  Compile receiver in
        acceptCascadeNode: and call compileMessage: to avoid compiling the
        receiver of a cascaded message repeatedly (reported by Stephen Compall).

2006-12-05  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 2.3 released.

2006-12-05  Paolo Bonzini  <bonzini@gnu.org>

        * STCompiler.st: Pass current environment in evaluate:parser:,
        add #compile:asMethodOf:classified:parser:environment: and don't inline
        its functionality elsewhere.
        * STParser.st: Parse leading _ as assignment.
        * StartCompiler.st: Pass current environment when compiling
        doits.

2006-09-15  Paolo Bonzini  <bonzini@gnu.org>

	* STCompiler.st: Rethink previous change.

2006-09-13  Paolo Bonzini  <bonzini@gnu.org>

	* STCompiler.st: Adapt for new super send.
	* StartCompiler.st: Support streams in #compile:
	* STDecompiler: Don't use dead method nextByteCodeIndex:,
	add new hook #lineNo:with:, rewrite #merge:, support #timesRepeat:
	decompilation, fix case where return bytecodes leave the previous
	sdtatement on the stack.  Last but not least, adapt for new
	super send. 

2006-07-20  Paolo Bonzini  <bonzini@gnu.org>

	* StartCompiler.st: define #fileIn in Stream.

2006-07-17  Paolo Bonzini  <bonzini@gnu.org>

	* RBParser.st: support $<123> syntax.

2006-07-10  Paolo Bonzini  <bonzini@gnu.org>

	* STLoaderObjs.st: new class OverlayDictionary
	allows to add extensions and redefinitions to base classes.

2003-09-24  Paolo Bonzini  <bonzini@gnu.org>

	* STCompiler.st: adapt to new bytecode set.
	Fix bugs and refactor the code along the way.

2003-09-13  Paolo Bonzini  <bonzini@gnu.org>

	* STDecompiler.st: remove unused callbacks for
	disassembling bytecodes.

2003-06-22  Paolo Bonzini  <bonzini@gnu.org>

	* STSymTable.st: use STVariables to store instance
	variables.
	* STCompiler.st: check whether storing is allowed
	for every variable.

2003-06-05  Paolo Bonzini  <bonzini@gnu.org>

	* STCompiler.st: compile blocks by pushing
	the CompiledBlock directly.

2003-05-09  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 2.1.2 released.

2003-04-17  Paolo Bonzini  <bonzini@gnu.org>

        *** Version 2.1.1 (stable) released.

2003-04-12  Paolo Bonzini  <bonzini@gnu.org>

        *** Version 2.1 (stable) released.

2003-01-04  Paolo Bonzini  <bonzini@gnu.org>

	* RBParser.st: provide default implementation
	for #evaluate:

2002-11-15  Paolo Bonzini  <bonzini@gnu.org>

	* STCompiler.st: compile RBOptimizedNodes

2002-10-08  Paolo Bonzini  <bonzini@gnu.org>

	* STLoaderObjs.st: adapt to recent changes
	in the layout of Namespace.

2002-09-21  Paolo Bonzini  <bonzini@gnu.org>

	* STDecompiler.st: new file

2002-09-13  Paolo Bonzini  <bonzini@gnu.org>

        *** Versions 2.0c (development) and 2.0.6 (stable) released

	* STSymTable.st: added namespace syntax support.
	* STCompiler.st: pass `self' along to the
	symbol table.
	* test.st: test namespace syntax

2002-09-13  Paolo Bonzini  <bonzini@gnu.org>

	* RBParser.st: added namespace syntax support.
	* STLoader.st: support namespace syntax.

2002-09-06  Paolo Bonzini  <bonzini@gnu.org>

	* RBTests.st: new file

2002-08-19  Paolo Bonzini  <bonzini@gnu.org>

	* STLoader.st: separate into a superclass,
	STInterpreter, and a subclass (the old STClassLoader)

2002-08-14  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 2.0.5 (stable) released

2002-08-12  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 2.0b (development) released

2002-08-07  Paolo Bonzini  <bonzini@gnu.org>

	*** Versions 2.0a (development) and 2.0.4 (stable) released

2002-07-17  Paolo Bonzini  <bonzini@gnu.org>

        *** Version 2.0.3 released

2002-07-15  Paolo Bonzini  <bonzini@gnu.org>

	* STCompiler.st: rewritten as a RBProgramNodeVisitor
	* STLoader.st: modified to use RBProgramNodes
	* RBFormatter.st: added hacks to print #{...}
	* RBToken.st: added hacks to resolve #{...} at
	compile-time
	* RBParseNodes.st: added hacks to resolve #{...} at
	compile-time

2002-07-14  Paolo Bonzini  <bonzini@gnu.org>

	* RBParser.st: ported
	* RBParseNodes.st: ported
	* RBFormatter.st: ported
	* ParseTreeSearcher.st: ported
	* RBToken.st: ported
	* STParser.st: part deleted, part moved to StartCompiler.st
	* STParseNodes.st: deleted
	* STTok.st: deleted
	* STToken.st: deleted
	* STFormatter.st: deleted
	* STVisitor.st: deleted

2002-07-11  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 2.0.2 released
	
2002-07-03  Paolo Bonzini  <bonzini@gnu.org>

	* STTok.st: parse scaled decimal literals correctly.

2002-06-28  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 2.0.1 released
	
2002-06-25  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 2.0 released
	
2002-05-11  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 1.96.6 released
	
2002-04-14  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 1.96.5 released
	
2002-03-12  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 1.96.4 released
	
2002-01-29  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 1.96.3 released.

2002-01-04  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 1.96.2 released
	
2002-01-02  Paolo Bonzini  <bonzini@gnu.org>

	* Load.st: put everything in the STInST namespace
	* StartCompiler.st: use the STInST namespace

2001-12-11  Paolo Bonzini  <bonzini@gnu.org>

	* STLoaderObjs.st: implement #= and #hash for ProxyClass
	and ProxyNamespace.
        * STParser.st: compile correctly { a. b. } (with
	a dot before the closed brace).

2001-12-01  Paolo Bonzini  <bonzini@gnu.org>

	* STParser.st: compute FileSegments correctly
	(include the first token in the selector and don't include
	the bang)

2001-11-29  Paolo Bonzini  <bonzini@gnu.org>

	* STParser.st: parse arrays according to the ANSI
	standard.
	* STLoader.st: new file
	* STLoaderObjs.st: new file

2001-11-20  Paolo Bonzini  <bonzini@gnu.org>

	*** Version 1.96.1 released

        * test.st: moved from unsupported/misc/Compiler.st

2001-11-13  Paolo Bonzini  <bonzini@gnu.org>

        * STFormatter.st: prefixed # to symbols in arrays
        * STTok.st: prefixed # to symbols in arrays
        * STToken.st: prefixed # to symbols in arrays

2001-02-23  Paolo Bonzini  <bonzini@gnu.org>

	*** Released version 1.95.3

2001-02-19  Paolo Bonzini  <bonzini@gnu.org>

	* STParser.st: use the ability of #perform: &
	friends to receive a CompiledMethod as their first parameter.
	* STCompiler.st: added #compiled:asMethodOf:classified:parser:
	which does not install the new CompiledMethod in the Behavior
	specified in the second parameter.

	* STCompiler.st: fixed a few compilation bugs
	(cascades, #whileTrue:, outer temporaries).
	* STCompLit.st: StoreVariable and PopStoreVariable
	were inverted.

	* StartCompiler.st: support pluggable parser &
	compiler classes
	* STParser.st: support pluggable parser &
	compiler classes

2001-01-31   Paolo Bonzini  <bonzini@gnu.org>

	* STCompiler.st: compile STBindingNodes.
	* STParseNodes.st: defined STBindingNode.
	* STParser.st: generate STBindingNode.
	* STVisitor.st: defined #variableBinding: visiting method.
	* STFormatter.st: defined #variableBinding: visiting method.
	
2001-01-30   Paolo Bonzini  <bonzini@gnu.org>

	*** Released version 1.95.1
	
2000-11-01  Paolo Bonzini  <bonzini@gnu.org>

	* STToken.st: added STOpenBraceTok and STCloseBraceTok.
	* STTok.st: recognize STOpenBraceTok and STCloseBraceTok.
	* STParser.st: generate STArrayNodes.
	* STParseNodes.st: defined STArrayNode.
	* STCompiler.st: compile STArrayNodes.
	* STVisitor.st: defined #braceArray: visiting method.
	* STFormatter.st: defined #braceArray: visiting method.

2000-08-08  Paolo Bonzini  <bonzini@gnu.org>

	* STParseNodes.st: refactored STBlockNode and STMethodBodyNode
	to have a common superclass, STCompoundNode.
	Implemented STCompundNode.
	* STCompiler.st: modified compilation of conditionals to
	please the JIT compiler (see libgst/ChangeLog).

2000-07-02  Paolo Bonzini  <bonzini@gnu.org>

	* STTok.st: parse scaled decimal correctly

2000-06-17  Paolo Bonzini  <bonzini@gnu.org>

	*** Released versions 1.95 (development) and 1.7.5 (stable)

2000-04-12  Paolo Bonzini (bonzini@gnu.org)

	* STVisitor.st: added support for comments

2000-04-10  Paolo Bonzini (bonzini@gnu.org)

	* STFormatter.st: created
	* STVisitor.st: added STVisitingParser

1999-12-31  Paolo Bonzini  <bonzini@gnu.org>

	* STFileInParser.st: split between STParser.st and
	StartCompiler.st (so that the class itself is loaded together with
	the Parser package, even though it is not activated).
	* STSymTable.st: use an IdentitySet for storing pool
	dictionaries.

1999-12-27  Paolo Bonzini  <bonzini@gnu.org>

	* STCompiler.st: new way of compiling blocks.

1999-12-21  Paolo Bonzini  <bonzini@gnu@org>

	* STParser.st: added STPluggableParser, derivated from
	the syntax highlighter.

1999-12-05  Paolo Bonzini  <bonzini@gnu.org>

	* STTok.st: parse stuff like 1.0d53 and 1.0q212 correctly
	even though FloatD/FloatE/FloatQ is not supported yet.

1999-11-11  Paolo Bonzini  <bonzini@gnu.org>

	* STCompiler.st: added another delegation method for warnings.
	* STParser.st: added warnings (nothing is done with them yet,
	but the methods are there).
	* STSymTable.st: duplicate var names produce a warning.

1999-10-30  Paolo Bonzini  <bonzini@gnu.org>

	* STParser.st: save the last STParseNode that was generated
	* STParseNode.st: added the `comments' variable

1999-10-22  Paolo Bonzini  <bonzini@gnu.org>

	* STSymTable.st: fixed bug with undeclared variables (error
	when the undeclared variable's name had not been interned as a symbol)
	* STVisitor.st: created
	* Load.st: load STVisitor.st

1999-10-13  Paolo Bonzini  <bonzini@gnu.org>

	* STParser.st: added ability to read comment tokens and
	removed methods that test for particular kinds of tokens
	(#isBinaryOperator: and #isSymbolId:)
	* STTok.st: now passes comment tokens to STParser
	* STToken.st: reworked token hierarchy to add polymorphic
	methods that replace STParser's old #isBinaryOperator: and
	#isSymbolId:. Hope to get not only elegance, but also a bit of
	speed.

1999-10-11  Paolo Bonzini  <bonzini@gnu.org>

	* STSymTable.st: added code to handle `Undeclared'.
	* STFileInParser.st: tell STSymbolTable to recognize
	`Undeclared' inside file-ins.

1999-09-11  Paolo Bonzini  <bonzini@gnu.org>

	* STSymTable.st: implementation of namespaces

1999-09-02  Paolo Bonzini  <bonzini@gnu.org>

	* STParser.st: added support for [ :a :b || temp1 temp2 | ].

1999-05-13  Paolo Bonzini  <bonzini@gnu.org>

	* STCompLit.st: First changes to support loop optimization
	* STCompiler.st: First changes to support loop optimization
	* STParseNodes.st: First changes to support loop optimization

1999-04-22  Paolo Bonzini  <bonzini@gnu.org>

	* STCompiler.st: modified to support recent changes in the
	bytecode set.
	* STCompLit.st: same as above.

1999-03-03  Paolo Bonzini  <bonzini@gnu.org>

	* STCompiler.st: added stack depth tracing.

1999-02-16  Paolo Bonzini  <bonzini@gnu.org>

	* STCompLit.st: added support for > 64 literals
	(BigLiteral)
	* STCompiler.st: added support for > 64 literals
	(compileBigLiteral:)

1999-02-14  Paolo Bonzini  <bonzini@gnu.org>

	* STParser.st: Selectors stay Strings. The compiler
	turns them to Symbols.

1999-02-13  Paolo Bonzini  <bonzini@gnu.org>

	* STSymTable.st: changed to use new #isSymbolString:
	method for Symbol

1999-02-09  Paolo Bonzini  <bonzini@gnu.org>

	* STParser.st: Removed usage of Tokenizer's recording
	capability, since Tokenizer no more has that capability...

1999-02-03  Paolo Bonzini  <bonzini@gnu.org>

	* Load.st: created.
	* STParser.st: Fixed bug in parsing binary message
	declarations.
	* STCompiler.st: fixed #compileString: to work with
	metaclasses.

1999-02-01  Paolo Bonzini  <bonzini@gnu.org>

	* STFileInParser.st: created.

1999-01-26  Paolo Bonzini  <bonzini@gnu.org>

	* STVariable.st: created to detect storing in an argument
	* STCompiler.st: in sync with the C compiler, storing into
	an argument is now detected as an error.  Thanks to Andreas Klimas
	for signaling this to me!!

1998-11-24  Paolo Bonzini  <bonzini@gnu.org>

	* STSymTable.st: perfected treating of class pools (now
	they're exactly the same as a shared pool dictionary)

1998-11-23  Paolo Bonzini  <bonzini@gnu.org>

	* STCompiler.st: added STDoitCompiler

1998-11-06  Paolo Bonzini  <bonzini@gnu.org>

	* STToken.st: Added code that supports new methods to
	find out the class of a token.
	* STParser.st: Switched most uses to isMemberOf: to
	special and faster methods.  Split into STParser and STFileInParser
	to support other cases when parsing is necessary

1998-10-01  Paolo Bonzini  <bonzini@gnu.org>

	* STParser.st: Added byte array constants
	* STTok.st: Fixed number parsing, changed parseError: to
	error:

1998-09-08  Paolo Bonzini  <bonzini@gnu.org>

	* STParser.st: Fixed bugs which jumped out while testing the
	compiler (e.g. parseArrayLit returned OrderedCollections)
	* STTok.st: Now subclass of Tokenizer; renamed to STTok

1998-09-05  Paolo Bonzini  <bonzini@gnu.org>

	* STCompiler.st: moved compilation policy to subclasses
	of STParseNode.  Now compile (which is called compile:) returns a
	CompiledMethod.  Added STFakeCompiler.
	* STCompLit.st: merged VMStorageLocations and VMSpecialIndices
	into VMOtherConstants, added VMSpecialMethods
	* STParseNodes.st: switched to a single node (STConstNode)
	for constants, cleaned up unused classes, renamed Selector to
	SelectorNode.  Added support for storing source code.

1998-09-03  Paolo Bonzini  <bonzini@gnu.org>

	* STParser.st: Switched to a single node for constants
	(STConstNode), two separate nodes for identifiers (STIdentifierNode
	and STSpecialIdentifierNode), changed pools quite a bit, prefixed
	ST to everything.
	* STSymTable.st: modified heavily to support new code in
	STCompiler

1995-09-04  Steve Byrne  <sbb@gnu.org>

	* STParseNodes.st: Switched to being externally accessible
	instead of supporting internal access only.

1995-09-03  Steve Byrne  <sbb@gnu.org>

	* STCompLit.st: created.
	* STCompiler.st: created.
	* STSymTable.st: created.
